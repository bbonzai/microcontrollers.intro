%!PS-Adobe-2.0 EPSF-2.0
%%Creator: dvips(k) 5.995 Copyright 2015 Radical Eye Software
%%Title: anatomy-for.dvi
%%CreationDate: Sat Jun 18 07:12:48 2016
%%BoundingBox: -132 -1226 2505 721
%%DocumentFonts: DejaVuSansMono LinLibertineTI
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -E -o anatomy-for.eps anatomy-for.dvi
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2016.06.18:0712
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 919 2014-05-19 18:42:47Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.23, 2014/07/31
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def

%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
  x1 y2 lineto 
  x2 y2 lineto 
  x2 y1 lineto
  x1 y1 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%    /Helvetica findfont b scalefont setfont 
    /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 919 2014-05-19 18:42:47Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.04, 2013/10/26
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 801 2013-07-09 18:10:41Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: pst-text.pro 0 0
%!
% PostScript header file pst-text.pro
% Version 1.0, 2005-11-29 (hv)
% For distribution, see pstricks.tex.

/tx@TextPathDict 40 dict def
tx@TextPathDict begin

% Syntax:  <dist> PathPosition -
% Function: Searches for position of currentpath distance <dist> from
%           beginning. Sets (X,Y)=position, and Angle=tangent.
/PathPosition
{ /targetdist exch def
  /pathdist 0 def
  /continue true def
  /X { newx } def /Y { newy } def /Angle 0 def
  gsave
    flattenpath
    { movetoproc }  { linetoproc } { } { firstx firsty linetoproc }
    /pathforall load stopped { pop pop pop pop /X 0 def /Y 0 def } if
  grestore
} def

/movetoproc { continue { @movetoproc } { pop pop } ifelse } def

/@movetoproc
{ /newy exch def /newx exch def
  /firstx newx def /firsty newy def
} def

/linetoproc { continue { @linetoproc } { pop pop } ifelse } def

/@linetoproc {
  /oldx newx def /oldy newy def
  /newy exch def /newx exch def
  /dx newx oldx sub def
  /dy newy oldy sub def
  /dist dx dup mul dy dup mul add sqrt def
  /pathdist pathdist dist add def
  pathdist targetdist ge
  { pathdist targetdist sub dist div dup
    dy mul neg newy add /Y exch def
    dx mul neg newx add /X exch def
    /Angle dy dx atan def
    /continue false def
  } if
} def

/TextPathShow { 
  /String exch def
  /CharCount 0 def
% hv begin 2005-11-29   1.00
%   String length
%   { String CharCount 1 getinterval ShowChar
%     /CharCount CharCount 1 add def
   /CharSize 1 def
   currentfont /FontType get 0 eq
   { currentfont /FMapType get dup 2 eq exch dup 5 eq exch 9 eq or or
     { /CharSize 2 def} if
   } if
   String length CharSize idiv
   { String CharCount CharSize getinterval ShowChar
     /CharCount CharCount CharSize add def
% hv end 2005-11-29   1.00
  } repeat
} def

% Syntax: <pathlength> <position> InitTextPath -
/InitTextPath
{ gsave
    currentpoint /Y exch def /X exch def
    exch X Hoffset sub sub mul
    Voffset Hoffset sub add
    neg X add /Hoffset exch def
    /Voffset Y def
  grestore
} def

/Transform
{ PathPosition
  dup
  Angle cos mul Y add exch
  Angle sin mul neg X add exch
  translate
  Angle rotate
} def

/ShowChar { 
  /Char exch def
  gsave
    Char end stringwidth
    tx@TextPathDict begin
    2 div /Sy exch def 2 div /Sx exch def

%%%  MV 10-09-99 00:36
    /sc?currentpoint where {pop sc?currentpoint} {currentpoint} ifelse
%   currentpoint

    Voffset sub Sy add exch
    Hoffset sub Sx add
    Transform
    Sx neg Sy neg moveto
    Char end tx@TextPathSavedShow
    tx@TextPathDict begin
  grestore
  Sx 2 mul Sy 2 mul rmoveto
} def
%
end
% END pst-text.pro

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 40 2014-07-25 06:46:27Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.15, 2014/01/27.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%%%%  EMPTY lines are not aload!!! Problem with pst-eps -> \par
%
%
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
% /startGlobal { true setglobal globaldict begin } bind def
% /endGlobal { end false setglobal } bind def
end
/tx@NodeDict 400 dict def tx@NodeDict begin
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
%
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
           /NAngle yyB yyA sub xxB xxA sub Atan def 
} def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
%
/HPutLines { HPosBegin yB yA ge 
  { /check { le } def } { /check { ge } def } ifelse 
  /xxA xA def 
  /yyA yA def 
  mark xB yB LPutVar 
    { dup Y check { exit } { /yyA ED /xxA ED } ifelse } 
  loop 
  /yyB ED /xxB ED cleartomark HPosEnd 
} def
%
/VPosBegin { 
  xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
%
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def 
} def
%
/NCCoor { 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def
  GetEdgeA GetEdgeB 
  /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def 
  /LPutPos { LPutVar LPutLine } def 
  /HPutPos { LPutVar HPutLine } def 
  /VPutPos { LPutVar VPutLine } def 
  LPutVar 
} def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: pst-3d.pro 0 0
%% $Id: pst-3d.pro 247 2010-01-04 22:45:42Z herbert $
% PostScript prologue for pst-3d.tex.
% Version 0.01, 2010/01/01 
%
/tx@3Ddict 300 dict def 
tx@3Ddict begin
%
/SetMatrixThreeD {
  dup sin /e ED cos /f ED
  /p3 ED /p2 ED /p1 ED
  p1 0 eq
  { /a 0 def /b p2 0 le { 1 } { -1 } ifelse def
    p3 p2 abs
  }
  { p2 0 eq
    { /a p1 0 lt { -1 } { 1 } ifelse def /b 0 def
      p3 p1 abs
    }
    { p1 dup mul p2 dup mul add sqrt dup
      p1 exch div /a ED
      p2 exch div neg /b ED
      p3 p1 a div
    }
    ifelse
  }
  ifelse
  atan dup sin /c ED cos /d ED
  /Matrix3D
  [
    b f mul c a mul e mul sub
    a f mul c b mul e mul add
    d e mul
    b e mul neg c a mul f mul sub
    a e mul neg c b mul f mul add
    d f mul
  ] def
} def
%
/ProjThreeD {
  /z ED /y ED /x ED
  Matrix3D aload pop
  z mul exch y mul add exch x mul add
  4 1 roll
  z mul exch y mul add exch x mul add
  exch
} def
%
/SetMatrixEmbed {
  SetMatrixThreeD
  Matrix3D aload pop
  /z3 ED /z2 ED /z1 ED /x3 ED /x2 ED /x1 ED
  SetMatrixThreeD
  [
  Matrix3D aload pop
  z3 mul exch z2 mul add exch z1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  Matrix3D aload pop
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  x3 mul exch x2 mul add exch x1 mul add
  3 -1 roll 3 -1 roll 4 -1 roll 8 -3 roll 3 copy
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  ]
  concat
} def
%
/TMSave {
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
} def
%
/TMRestore { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/TMChange {
  TMSave
  /cp [ currentpoint ] cvx def % ??? Check this later.
  CM
  CP T STV
  CM matrix invertmatrix    % Inv(M')
  matrix concatmatrix       % M Inv(M')
  exch exec
  concat cp moveto
} def
%
end % of tx@3Ddict
%%
%% End of file `pst-3d.pro'.

%%EndProcSet
%%BeginProcSet: pst-math.pro 0 0
%                           -*- Mode: Postscript -*-
% pst-math.pro --- PostScript header file pst-math.pro
%
% Author          : Christophe JORSSEN 
% Author          : Herbert Voß <hvoss@tug.org>
% Last Mod        : $Date: 2014/07/30 $
% Version         : 0.63 $
%
/PI 3.14159265359 def
/ENeperian 2.71828182846 def
%
/DegToRad {PI mul 180 div} bind def
/RadToDeg {180 mul PI div} bind def
%
/COS {RadToDeg cos} bind def
/SIN {RadToDeg sin} bind def
/TAN {dup SIN exch COS Div} bind def
/tan {dup sin exch cos Div} bind def
/ATAN {neg -1 atan 180 sub DegToRad} bind def
/ACOS {dup dup mul neg 1 add sqrt exch atan DegToRad} bind def
/acos {dup dup mul neg 1 add sqrt exch atan} bind def
/ASEC {1 exch Div ACOS} bind def
/ASIN {neg dup dup mul neg 1 add sqrt neg atan 180 sub DegToRad} bind def
/asin {neg dup dup mul neg 1 add sqrt neg atan 180 sub} bind def
/ACSC {1 exch Div ASIN} bind def
%
/EXP {ENeperian exch exp} bind def
%
/COSH {dup EXP exch neg EXP add 2 div} bind def
/SINH {dup EXP exch neg EXP sub 2 div} bind def
/TANH {dup SINH exch COSH div} bind def
/ACOSH {dup dup mul 1 sub sqrt add ln} bind def
/ASINH {dup dup mul 1 add sqrt add ln} bind def
/ATANH {dup 1 add exch neg 1 add Div ln 2 div} bind def
%
%/SINC {dup SIN exch Div} bind def
/SINC { dup 0 eq { pop 1 } { dup SIN exch div } ifelse } bind def

/GAUSS {dup mul 2 mul dup 4 -2 roll sub dup mul exch div neg EXP exch PI mul sqrt div} bind def
%
/GAMMA { 2 dict begin				% hv 2007-08-30
  /z exch def
  1.000000000190015				% p(0)
  0 1 5 {					% on stack is 0 1 2 3 4 5 
    dup 					% n-1 n-1
    [ 76.18009172947146 
     -86.50532032941677 
      24.0140982483091 
      -1.231739572450155
       0.1208650973866179E-2 
      -0.5395239384953E-5      ] exch get exch 	% p(n) n-1
      1 add z add div			     	% p(n)/(z+n)
      add					% build the sum
    } for
    Pi 2 mul sqrt z div mul
    z 5.5 add z 0.5 add exp mul ENeperian z 5.5 add neg exp mul 
  end } bind def
%    
/GAMMALN {dup dup dup 5.5 add dup ln 3 -1 roll .5 add mul sub neg 1.000000000190015
    0 1 5 {
    [76.18009172947146 -86.50532032941677 24.0140982483091 -1.231739572450155
    .1208650973866179E-2 -.5395239384953E-5 2.5066282746310005] exch get
    4 -1 roll 1 add dup 5 1 roll div add} for
    4 -1 roll div 2.5066282746310005 mul ln add exch pop} bind def
/BETA {2 copy add GAMMALN neg exch GAMMALN 3 -1 roll GAMMALN EXP} bind def
%
/HORNER {aload length
    dup 2 add -1 roll
    exch 1 sub {
        dup 4 1 roll
        mul add exch
    } repeat
    pop
} bind def
%
/BESSEL_J0 {dup abs 8 lt {
    dup mul dup [57568490574 -13362590354 651619640.7 -11214424.18 77392.33017 -184.9052456] HORNER
    exch [57568490411 1029532985 9494680.718 59272.64853 267.8532712 1] HORNER
    Div}
    {abs dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -1.098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index COS mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul} 
    ifelse} bind def
%
/BESSEL_Y0 {dup 8 lt {
    dup dup mul dup [-2957821389 7062834065 -512359803.6 10879881.29 -86327.92757 228.4622733] HORNER
    exch [40076544269 745249964.8 7189466.438 47447.26470 226.1030244 1] HORNER
    Div exch dup ln exch BESSEL_J0 .636619772 mul mul add}
    {dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -.1098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index SIN mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
/BESSEL_J1 {dup abs 8 lt {
    dup dup mul dup 3 -2 roll [72362614232 -7895059235 242396853.1 -2972611.439 15704.48260 -30.16036606] HORNER mul
    exch [144725228442 2300535178 18583304.74 99447.43394 376.9991397 1] HORNER
    Div}
    {dup abs dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index COS mul
    exch [.04687499995 6.2002690873E-3 .8449199096E-5 -.88228987E-6 .105787412E-6] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul exch dup abs Div mul} 
    ifelse} bind def
%
/BESSEL_Y1 {dup 8 lt {
    dup dup dup mul dup [-.4900604943E13 .1275274390E13 -.5153428139E11 .7349264551E9 -.4237922726E7 .8511937935E4] HORNER
    exch [.2499580570E14 .4244419664E12 .3733650367E10 .2245904002E8 .1020426050E6 .3549632885E3 1] HORNER
    Div mul exch dup dup ln exch BESSEL_J1 mul exch 1 exch div sub .636619772 mul add}
    {dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index SIN mul
    exch [.04687499995 -.2002690873E-3 .8449199096E-5 6.88228987E-6 .105787412E-6] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
% En cours...
/BESSEL_Yn {dup 0 eq {pop BESSEL_Y0}{dup 1 eq {pop BESSEL_Y1}{
    exch dup BESSEL_Y0 exch dup BESSEL_Y1 exch 2 exch Div {
        mul 3 -1 roll mul 2 index sub pstack} for
    } ifelse } ifelse } bind def
%
/SIMPSON { 1 dict begin  %% on stack a b var f ierr  Dominik Rodriguez
  3 index 5 index sub                                % compute h
  1                                                  % a b var f ierr h n
  4 index 7 index def 3 index exec                   % a b var f ierr h n f(a)
  5 index 7 index def 4 index exec add               % a b var f ierr h n f(a)+f(b)
  5 index 8 index 4 index 2 div add def 4 index exec % a b var f ierr h n f(a)+f(b) f(a+h/2)
  exch 1 index 4 mul add 0  % a b var f ierr h n old=f(a+h/2) Estim=f(a)+f(b)+4f(a+h/2) NbLoop
    {                                                % a b var f ierr h n old Estim NbLoop
      5 -1 roll 2 div dup 6 1 roll              % h<-h/2
      5 -1 roll 2 mul 5 1 roll                  % n<-2n
                                                % a b var f ierr h n old Estim NbLoop h
      2 div 10 index add 0                      % a b var f ierr h n old Estim NbLoop a+h/2 Cumul
      5 index { 
        1 index 10 index exch def 8 index exec add exch 6 index add exch 
      } repeat                                  % a b var f ierr h n old Estim NbLoop a+nh/2 Cumul
      exch pop                                  % a b var f ierr h n old Estim NbLoop New
      2 index 1 index 4 mul 6 -1 roll 2 mul sub sub % a b var f ierr h n Estim NbLoop New Diff
      4 -1 roll 2 mul 1 index sub 4 1 roll          % a b var f ierr h n Estim NbLoop New Diff
      exch 4 1 roll                             % a b var f ierr h n old Estim NbLoop Diff
      5 index 6 div mul abs 6 index lt { exit } if
      1 add dup 9 eq { exit } if
  } loop                                        % a b var f ierr h n old Estim NbLoop
  exch 5 -1 roll 6 div mul mark 10 2 roll cleartomark
end 
} def
% ------------------------------------ math stuff ----------------------------------
%
% Matrix A in arrays of rows A[[row1][row2]...]
% with [row1]=[a11 a12 ... b1]
% returns on stack solution vector X=[x1 x2 ... xn]
/SolveLinEqSystem { 				% on stack matrix M=[A,b] (A*x=b)
  10 dict begin					% hold all ocal
    /A exch def
    /Rows A length def         			% Rows = number of rows
    /Cols A 0 get length def   			% Cols = number of columns
    /Index [ 0 1 Rows 1 sub { } for ] def	% Index = [0 1 2 ... Rows-1]
    /col 0 def
    /row  0 def
    /PR Rows array def 				% PR[c] = pivot row for row row
  { 						% starts the loop, find pivot entry in row r
    col Cols ge row  Rows ge or { exit } if	% col < Cols and row < Rows else exit
    /pRow row def  				% pRow = pivot row		
    /max A row  get col get abs def		% get A[row[col]], first A[0,0] 
    row 1 add 1 Rows 1 sub { 			% starts for loop 1 1 Rows-1
      /j exch def				% index counter
      /x A j get col get abs def		% get A[j[r]]
      x max gt {				% x>max, then save position
        /pRow j def
        /max x def
      } if
    } for					% now we have the row with biggest A[0,1]
						% with pRow = the pivot row
    max 0 gt {					% swap entries pRow and row  in i 
      /tmp Index row  get def
      Index row  Index pRow get put
      Index pRow tmp put			% and columns pRow and row  in A
      /tmp A row get def
      A row  A pRow get put
      A pRow tmp put   				% pivot
      /row0  A row  get def 			% the pivoting row
      /p0 row0  col get def 			% the pivot value
      row 1 add 1 Rows 1 sub { 			% start for loop
        /j exch def
        /c1 A j get def
        /p c1 col get p0 div def
        c1 col p put				% subtract (p1/p0)*row[i] from row[j]
        col 1 add 1 Cols 1 sub {		% start for loop
          /i exch def
          c1 dup i exch 			% c1 i c1
          i get row0 i get p mul sub put
        } for
      } for
      PR row col put
      /col col 1 add def
      /row row 1 add def
    }{						% all zero entries
      /row row 1 add def			% continue loop with same row
    } ifelse
  } loop
  /X A def					% solution vector
  A Rows 1 sub get dup
  Cols 1 sub get exch
  Cols 2 sub get div
  X Rows 1 sub 3 -1 roll put  			% X[n]
  Rows 2 sub -1 0 {				% for loop to calculate X[i]
    /xi exch def				% current index
    A xi get 					% i-th row
    /Axi exch def
    /sum 0 def
    Cols 2 sub -1 xi 1 add { 
      /n exch def
      /sum sum Axi n get X n get mul add def 
    } for
    Axi Cols 1 sub get 				% b=Axi[Cols-1]
    sum sub 					% b-sum
    Axi xi get div				% b-sum / Axi[xi]
    X xi 3 -1 roll put  			% X[xi]
  } for
  X
  end 
} def
%
/c@_0 2.515517 def 
/c@_1 0.802853 def 
/c@_2 0.010328 def 
/d@_1 1.432788 def 
/d@_2 0.189269 def 
/d@_3 0.001308 def 
/norminv {
  5 dict begin
  neg 1 add 1 exch div ln 2 mul sqrt 
  /t exch def 
  /t2 t dup mul def 
  /t3 t2 t mul def 
  c@_0 c@_1 t mul add c@_2 t2 mul add 1 d@_1 t mul add 
  d@_2 t2 mul add d@_3 t3 mul add div neg t add 
  end
} def 
%end{norminv Michael Sharpe}
%
%
% END pst-math.pro

%%EndProcSet
%%BeginProcSet: pstricks-add.pro 0 0
%% $Id: pstricks-add.pro 37 2014-07-22 13:52:12Z herbert $
%%
% PostScript prologue for pstricks-add.tex.
%
% Version 0.23, 2009/12/17 
%
/tx@addDict 410 dict def tx@addDict begin
%%
realtime srand % set random generator
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/GTriangle {
  gsave
  /mtrx CM def
  /colorA ED /colorB ED /colorC ED 	% save the colors
  /yA ED /xA ED               		% save the origin
  xA yA translate
  rotate       		        	% \psk@gangle
  /yB ED /xB ED /yC ED /xC ED   	% save other coordinates
  /ds [                % save data in a array
     0 0 0 colorA aload pop     	% fd x y xr xg xb
     0 xB xA sub yB yA sub colorB aload pop
     0 xC xA sub yC yA sub colorC aload pop
%     1 xC xB add yB colorA aload pop  	% for use with 4 points ABCD
  ] def
  newpath
  <<
  /ShadingType 4           % single Gouraud
  /ColorSpace [ /DeviceRGB ]
  /DataSource ds
  >> 
  shfill
  closepath
  mtrx
  setmatrix grestore} def
%
/RGBtoCMYK {    % on stack r g b -> C M Y K
  3 dict begin
  /Blue ED /Green ED /Red ED
  1 Red sub     % Cyan
  1 Green sub   % Magenta
  1 Blue sub    % Yellow
  0   		% Black  
  end
} def
%
/CMYKtoGRAY { % on stack c m y k -> gray
  exch 0.11 mul add
  exch 0.59 mul add
  exch 0.3 mul add
  dup 1 gt { pop 1 }  if 
  neg 1 add 
} def
%
/RGBtoGRAY { % on stack r g b -> gray
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
} def
%
/HSBtoGRAY { 
  6 dict begin
  /b exch def 
  /s exch def 6 mul dup cvi dup 
  /i exch def sub 
  /f exch def
  /F [[0 1 f sub 1][f 0 1][1 0 1 f sub][1 f 0][1 f sub 1 0][0 1 f][0 1 1]] def
  F i get { s mul neg 1 add b mul} forall
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
  end
} def
%
%% convertisseur longueur d'onde ->R,G,B       Manuel Luque
%% lambda max=780 nanometres
%% lambda min=380 nanometres
%% adaptation de :
%% http://www.physics.sfasu.edu/astro/color.html
%% www.efg2.com/lab
%
/Gamma 0.8 def
/calculateRGB {
  lambda 379 le {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 781 ge {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 380 ge {lambda 439 le {
    /R {lambda 440 sub neg 440 380 sub div} def
    /Red R factor mul Gamma exp def
    /G 0 def
    /Green G factor mul Gamma exp def
    /B 1 def
    /Blue B factor mul Gamma exp def} if
  } if
  lambda 440 ge { lambda 489 le {
    /G {lambda 440 sub 490 440 sub div} def
    /Green G factor mul Gamma exp def
    /R 0 def /Red 0 def
    /B 1 def
    /Blue B factor mul Gamma exp def } if
  } if
  lambda 490 ge {lambda 509 le {
    /B {lambda 510 sub neg 510 490 sub div} def
    /Blue B factor mul Gamma exp def
    /R 0 def /Red 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 510 ge {lambda 579 le {
    /R {lambda 510 sub 580 510 sub div } def
    /Red R factor mul Gamma exp def
    /Blue 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 580 ge {lambda 644 le {
    /G {lambda 645 sub neg 645 580 sub div } def
    /Green G factor mul Gamma exp def
    /Blue 0 def
    /R 1 def
    /Red R factor mul Gamma exp def } if
  } if
  lambda 645 ge { lambda 780 le {
    /Red 1 factor mul Gamma exp def
    /Blue 0 def
    /Green 0 def } if
  } if
} def
%
/factor {
  lambda 380 ge {lambda 419 le { 0.3 0.7 lambda 380 sub mul 420 380 sub div add} if } if
  lambda 420 ge {lambda 700 le { 1 } if } if
  lambda 701 ge {lambda 780 le { 0.3 0.7 780 lambda sub mul 780 700 sub div add} if } if
} def
%
/wavelengthToRGB { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
} def %  now the colors are saved in Red Green Blue
%
/wavelengthToGRAY { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
  Red Green Blue RGBtoGRAY
} def %  now the gray color is on the stack
%
/wavelengthToCMYK { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  gsave
  calculateRGB Red Green Blue RGBtoCMYK 
  /Black ED /Yellow ED /Magenta ED /Cyan ED
  grestore
} def %  now the colors are saved in Cyan Magenta Yellow Black
%
/axfill {
    8 dict begin
    /xw exch def /nl exch def
    /C1 exch def /y1 exch def/x1 exch def
    /C0 exch def /y0 exch def/x0 exch def
    <<  /ShadingType 2
        /ColorSpace /DeviceRGB
        /Coords [ x0 y0 x1 y1 ]
        /EmulatorHints [ xw 2 div dup ]
        /Function <<
            /FunctionType 2
            /Domain [0 1]
            /C0 C0
            /C1 C1
            /N      1
        >>
    >> shfill
    end
} bind def
%
%/amplHand {.8} def 
%/dtHand 2 def
/varHand { rand sin amplHand mul add } def
/MovetoByHand { moveto } def 
%/MovetoByHand { /y0 ED /x0 ED x0 y0 moveto } def 
/LinetoByHand { 4 dict begin
  /y1 ED /x1 ED 
  currentpoint /y0 ED /x0 ED
  x0 x1 sub dup mul y0 y1 sub dup mul add sqrt /dEnd ED
  0 dtHand dEnd { dup
    x1 x0 sub mul dEnd div x0 add varHand exch  
    y1 y0 sub mul dEnd div y0 add varHand lineto
  } for
%  /x0 x1 def /y0 y1 def
  end
} def  
%
end
%
% END pstricks-add.pro

%%EndProcSet
%%BeginProcSet: dejavumono_t1-type1.enc 0 0
% THIS FILE WAS AUTOMATICALLY GENERATED -- DO NOT EDIT

%%AutoEnc_ai7sfw4ev2rw3jfdy46mgxdj6f
% Encoding created by otftotfm on Sun Sep 22 17:45:43 2013
% Command line follows encoding
/AutoEnc_ai7sfw4ev2rw3jfdy46mgxdj6f [
%00
  /grave /acute /circumflex /tilde /dieresis /hungarumlaut /ring /caron
  /breve /macron /dotaccent /cedilla /ogonek /quotesinglbase /guilsinglleft /guilsinglright
%10
  /quotedblleft /quotedblright /quotedblbase /guillemotleft /guillemotright /hyphen /emdash /.notdef
  /.notdef /dotlessi /dotlessj /.notdef /fi /fl /.notdef /.notdef
%20
  /uni2423 /exclam /quotedbl /numbersign /dollar /percent /ampersand /quoteright
  /parenleft /parenright /asterisk /plus /comma /hyphen /period /slash
%30
  /zero /one /two /three /four /five /six /seven
  /eight /nine /colon /semicolon /less /equal /greater /question
%40
  /at /A /B /C /D /E /F /G
  /H /I /J /K /L /M /N /O
%50
  /P /Q /R /S /T /U /V /W
  /X /Y /Z /bracketleft /backslash /bracketright /asciicircum /underscore
%60
  /quoteleft /a /b /c /d /e /f /g
  /h /i /j /k /l /m /n /o
%70
  /p /q /r /s /t /u /v /w
  /x /y /z /braceleft /bar /braceright /asciitilde /hyphen
%80
  /Abreve /Aogonek /Cacute /Ccaron /Dcaron /Ecaron /Eogonek /Gbreve
  /Lacute /Lcaron /Lslash /Nacute /Ncaron /Eng /Ohungarumlaut /Racute
%90
  /Rcaron /Sacute /Scaron /Scedilla /Tcaron /Tcommaaccent /Uhungarumlaut /Uring
  /Ydieresis /Zacute /Zcaron /Zdotaccent /IJ /Idotaccent /dcroat /section
%A0
  /abreve /aogonek /cacute /ccaron /dcaron /ecaron /eogonek /gbreve
  /lacute /lcaron /lslash /nacute /ncaron /eng /ohungarumlaut /racute
%B0
  /rcaron /sacute /scaron /scedilla /tcaron /tcommaaccent /uhungarumlaut /uring
  /ydieresis /zacute /zcaron /zdotaccent /ij /exclamdown /questiondown /sterling
%C0
  /Agrave /Aacute /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla
  /Egrave /Eacute /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis
%D0
  /Eth /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /OE
  /Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn /.notdef
%E0
  /agrave /aacute /acircumflex /atilde /adieresis /aring /ae /ccedilla
  /egrave /eacute /ecircumflex /edieresis /igrave /iacute /icircumflex /idieresis
%F0
  /eth /ntilde /ograve /oacute /ocircumflex /otilde /odieresis /oe
  /oslash /ugrave /uacute /ucircumflex /udieresis /yacute /thorn /germandbls
] def
% Command line: 'otftotfm --no-default-ligkern --encoding=fontools_t1 --pl
% --map-file=DejaVuSansMono.map --no-updmap --no-type1
% --coding-scheme=EXTENDED TEX FONT ENCODING - LATIN
% DejaVuSansMono-BoldOblique.ttf DejaVuSansMono-BoldOblique-tlf-t1'

%%EndProcSet
%%BeginProcSet: lbtn_7grukw.enc 0 0
% THIS FILE WAS AUTOMATICALLY GENERATED -- DO NOT EDIT

%%AutoEnc_7grukw4ftfgbx23ssythacmksg
% Encoding created by otftotfm on Mon Nov 26 14:24:44 2012
% Command line follows encoding
/AutoEnc_7grukw4ftfgbx23ssythacmksg [
%00
  /grave /acute /circumflex /tilde /dieresis /hungarumlaut /ring /caron
  /breve /macron /dotaccent /cedilla /ogonek /quotesinglbase /guilsinglleft /guilsinglright
%10
  /quotedblleft /quotedblright /quotedblbase /guillemotleft /guillemotright /endash /emdash /.notdef
  /perthousandzero /dotlessi /uni0237 /f_i /f_f_i /f_f /f_l /f_f_l
%20
  /.notdef /exclam /quotedbl /numbersign /dollar /percent /ampersand /quoteright
  /parenleft /parenright /asterisk /plus /comma /hyphen /period /slash
%30
  /zero /one /two /three /four /five /six /seven
  /eight /nine /colon /semicolon /less /equal /greater /question
%40
  /at /A /B /C /D /E /F /G
  /H /I /J /K /L /M /N /O
%50
  /P /Q /R /S /T /U /V /W
  /X /Y /Z /bracketleft /backslash /bracketright /asciicircum /underscore
%60
  /quoteleft /a /b /c /d /e /f /g
  /h /i /j /k /l /m /n /o
%70
  /p /q /r /s /t /u /v /w
  /x /y /z /braceleft /bar /braceright /asciitilde /hyphen
%80
  /Abreve /Aogonek /Cacute /Ccaron /Dcaron /Ecaron /Eogonek /Gbreve
  /Lacute /Lcaron /Lslash /Nacute /Ncaron /Eng /Ohungarumlaut /Racute
%90
  /Rcaron /Sacute /Scaron /Scedilla /Tcaron /Tcedilla /Uhungarumlaut /Uring
  /Ydieresis /Zacute /Zcaron /Zdotaccent /IJ /Idotaccent /dcroat /section
%A0
  /abreve /aogonek /cacute /ccaron /dcaron /ecaron /eogonek /gbreve
  /lacute /lcaron /lslash /nacute /ncaron /eng /ohungarumlaut /racute
%B0
  /rcaron /sacute /scaron /scedilla /tcaron /tcedilla /uhungarumlaut /uring
  /ydieresis /zacute /zcaron /zdotaccent /ij /exclamdown /questiondown /sterling
%C0
  /Agrave /Aacute /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla
  /Egrave /Eacute /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis
%D0
  /Eth /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /OE
  /Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn /.notdef
%E0
  /agrave /aacute /acircumflex /atilde /adieresis /aring /ae /ccedilla
  /egrave /eacute /ecircumflex /edieresis /igrave /iacute /icircumflex /idieresis
%F0
  /eth /ntilde /ograve /oacute /ocircumflex /otilde /odieresis /oe
  /oslash /ugrave /uacute /ucircumflex /udieresis /yacute /thorn /germandbls
] def
% Command line: 'otftotfm --automatic --encoding=fontools_t1
% --tfm-directory=texmf/fonts/tfm/public/libertine
% --vf-directory=texmf/fonts/vf/public/libertine
% --pl-directory=texmf/fonts/pl/public/libertine
% --vpl-directory=texmf/fonts/vpl/public/libertine
% --type1-directory=texmf/fonts/type1/public/libertine
% --truetype-directory=texmf/fonts/truetype/public/libertine
% --type42-directory=texmf/fonts/type42/public/libertine
% --encoding-directory=texmf/fonts/enc/dvips/public
% --map-file=texmf/fonts/map/dvips/public/LinuxLibertineT.map --no-updmap
% --coding-scheme=EXTENDED TEX FONT ENCODING - LATIN --feature=kern
% --feature=liga --feature=lnum --feature=tnum LinLibertine530_RI.otf
% LinLibertineTI-tlf-t1'

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/@beginspecial{SDict begin/SpecialSave save N gsave
normalscale currentpoint TR @SpecialDefaults count/ocount X/dcount
countdictstack N}N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto
0 vs rlineto hs neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale
ang rotate rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}
ifelse scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale
llx neg lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly
lineto urx ury lineto llx ury lineto closepath clip}if/showpage{}N
/erasepage{}N/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{
count ocount sub{pop}repeat countdictstack dcount sub{end}repeat
grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
%%BeginFont: LinLibertineTI
%!PS-AdobeFont-1.0: LinLibertineTI 5.1.6
9 dict begin
/FontName /LinLibertineTI def
/FontInfo 9 dict dup begin
/version (5.1.6) readonly def
/Notice (Linux Libertine by Philipp H. Poll,
Open Font under Terms of following Free Software Licenses:
GPL \(General Public License\) with font-exception and OFL \(Open Font License\).
Created with FontForge \(http://fontforge.sf.net\)
Sept 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011,2012) readonly def
/FullName (Linux Libertine T Italic) readonly def
/FamilyName (Linux Libertine T) readonly def
/Weight (Book) readonly def
/isFixedPitch false def
/ItalicAngle -12 def
/UnderlinePosition -98 def
/UnderlineThickness 40 def
end readonly def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/StrokeWidth 0 def
/FontBBox {-634 -312 6171 893} readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC4458B82105453377C5BCC86A8871E969
2A5883625ED627224A0AF3682D900B429EF419A526767AFA4B7CDCBA9944E362
4B9085210A29AFE2630A37A9793520AC21119E3F50BC0AF96871E5A8911FB777
68FE40F007C5F6EA075630602DB28D02B22C15F751BC16CF1D47C03C6860460A
BFF1F187F1DF8035A7204090974B9358A50802BCEDC4DE3DECBF30589EC7A57E
A46C81030134C34720ABBE3853A90710E8029CC37AA1E5581ECD6ECC982F6793
AE4E6CB73B1300D5BFEB7BE622681A268080310E288B6BB3902FEF817A055D4E
168D6BC5FE7AA88FE69D1EB23172CFFF4C684E29EBC36C43AD3A3454DC128798
A539AE0F3C7A123D6119EAEC7A8CA0B081B750DD06375DF43D3A498773B7DDF3
20F572DD19A6FC5654A41AB701B7F310C643070A3F0CBCB56D3514B6E6CAA0D8
1E6889B1B3AFE479FBFC2BEFC65E92CC85A45C3D6F079ED06B5BC960DCEFBCB0
0DBCCADF3D6C66DC2282A46268B6D29E2770B8028E69CE699EC81C170E5A656F
85C281BAA67ED9C0F5AF5451C76CFB76B65211FC8015D0CB050A0AB7DC6A5FFE
F5543BDF443A1B236683004AFA91F66909F211381319F2D3C7AAE154952088A1
482CB35BE7D7C77D328666F776E120F8DB7777651002FF048CAABBD695C0ECA7
05B5FAAE9797F1ABBD188D284299C10A6653738263E1742DC3B927B0DB2F0853
5C3E4C383587086CF8EFE52893707C0A44881F7965A3921156198508892A35E0
B6CADE83BD6ED44A31107D919AEE03C0B2DBA3CAA9D268D0DADC0491D3567F7D
2E1D9974BB845DD0A0FD8DF7F007D742E262A1F97F814D7EF76519B0A51E62C8
393BD870DDD80589D569EB3B9FB83C63A66FBB89AE22266137EFD4CB20D287E2
F4A2C69D13196564A88B0BB1EF0774C8030A1B4B41A17C0C12A4AD978E70C70D
4D177B098AF9E7CEAA7B09566F0A6E75C5B2203D7F0913EF7B428B1361A37745
02BD2CF7ACFCE13A8B5925F2A65853BA8CD693DA796A4260E55EDDBDFD345136
4F78C574972637488002E3106030F62ECC7702548C37B7C6A85229023DB40B5D
38C342B480A7C8677D67A8722112BFFAF7CF1B1EE6EF45F817D43D0E875C06E5
4A32178B7A3CBC14FBC92D794F7AA32EA445E702BF763D634A142EFB8F890D30
1E8CE75D233062EC9D79C1AA2C5FE8B7E66F63F91B4ACF66DF02390454EEA4F7
449627B6731ED9CFD381F388C987E7E2A391C48CA876ADB0EAD0382B7EF0D6F1
90ECEE218F54475CAD8EF824CFCFE8869499184CC1C99241EF422AA34CB729AC
9CD10539F4B887A5489F1F5F6F4440A4E6DEB56FE031D5D3A6D69CF2546285F0
CCD68FED95EDD2F43C9F64542D990CF1968B6384A432297C8037C0B7CCB59EB0
40E74FEF43352784AA22FD6A58590CEEF2A6945A4813CF787CC08B83BA990FCA
F4CD1B0C9E4B16B028F1ED33339031189D04EDBF75EFE175E1ECEF145C452B44
95C129EB787CE6FBF1285E3778E688D21DE377096C5BEFFEF5722743E02D6F11
4F19F2EDB34E3943A0130C5710BDEAB05E85F1B0BBB6B84E49576051D5EDF717
0A1EE0B64B745D12F8004B35DAB59844AE56CC0D514F2C751A09AFFBA7E4E024
D6A35144FF0CC1B182631356A6A5157265CA385657F592A9B4A542E951D66124
FC791633A92B882DCA53690EAE705C8E3659632A4D00BD0472097FB42B0CC730
D3539C25ECDEB0FCF259C3C026D76687F096AFB703C77A54B4670E0E2BEE5352
B536F63D5FCDE2B95823B06E84618C01ABF2AF00721CCD364F5607654C188E8D
194420E3F5697D0294C23AF82659949BD19C5627E4FBFE7A839EE93D88CEE92E
F4019F6DBC774EE68320484D309902892E7A30B005108EC43879109C6447810E
DF2DAB34DF71D6798256E434DEE2AF99CF51DC357F7AA75FD666C62CF195403B
60294A72A065980D3F9E01A3F1FE91CD91A979349148892407E3B7CD6277AA97
731F2A1B54FA7F2D91BCA4751BC48CAA934AE3149F9435A44F868F605F0510A5
7FD3017739748B78B395C083A1FA718A773474534B2693531905AA938039836B
F985B795AF427E745930C6695CD14A0C056810C7028817632C2AAF6C752BCAF3
4E419D77ACAF26BC3F2919DEA27AB0209E9CC5C833B985435083351730E7B41C
F52E26103C40BBA3DD01B7C3B917E96596B6520E11FC69BC36EFBD8536F27A80
8BD4849962B1D148F827C8B6C296C03567D4B8D5BE407D8B47DC5D9697744A6A
F134BCF88F4E9244457E957B3152DBC7F8863C0663A13C4EF2B5DA1FFC7B2BD1
152B0590BABD1524451FA0509F4FDD32BFD71E5EB79C36F72F25D10AEA12342D
4568F119A87945984748E2E010146CABEDF66E00D14DAD00249A1D30467B3467
D76D200EC522B993400FDF37672F4A816F9D030A574473BAAF92F35D0D41E5C7
56BF560045E638CCD5F645294A80AC3CCDDF7098FEE8F2884ECDC1AE1736D877
930D23B984E323EC91113826FA261CEFF00B224537541D7BF141137276646A3B
35B876D98E1E37DD77712D774D8660B48B27EF3BC757A82A66C76933C123AB9F
4E08D5FAE581EDD3E8FB0EF2983A1B32820D1FE8D5D13EC7D0ECEAED2950E0F8
2B503A7F72E563A9F11F95BB61D6C13EDA3DBE3F13375BB3E6A95CF2A0BF892F
EF6F6BDB0F92FB844E19CB8EB3495949CD4387EE3A8946D145E41F62924BCB6A
551A1EB5F5261BD6E7F020BD8F85975745BFE725CE779644090A3CD401666E53
2CF5875B77CCA4F61CD7041F4E47D50E02460BBA3B8A292586D366ECDDF699C5
E012D00CC1476FB1ABDD342CCEB62474A876842093A5CD2243D500A59A66D4D7
9D50B8157C429E5817B7E100C14EFF88E8547C4CB37B009D867F3E7F11B2441E
54477202CD1C4ECD77E8BE0681F2A6175621A8F6BEB4B778E8986E2493463B3E
C364BB74982931DABD32A87570DB7468A77CE8DC0268E0DCC152A923B7CD8F50
CA6F6AFD16A71481AD861AF6D29DA4C8E95A3F7F5066D533FD6E200DEEF82465
89168CBC6F6B36AA9D34A295C5AFB70475F98A113A830FF6E2EF51D7C2888A4B
8F413FCDCE7167D50BAB5BB2516FB4FCBABCB660F3D2D3E5BD0D391B02FEC96E
2A3C897F813A6318A2581C4F68E79EDE9138FF6BF414C6A3AE58432F608F4CC1
ABA7272DEC803BE444E019DEFCEAD41998DD1F2DB8B7078488F4F3EA9C84AEFA
ADBC862EB6A9DA323EECDEC5960E133DC838DF05CB23873B2FF2AB0B8B7F463D
DA77F15D6F840C44FFC1C424655C6B93D60AD082CF4DAFA9074E1D09766CD279
C1FAAEF8CFA265E5F137879893B8F97191A2440E84D3608A98857F384E215C4D
CA31C252A5A3BA4652601EB6C420D3B2309684DBA7D0A082EC7FAB11CDE4A10E
E536FC72BEC6BFDFE136E92A2A393A12B1A9A61906D8D9812E0261A7C2BC7E66
AB6AB5B649791356886E3592F03466E072B5034A8F0BF4F3AE0608D93127E879
77D11A3DE314E172DDACE35AD0DDEA99EC2AA101295FD8EFA3D67B4012560B8B
53E1063C3D398CF1751ED89DAC0FA9D09D64EDCAADFCCB92D45C1ECD0E671C30
ABFAF6B5AED7E4362CED5B602E9A9A4B61A31824DF5E24D6046289773A8FFFE0
9056D9554B42B9604908B6080C7303883508BE0262A8D010D8FB4176807E0658
CDA513141F8D2693CA304B79CE3AB68C90DC1D702891442B9C7F4A1A16F8666B
97BF84B63B09F2ACE0AE0CEBDF372FBF6EC6D3B28581D0309361168AAA738FEE
A3EDB1AE0E4F67054169C473B220D8B3B41523B047C2FBC16C55FCD50773C1DE
ABCC4EC8C566493A0E9FB234C98F2347217BA4CA038420C5D9109AFD65F61A29
D3584A465FCA425DEC33E1313ABD0567BA733A487F88988F76FD9D03E888EC8E
A31B9EC8A91B0E7DD722A68D6A21A1B5BB7407B1F57F36987A4F1F57306CAC95
E26F9012E31C711BAA899446E3DC69BE78E71B389451DA41E05A78C46555AB1A
9C6C78959C0B4634EDD6E77B40FE5270A90FBC302CD473B639120B9A2982CD64
8F1629A151CA0652656092166E76785EFBF7A8FDCFEC32D6EF933AFD7C9D411A
7E0E9E57D89BB75ACAE30BE9A84BB1582DAA72CBEBC80E8367A115F3D7E72AB4
3AB5D2E65950FE6F6253EB34289CB6F253CF8950C0F6470AACD9A990962D850E
7F7883214FC778675F99850E4B51C4AE78009E863B37C22C26B23C56DDC8886B
782523CE1685AA79824DD39ECFD77C3A4B63E238F940F1D43E273D48246275A6
D7494F6226CB03CFB74D2A108B09FE99AD54219E12DFCC368B8114FD5A662D07
1F4A212666DAA87B08140D064A235A780A3D972AE4EB612EA98A7C506200AE75
F553C949453738C84B1FD8DBB05105C656CBF3BCFF14E889BCA722C557760046
F1D15FFF0104B2820D489BA69F8FEF7456843E8A71ED3B3C8695550057178353
FE8F13AD2F41EC22336C987A516E6ED927DC4D24A33841E451308CFB4A73B61F
805A106C0818D1A7C1AA189557C85A22BE2AFF0A6405ED0A9F33BD3FBF36C60B
1377DD1D41D384E7724D78CC79759ED8A9D2BCDCE2B1A29176E01508BED511D9
3C7274311EF537E41788C0739F54B912CEA40D6474FA1AB7113EF0FBFAC88DA3
D392D5A41D6A9B16D56783EB04F51BDF19877F96FDA3DB573D1853AE1340C8BB
E91B72E5C515D5D9AD3F6736F00ED340EEB98F75FAA5129AAC7A50381C6FFC87
C9E0671E321044684737D10DABE64AF966ADF3DB9068A8282898D54FF9FD13C6
7C39FE74CCC8D39F9B2E114315BECAE79C934DC8E078E856B6D90E1F3C9A0A2F
6390AFE75F01F2E8ECA96AA67F5D2CD20646F032D625C0E2FF3DA8536E24DFF0
E8DEA30C3CC9C61F202B530BBCB7071150AB2721B4E3B0454987F51704022725
9655426716AD2D55CD3E28CECFBE31026031DBFB3EDD740F507F523F2633C053
FFDA1A4C0157AC2848504FB17A835981407E077817CCA8D840ADC8263C63DC5D
584AEAEA5AD475794B352689FD9C8CA37D7879DE471CE20B629A4B54AE8AE485
F697897359D7B8256578649570D80043A6859E829F7A1AE1E03CA0839C8ACE04
AF57E1FC42BD6751B87B4532BD9E0B7BD0BE8754CC8474FE1E1A8D7BA92EB24E
965AB095ADD787193CD445E36AB7C61EC1E5803DC3C4E1ED7CAAF498AF397B20
5B6E2E3E1C5A4FCB92DFAC55ED9FC726385AA255B5F9D8456695C61FAE318E86
979927A2966F244D791197246328C3249666D511277A3F32D62C0C36329FD117
807193FADE37BCBCF9D97AA0A9152209ABEB550A53F00C93A9B10AB606174253
B804139F3AA88BE060CA31E42BFCFC5E2F04CBF7C107B9C4D3F45BF0967A3E5C
5A4CD94FFF42F575A5C3816BA7970714482F63B3E3DC24209EE5DF9C00A65D8B
755C5E9B1DEEE93D3FC5C474BD62FE3A07F94459CE8E251FF38A6929BBEEDA32
AEAF90039BC84573570C79F0FEA1FDA76E824018FD9A6A4D0EE9BEBA3CE2DD4A
649AAECFAC45B78982EDE6AEE4FC540B70AE2A0471292C4AB04AEB5FAC33FA51
03F428916583B271FB53EDE72A0849AC9ACA5AD1BF65D0EE9C78EACB517EDDB3
4BBDCA2E3BCD7C9FC01631536708FA4EB66F9A75316ADA58A63E2D65E09A9546
EC966D183860841C09FB68C0E63A48004F1065AEFC2E519DFFDF323C68478ED4
323868EA1558D0A9B27B8360FDDFB8A8FF7DEBB454C2D4566ED68110F929C8E0
2BFA5F49E1C23F0B6C1738FAF4A7937DF13C8FA19EA8762E7FDB66AE3506BC70
585DE4FEE232C5D1E95B75A9E983F5DEE85982CED614B31BD96F88D8CB905E8F
83015AA97211860F9E2C89D55E326C5379D365A02EC8A39978E68ECEC8A17EBC
671A239431C7AB848F2660EB8F5EA2A8D2A9B0BE0E50E9BD8E6E7069F9F26752
2C42B99474D36CC8C2B2DB792804EF83D65B24DE2FB3B3868274A42CB2414D31
65F0DBCD99ECE0ECE4B22732A35ABEAAD29BC114FABB7A8747878AD715A7CEA0
493924E17EF74E0B7B1571A6450BEEA9EE2C67CC2DF8F6E2AF78D4C8B2AD68E0
A49416F99B5C7FC2E606D5BB7B48D4BE831EFA2CA4415E72E7EC2736C93B7095
FCB657AC6505BF549E22B029DB69C519FA6A04D7007B0CA57A45E0A5232D09BF
27BAD6D828B7BB1A82F66828FF6437DAD3416FF6DD5A47E786905B36D014DC74
7780FD3E4FCF4B36188A04158CEE9A10E205C53EF2ACC3764137123E9E22D1F0
A6ED9C13840DEFF1CC38815C0505A7577EFEF2B8A11270CA699B925845E05124
10812F1099A3D60BBD93144414DFB70F54A9C1278E3FBCF4643FFC81BA4594EA
E1F422BE7684D2BE028DFD314005B5D23D85ECF12D26D5F49A68F6E14583FEE0
06BBD1F130FE2F41AD91C6F39033189AD9B5E9F55BEEBD8910D23DA6A2F13F50
9170179EDA9519D22DF375A0958E22FB84116FDA21A7277F8709F35ED4CA7F30
A69CA41E87704F033F93BE2F1300133C0AB3B62F56B6F0384E2FA775BB713DCC
7BF0985A83C2A67B9B7ACF7B36F611AEEAC0E2A7DA81A6F1D94CF54C44F1948A
CA554D04B6178F097C5409EEDFCECD2D47E36414787622AF63D3D6A7D1222780
973C668CF3C00C731E037F47B9A6D09282D09A39A8938E0977DA8188DF7D8E30
94C4D414153976C6C127A57B14F4748ADAC0A972D5B7246E1CDAC7F507A33DA1
4F9C63EE697911DF3DE499EC5421A183A8413FCAD3878D5527A8A9E25DFDFAFB
04594D5F2C802D18BBD587BCA5900C385664C1599C79DA1CCC1305E9D9DE7CF0
D12B8BC0E199F6531FCC2A9EEFA042E48FB969EFE10D11EF305A8465B4581D00
8E74BFB9C5F799D684BEE5F2C4688FD8CFAB30C1E17237B8D72C960315B16E8E
26434217AB8EF8BCDB8C2F7706DBB0186A6CB635330CDF1CC0433BEDDD7C7D7A
5C744FE748C93FA63C009B32D4E532BA176D271788738D21D6FD8DA36148F733
5B28849C632B37208A06F0B5025594367389246E71CC07379DB5684FE5030942
3615F8E26C28C29A9A571DAF8B4BF622CD4F50CBB134AF18AFC4CDBE2AD8BB94
446086FE93D6960362AFA908FCC2037CF7911EA78C4CE6A48FCC2E18C95CF27D
C1EA30BBBCDC325315865D1073E6B7C8EF07F5A3E47BBE8EC312768DDD750D62
4F71B13D4FFA05D3D8CAA7EA0717F584F5A361D284CC48F56C20D4B77CF77AD1
5AACB90B2C6E01D43CE307AE5A8D534203F339909B8721806807C4B280EB85F4
67B09C837C252C1E7486E04A86D2A9F714E12ADEC865F14E14DB2DE27C8BD356
00775FF26CC271E12C6719EE4E00576DA30BB94BF0DFD10BDC484CE123E6C888
0CB5BD7AD7C8F6C422BEC958588A7D406CCBAEC4238AA0D5D9A2ECE770360A69
D958A16D141D240A959F59D58589C4A0A0D686D244B14D4689F7CCC9C4270280
D8C45D72F102616EBAEA0C8445E6C0FF9CA58062DEAF622A3E24E43AC32915E2
DD45B63858D38A7F62A3C9E6E90584A16F424CE18375EB248C7E8DF9ACCF1AA5
B6BD55A0F850BA7FBB0E80A8600920D018804D712E93B820ECF4658380D3F464
753D6434A2A9985E8DB1F08A0243100B39A4A9CF565FF9B216151ACF02B0890C
D212138F8D0049FDE1F9A87D1D275972F33932D153F7FBFE92A4F2807BE51C6C
D09D71994EE172309C15E58406E9F016C9CD7700D2371B4DF7F2D24A25623FB0
919A561A8A0FB206B6AFBB97EB505BEB707D168C974B4997CD1925601F4B9A0F
510060E9C3D90C83B298522C38B3A0770AA0ADA9158A2774F9BDD6C2CDF16E6E
31E18066BC3EF96FA6E4452CCEE6FF4916014F0A17F332C36C21FEDF792ED6B4
804CD113FD6C74FBB8BA56078C6F7CD4635845C8DECFA73B07BBE7B7A79CAA43
DEC233C129870AC44F2C8ED7D7FF8037806B935AA94268340A8631111A169EA1
888B93662706D6431C19F3C78187C1C64D400734755341D8D7D040FBB658F270
114296A87278237348F964A1944EC33CE43D1E08D2EE0112C34508EC5498D7DF
703F7AD5B436083522613DF3ECAD277615BE401FE8D8D4B0121A217C26975691
A89719BDC728E96C50C8D2DBB80546153ADAB61516F4A5907C4EA367B409702A
D40C74BDC897916A2FDBCDE2ED328702E4955B100ADD78ED7D3314FB2C2258CA
C739D067BCCC254D85CC4BB8D789833DE56925B7D1DEADD401115DA9ADF226AF
215EFE5A96AA4ACE1893153084B4E1EB773896E11EACD8A3E45F894324BEC910
1CEEDC170A8A3C8414FFE9E5FF1187347ED515997F8557166420D609F932788E
C336408011570C3C28CBD7CCEB5C87E3DF22AE1AF7646E0A58EE73FBCCEA975A
6A3A5D5FFD5B133594EC513CAE54B8FAD9E3F706E26FDC9AC1D86737BDFA1EC3
00D6D45103B21EA5AABF5BA647138A1D70820505B0BB5F32A07E44DF4DCD65AA
79A0483370EFEB8657A87A22D823DBDF2EA2A03654F2008690CBDC3D2621B8F1
84CFF361D61CB52B5A523877ACB9354113DDBAD0D21BA358B1683FBD0E8DAF39
0C7A5378DE013FE008DF3211F74CABD2248C5CF72BFC266395746894AF3F24A9
A714149B780CBFD3AF672D56C56EDCA0696663CCE9936DAE0D21C4B7740652B0
83DD38AD7853289514EC6A3A3F2A5B15B7EE274BD769C28FD9F66E5E11CE2E06
D61ACD6ADF898B35C74EDB468AD928FFA757C9ECC5500F58421A0C36722019C3
2AFE20FD6E9CCE6C24A17D3F6AFA122A09081B2218A078EDF6C2650CC64C9D6A
4BFA4C36107AC5008EB66FCAD6E97BF4AEC7CCD0268F14842D160624E0993231
E7D7C62B91CCC4B5D0A21DD36EBE2D8900684EF3D347876293A1ADE94C58358B
7615AB23EE4AC912B6E181020D70EF36C3E406C33C037B51DC5267C11F8A97E5
5DAEFCD4394E9E2B6649661C1601E4F42510852274E5195EA582B589C3D85D40
DEEFC4EB905B0C0BA6C712224F2B3735A911C97858D01F60422EE7BED32C0A93
BED4A6078F5C6661604092F8BBD3268CFDCE299070D8D981D110DE4CA4049293
9C1AF5BE6C9334A46C864A46918C645C92CB332DEBEBC3BAF1CCD314048A9071
E42395D0D90A1A0932ECB02C53B8E617B3A5446766E5BC2C591869D2DAE81A07
58C0CBABD0A05DABF4E62D731B9CFB2722B485B72080A2360BD53527C39AB096
B64A94E448E1BE9F377BE698514760843BFA7718D94AD2F4C5B17E28D7DE622A
AE00CFE404BC6687B7E22B3F940F27CA25BF265E7E8ECF19A4AC6ED28BE4515D
C35C2A6792FD65DE71598A0BC0B0A1949F3BCE2FA75D2E62BFCEC1866566D6A4
52E1EDDBAD17AF804997B2FDA6BEF30FA100019E611CDD52912F3D1749D719A3
8F17FDD7BCCDD5EAC17A078A4A1F912313533AA5B9C92312E0FC17B2C854E3CC
FE4487F06E443AD193BBED75F4B18D78E430772DF27AAB821FA88556F4C74B17
7196ECF9F1278E20F41A0DA236066C1E75DB82DDD034C8EA725CEEF5F00FC750
C674154E1C64ADCA6939F13B6C2A5C1355A4D76363A9942698E7322EE0D15004
BE5E42DC9C42A73FB953BCB4FDF8F6135AF834A1FEE3C7BB3067710F43E5BF7C
B7E7084ABA99F09008E32E248208A9D13AB2AA9289C24D659D29278448FCF717
5E2633951FBC2E5F5C7CE3B89850B1F555C90A3CC59D22C174442E2F237DDC69
902B17B51AAC0CB697E6B4A71C09943CDE63B1F67E4D89D6CD59D6202519C823
167047F9925506CBB9CEED446ADA2EAA32C47F02B4BBE80F83A266D0935A3FE2
5A9C10D43EF8028385446B815A57F799030AEB90F94523C94C0459012F278715
85C76B0C7A821BE2B6EFA6CD0545DFF1F0C19D3BDB3F75D6450580110EA4771D
546F0BBB742980D5B4301179B83ED766137ACA5D3EA4245F135E6DF67DFE1026
62913FB9819B3642F0DC88309527465B7B3B674FF2420E1F0FB0A3B24B3BC07E
0087418A799AE5E8FEAA8D4B2897A8721A4F945579B4018A310214E9B5611105
BFDAE3F0134626FACE3A2E739DA0E9C7802390BCB75BF41ADE04A99B343BF9D3
A84A8A4BA542E760F0D0CCF3E00781EFE6C2C6913DF9E020790534D14C50BD25
304F8DE9CE6CBDBA5FF88D8139D15B0D0F6B8F6B32CF9BB063A88EAC134F6BA1
03142F7EBCEF2B5445B1A53EF5C2494E24654B5E115722E3B5982BE7280FA21D
59E8456073945B10B7644562F5D53DDE97BBA5AC76842EC705585C9CB8F28820
8BA01EB2D2192FBDE6EB1E0A6D63C5DF344760F6ED7E6FBD75977C7D974D7EBB
4059448F66DE699CAE72345CC800349524FDB6432A4E3240957A1B5DD5D6EF81
6AFA4869D539242C2CC6BFCD35BB667821A435384B8D0CCA2920304F9D1ED849
83411522A98CA805CF2EBE2B351CB55F5C4A71535F7E45B38B7B7C88B2D4B4C3
067243399657F7FD8227DE271B3FA80244CE1848F1A1B1C7EA3D873ED41B8442
BCD5D036274C091856CB96347CFCC6C3D852B7E7C555D281D514294D11232571
BEFAA03D57A9BD44CA1B3C8A786767341D056A4CBACE43314F53B60D0C39306B
D4E9774576FFEE1739B003D2EE7931CB3794B3CCB05625CE02513B4537107F8E
39D130F15FECC354CE0EC0125620BC26151D66893E312892B18CC51005DA50D7
42B3DD3441DC391D2320340D24C147175154CDAE09020A483928FFC1E80CB551
2BFB45CA57228C685E16331B8E4E432013030605F7BED34BF37754475A92B75D
15A68E82937865027A5E6C4F4F7FFE3CFF1BD37985A6241DD366C3956669BABB
F01ECE942567F8B7E59935477CF7122BA061AA1EE7B7211985D09A376A1F7172
3D8E8FA66C847D03ADBB9E15F96A40C1B6E47FC833938AE26C48F97FDA9EFAD5
E02AB2E4A33C00DBE0299E0CA1B9AB89645D0597B02E075DB91903E04F1CDACB
C39622FCDBB945543ED13027D165D2E72D22CCAA63F2D4F915B921AA7072575E
0DEE4CC27DEECD64CDDCBE351F4D749EDA49836FACD0AE095B4121E2F4935924
4D0B3971DB15570988EB6207F64D7DF540A08173D81513DF01252A2942C6C454
C2EC2E3A7E15AFB430AB8928C1428BD35A79B6D617CF7A7C5EA4F46C8D269DF1
5DDDDB891B3FDABEC4707DF71821E6A2AB909F4E902B13AD2157FA49DA47AB3D
F5455B58774F0C95579579DE4347ABB15EC3C23600BC5A557FFBB447647F445D
3FF7B9BBC5928BB2B1DF67AB975F58752AAC531C3CEF406FBFC6D55D32EA5BE8
79AA3FCF6C7E3551EC71ADDD5F0FD5B64617741F3D2B42C9401084DE80DBA991
4D46A335778FC9BB9D8225ED78449A077A0A5C2851F7708E6619770A190BDDCE
8E70898A0530457A840D3F413E1465197F5643D5B46F1DD250F843C5476E3F28
7E4EF7FE992B3B2B1C8753E86C5FC40BB417EC7A556217EAE80B1B3BB45A319C
61569E9EB0D4B5449A1639090DD0F6324AECC2572769788A7B529CF5CB576DAD
8A569A91A5291C83A90D1835C3A7AFC625BAD1C1C0DD063D4BD9DD1A121B91C1
8D39EA0FBC49C6284C3B952CAC3869365C275DCEAE9B929E5B4D681378D38F50
AC6B514AE2153E761995A78A1054AB696B497F17CAB589A88641B4C46D1021CD
015D979E0E011CA35D529DCA962CB191E84563956B01468C96730BFD39F4D617
DF073B54F03E6CC333ED47C5A857524432BA176B4B5DDD2776D6CDD0DBA9DC07
1E11073B216801A385AAA7AE837C96482267A4EAC0BBB5432B32EED6A0425C69
69B8AD415F4B34ABCAFCAC2FCC33FE87144CCCEA3DBB2E5CC46FFC218085FA97
FE6F88548F0420FD56C9E3D03F67B2EFE63589DF542DECD3A23016E5E1564AB1
1EE10C5B0C0F71C4FAD235F5F6DE7E7CCEE7CD999A6FF5D1617D1B6F53DBA131
FFDAD747649A1A64CE01A09DABDA27288924E4F3BEB896DE6EDEB0F46E31A8FB
3C51EA2546A25390A5BECF3FA616F67233CEACC73C50BA9A41D4946BE7CF0890
1A52D59ED9C47204DC6238511CC6275D42C30B02EA2EE452C200DC14FC63F08C
212DE36E78B8C99D13E74F199B404A7C4651F41A33C625E48873CF99981090A0
EACA669BDCD4F0E2AA3438FAC6F9D14A03B0A7FEC9C75DF8F39FB84B824231AD
17FB1AA02D1F9E15C54AC71C6FE5F3B1C7424D0EB13B50361FEC8C077445CDB8
7D72B1286F3EA1D67C96F492A3755FE79334D2D8FA603F670B60B2D051C6CBCC
1EE0BC7E2808058DDFA2AD235FDB8F27314624BB3503677C92FC9CBBBAF3A1B1
32A68C61AA3BE37F722C72A8B3658327026CCE185EAC3463AE4D92CE176989EF
BA7E94CBABF8F1255D92EB5CB906A6A73DE9014882A7FB521C68E56BD8BD72A2
64E73FB67CE7FA22FAD88AAA017F2ECCC26A80223DAE6F2B4E61E5FE43875FAC
BCFEB79E54013B090E062E02A62E9B8115F2BD0997906704E49C95301C012C32
F72494192B0AB8BBDBD7994FDE5B56C5CADFE5B0F23FD2A05C02204EA9DCD9BA
E0A01997F9E932B9F8FD1E74329217A01E4958CE1063DA4CF2D5568EB7FEEF27
4FD6780D1678137BAED6B0EFCD800BDEB7714876BE21725523DED048FE298BF6
34708B5C023802C5B8D78B2A8DEE24B2691970144908964CCE33BB76902C3E31
96A1B01F6F55AEEBE8FFDEC7F7F94A2B6F1658F14DF8CDB554B32D13B7735904
F196627E24179EFCC16F99AA81B81C00CE15EB4853B5FDEE94BC7EDBA91986BD
99DDC92103F42A763449FB91C31FDCF330B0DE76A9161DC1DDD1FF2848809216
E7F0C41AEEDF1DA499853C4E1FC26948B215A24681E92D2E498E8DE02D432F03
71A642EC3163927CABF282C15FB07609E86E93B155D243DC0167B40152AC9B0A
DE240FC8C23A7E43AE8CD0ACCCB0FF7C05C35686AC42833D9D16ECD19D0A6867
3F970D8772C94C5BD62DB3B00F44ADCD7A25AA996680AC3324AD27BB940F9EC3
78ED4FA231BC5E0E60B67FA37C27EE929233DC21688023B4B5B33BE92A0310DD
612A29566E8039EBA8AE1455A1FF4C34ADB130C457F8C6B9E319D1E74EE527B7
58BAE3A3406A5942FD37D1338403D80EC239ACEDFE74534FF0E75720728B13A5
580E10DE65574A9ADBD4676E73BD658142F7D9B88CC93C4A09190A2415F87CAE
126B8877CBD1EF75B73260EBAC382B6E657A807F670D51D7F880BCD84B000812
1E30C95FFB9A33AFD79FA54E55AE1D02B0B455373151885BC7418CE971B3FA02
0BF3E1C1E65DCE4E73ADC58A46CF8EAA03B78164FD1D2BF4B72BB65CDD65FD51
9CB7FC9AE91972F446B1ACCC064A7F55898C83FC34FB511F609C62B933EB55F9
ACFBBDFC734C4FE9AB1BD41BFD7640789A34DF3F1846E41606DD510D2C7D0BE9
DD13953A6940B4EAC496401D1461AF304CD78E8F8BE5FB9338A09E227C6C8E9C
E5EC8934B898DBC73C1A5A5301C59D57A1414B13318B516061535199A8147612
F8FE12D52CB3ABA19E2CFE3279797AD9DBA5D43602141E4CF59FAB97920F532B
14BCCDDCB68CC677B379EA164AAB15807F7127FE9B820605676FBB4FE142B512
7D20CA133567D66FE5A927883DD48AA419750D78DC8FF13A5A6B6E111D7569D5
13AFC802C15AF14F86FF6977955C948F9D4B7EB4E1570F53EEE2BE859A2A637D
07D21ABE6A6BD288B0F56017059ECF4A7FFCB88AF600927CA4D7914A09C01F11
F952B8E78FF4CDC3303057F0A516BF00B251488A9621814FE131604F34AC3036
6F1CEA2C0E4F4B90D323BECB57D409E2827911BC4B224A00DB9F8F9A1FA8B971
AF90FFFB582C269549AD368A60CD66E3A9B91773EE349002E94F19D00ADDE7DE
E99868A3C8C656CEBA5479223FB34F4A59ECC4344E7567F50AC58AC8FDC2447A
8DA606F7BF965755D84718A133690E6269475B5E4B670FA18EAA4D632BB23F86
EAE1B0295DB72601D19069AE4AD9830DB4DC4E62E44BE4AB58EA677EFCCD78B5
736BB8299EEABFDBDFF58D1102C0F55A7EB42F93A3B94BB4737612EB3A6F95E1
5E405C20DFE02C8538C79938E2898E131D8F56206CCD8A9C3D8BB576E97D737A
5F31BDF19D90657C51475FDCA1F2E18B2C0FBEBCD86F2616A16BD905BE8EEBEA
28F62674EECC90EF93E87768C83FCADF3CF0B64E82CD17A1AC060A17B849EB24
169985C8BECB4644AC8A2A53B9ECB870DCD891E3F43C1848605D38C50C49C71D
432A791486C23111340F733F894CA55E0FD41B45F97208792E63AAFFD5BB5BC7
35A8AC6CC6CEB6437AC957EF4565DDFA9136A016CF0C4F488C62ADE6F2342367
F748E68AF9FE2FF8568CD193512632C4CFFB180A4054B02E8C27068549DFDD11
9744D8F0F287E7B822B4EEB7B4E0B4C4C3268E819CDD399D83998B57F854F09D
3BF2C8B414E6731B4BF18A5A9D5113545246CECAF3EE1260CF3AF1721C4BEF86
10E41C4C45405607970652DE12512BB27BF1C820F77C9239B5B04BF7CFC2FFEE
DA471669580C9AE639399FA0AD809EA0E1DECD78EF81ABDD948EFC0D9B245429
3A5DEDB5328B71D341DC7F9AE1ABC694D25DD0B4196DD8A300BB9AD5DD8A0B3F
8ED3771B37EA5A6777B661902F663FD46D6C80A87D45277B62E03769C06DB70A
2626B6321B4053D2A8E127EB160E02EFFDB21824068EE4063D217057104EB020
36FA8CC986D793B0043BE8B3562AD313CC9F48D3DE0EA4B0C35CD8097633836D
649941EAF86B33F38878C260E0EF1E6FE19A87B4DE8A43A531855D4AD650DAEF
6C8394CCC416B349CE7E2F134145472FEF600F8BEA8C04245E590EE0F48597F7
BBB484AE40F9C9E94ABF52DD9AA7E72A6B412F9FBA2D7218262B37A194EDD159
5EAB6B05A74F5E0EA477924D5DB46E0C4E294C7B3FAA216148BBB56367EF01CE
A64BDBD29ECA2271B71AA07AEF7CB6D899CCA45ECECA9C0FE906B8C1024D6F0F
00ECAF6C921F2D5D46BAE105507835239CD8228E724837A7848FD9C1991FA99D
C5E168E96B0EC5AB3DCD4A3D172B4A8AC5DE573D51231C52CE1F54261D72A456
DBD9A6BD6652266DC1A150BB7ACE00FBFC10C32CA84633486A7B6D8D78E7B767
2902F7767E50C446FA377A4C0249E2008F0A98AC16005CC7403A3B154914F6FC
3A9EF8804E5575DAE436A64EB7F7C536C45CC4380DBB9E5CF8DBBD89B5022529
8068B44F16D7BE33FBE5BC96852F3CDD84DA84200884D5F63C4253C698B21A84
81D71578651FFE6A23FC8529F41E6EDF0D7BD4EB204574CE4553A89537F385CE
B537A15E2D19A2ED688710B6F9F83C581CD910AD4D791FA37BAFE98231807317
CD39066C12A74FD1FA8CAA01B352AAC8D92ED37442F43F542A62302F8B19C8F7
EAE857F96650E9F9F061715BCE5B7E76F039C4EAEEFE59D70362931D8195472A
36DE2F8BFD20894C0AF672BAD63D84C9DF997D62692FF7891A04F33DB765E2C3
DBACD2161312799A0A5E0B917121910B323E0DF559F1BD86EBFB8626C2BD7F32
FE0AD75D15E78F084E5928D9EEF1391E8D49A019A246EFDDB2CC324F7FFD3919
0EA61477AB32D5463F7F5F501A97C50EEEE37E7D10B85533BCBDBA1EA2A203E9
E2CDBEA638C8523016DD6362F2C5ED935CE23C401A45712337397279F2A017D7
F6D86BDDF9F66CDC2D623FD3612C7D922C235BA7E7A47DA727CE1D9AE53BE706
607D6079E9977A74924BBF2D2CDF44BE3410DCC5FE84137017B69288443ABFF1
0E75D06D595D192A3B9F6ACCCF21A55CB96FC410A9DEEF21582A64AB454981FD
0F0738928A16E298F179FFC6D76AB3416FB3FC68188128E5DD0DD7342ACC2A25
A85504074B843ECBB7DCB9EA14D0D98748D1CEC437E177B371848A055F06F159
32DC178E20124CFB67B33DE2BF9F6FBBAA87A627F32BBBB4092EC722AD7A80A7
649E1A0BEF55A97594DD5D7858644D1482CB00FC95F9BB776A32DC6E7F77A405
21B52FCE4FEA30EB367961CB69253978C391ADF8081FAEC1822A63099023CE37
6ED9858DE2F34A647B00FC3021A4783BF9DC245DF160A85EC85E61CAC2221C35
A37CB4219EC83690DB3C736FACA7F6BF42B125418C68866DD4C4D1BBD27B060E
DA6C9C27678799F8DE2997DEEBEE1E09D4EB7D80C853761E94BB55BFA09A780C
E75C19C5C293193AEE3A19BA91063421988EA0ACD9896279E7AE6D25E81034C1
70CA7E61C62D289164587DBA6DDA6D6D4EEC20824BD3128075BFA359D398FE96
12687ED7D9A4A59388CB35073DEC6A7BF147D25B03A4435766815C4E2E7E868A
889D78C42E18A136A2A939EE14C3256903B484F4E13A29F907ABDCD4C5E33426
55ABD7A95E34E6136DF3340AB18D3908F114DAA5C395E558AAC41DEF102A8F2E
9AC45852E4DC59938672E207A0C1C64BEEBB8CC784FDFCA631ACE631E93FB4B0
57C95D9892D3F1E689C8C563B8FAADA2E31791291CE6E75258D9AA9A634B5BDA
464449D074FB13143651EC66B5436D54BBD6F1E031298F8F6B866E05081E1581
8E9159F8CDA372FBC15687119216817ECF497FB67251AA00C9010D6719D3F0F2
903EFF783EEF7EE5E366FF190BB900F3C16B800784C2E8EB154634263AC88A53
91E86684176559848592F9E2CF06FBDB79AE4E6168C754C7362806DA4D8E57DD
18233FA8594F6135B56F0A1966F9A788BECBDA3D55D6424C5A0F1AABF81D1959
8621A5482FACFD91D0DE98F52A9C8704661DE752E74561656CD379AA18ACB6B6
796F09EB3A7F9275A5FFB5AA0D8A2908109F3BDBCC415733F62D3FE4A2E04CB9
789CFDBC872D903F0BEE573BDBE70BC43B2AECD759C8C4C6437368F422D978F3
D23484904792FA4A3533A6B0A5A39B0A30DD466D2B619F467BF8357B434AFA1C
98D7CB244F442411E096D44CA34B00B0F3D28B076529599D553774F7AA483EA2
84E78ECEBF850E70A1C76CE2FE16746FA3102EAF95C47985BB6DF74BDA729458
32766395808C0FF961748F25A4D48442F85F9DFBC28DB512DB40EB782F414F07
A4C535BD22357D3EC5D3D76D5AD9812082F4E7AB105F0C7AEC1F04E26D4682DC
C399CDEFC5BE6D8542917A25CE9F249C884EE1DC5F71D8C40C2C70DE1B5400FB
D250569E78C70C5EAA1DBC690021DA12FC7B594D0E99B5689C8754107BFC7632
1E23740B60B6D6B1F7ED83D151533597A12E806D47C7D7305E51D640C743A515
DA30660F5CBB151033B9EBC9448B8931E5733B18E42B054A5B8F93B6C6929BA6
D53ABE95C2391383A88000FFB4D4FBE7931131FBF6A0CD2B0E29E8E94C39C18A
26367C6D1AF49BA2F1D79892A22A483A2A4131B6691EE0F0B1FF208368AACA89
B74F5235A1B9EA0E9538A6DAF6921C5F3881436FF5D728795B6B3A3E97E63BB6
8D91BD5C8C1B3E6C11B23AA960E2E6E76142DFFF1DB2A1745C7D0D12CAF0BE60
326D821BEFA38DFC7E6B453EECB1F931B95F0AEC70B39B8880384B70AD031BDF
03293D6CC05D38F018C5D82EF976D26E2ECBFA9CCEBBD7947B768E4A9745B9CB
8D78359EFBE01EE9D29DFA628BFA706E24C0AF00B88701B58B320496C2EC61CD
2996527AB7830A9E9FC66B4FC5743781195CB8A8BF0FD54102787C0F22DF0D9F
6721C1F8E790E6BCCE840F1F0F037DD90CAC8F76FD3574AAE0696FC136465C5C
6F8407BA7F1091951DF07E02CB2295CF26A6CCEC671BA379C6510F340B8B4D30
DECAD9884BA74662CC14D7055754FA57CAB556A4FC3530511624269F66191D4F
DD21F482927857A7FD5D79C29ADD7544560967020312B1683D429776BB34B66B
4862C7AC76F1F53E63725A3BBBF30AFC5E0AED54074004E25E54455C8CB9F0AB
F6C6E0795C1B0CB2DD8073A447E57217E095534B666BB174AF126F465ABE472E
2278A1B9CBA4C6AC77CD3382EF5BF936C9AC00E94AB817FA67F292A1C165455F
92ABAC8F13A3E3F8CECF07A5913F3C0082048528EF43E886DD01B10C294D4E39
95363D80116C2A21473D0756C31E75CF993498B86C254204E5E0B7CC009C8F3C
C20EFFC0824277CDE7890A421AB1F43F69F69F28428D721F0FB0B315F6881653
6773A595DC8250D03FEA3DAFABFD25487D6E776D671D8A745CA88029B38C4519
22BC2205160A94CACE90801D5FBF011B53CB86D760F999507C42EDD63E4D279D
CF471B02B6CE6134FD98AAFA87BCDF729B56C22E2E5B63F4F1968764FF657D6D
256F683EFBE413436F07AB475302F6D555E6B5FE1945FBDC9DA7C0A85DC22AAD
8339028CD8F7D7A4E37F9B9835F2F01297B9D3571F32519EE201674ADC5BE01F
348A84B85E70F84E5E6E11F28E7C7C5DA041DCB1235D5E99FAF90989AB4C0BC7
FC3F0B78BEB3B6C103F633F3FC8D840B79108DB5AF89DDDB8225F281D32B528E
12CBB1DBCF79BC6B99E8C5835EC42815DE319BCB3E414D1E759DE29E7802EE06
E0CCE578D391CB4943CF96684B82AC000DE54F64EE0C0E07DB2EAD8BEE6BFBE2
55AD67791378CF993A73530B77F5FA31B09CE360CC62F68659A329119D416A0B
120AFAD7B147F6E76F92068106E20C47935D49902A326AD63BF3207E2C3063E6
500BE5FA0703E5E38E9EE0893982180511BA9CAFD3ACCB528B0ED1FD6C79D15D
867E142AD6E6993373753E8DA142F3D6F5144C7D2DD24979B3B9FC92D3FCE9BD
87A1114D5C0A630BFD6A56D2E5BD19E2854EE88EC57710491A203C981F21664C
37CAAF5107842A5CBB51A3A16DEF44EEC3DF360EEB4FD6D51A4B3291F21A3A2E
67752993C0247B96E53FED60C90214BE3FEA56ABAA96B789B761E3215CD1B5C0
4258F1A9ADE2E7E113FCF3982B147D22960A5480871AA514A2E87897ABE6F28E
8E787B68C57A78839E4B9EBF958EF7FEA5F545123238E67E08C4FB450D0B3191
166ED09DDECE384A5F3CADBD6725BEE7E980B2C4374E9797FB774141EA314523
9CC900EBA7EEB6485B66CF66987B2BFE04109E332454A1F3720EE8CDB2433070
4DEC658E69A52A6FDB0DCC92D33221D520397D1ECACD8027F620707885BC7672
54377F7AEBCF09E56387D288B10ED796EB4EA4FED108EC9C500F748346519DDA
F6BEA9D87462EDDE8B7549813A086DDD22C12A50C31564BBE1B4C581A20FBA05
6F04C951019B6C40F2AB652CFEB8FAE1079C8D314319E81FB289534F6EAD91AF
BD42B1553FA2642DFCDE99A053213ED66BFC6A2DC45AA997672C61BBE5B3C8D1
918813A6760C7F4F4E846D20E6C47A9BE1E4A0FB750764D49AECF0C1B9B9D875
5ED030FBC34590C8243F566972AF4A3B49E371582E4BEF5C5BD4DAB49C6D2FB9
E94241A3360ADB84C48018B90B0A9B891C29749149352FFB402463F7D6050CE6
76F06EE0CD9712BE17350F70A046732B115C4E8026D233EB59804D68EA1D1C5D
9D581DB8AAF9FB4F493B2413CF73ED7DBF0814C7DDCEC1B3C155C2B0F8CE7EA4
E7786D750C09528DDF1BC1504D6FEEB582B34A0B8AE2313C8754B85FB929E80F
18F485370A435C5EB7C713DAF5AF9131964219A459583C32359B28940FB02F63
341EDBE3E04A1BF6DDC3EE17F2E7C7EDDF1B82FD19C81CDAD3AB1DD6EDDB2FE4
685B10423165EB84645C12AE9EBEAFD16384AE0C29511501D37606B8B96E0E04
583376E88644E29263F1D44E0332588C5AA6C020D46EBFA71D8A8D98B98BEC88
2C325563BE795EA9E7664FE0D44153C5A340C84FEAF26CDB1F067A37EFB05033
2ACE6E53FF02395709861F72984760256CCBA2C8B08013AA92B106ED36CCBEF8
D09021E4A0527BAA7D68DD573C2E855A0E6047AF629AB8085B3CF57B4D826C79
2D17909C39575F3C31D72BF4ED91193B161D0A359E80D3B07ED07ADA7E79FD3D
DD591B6BB76600FDD7F36FB955F5831522D40754E1E1505BBA2D1762B29CA298
EB0A601A94455B2C7E12DBE00E975F868DF8D245A860D59BF6213A632E310A7D
DD241505A22078A72A2F43816BDAE9E883E7512B31FEF4DDDC1EE3837941C0D9
5BC073F415339A2A90E2DED1B24FFD726EAD0B6645219717B3D088F908291377
3A08A0BB2EF084B3E5824DD9EF586021779CA071ECFCACF595B034B71892C454
F5D7A6DB6D3F0E7585CB98116742535556A06F2F0A10B5E47F0F487587E28F97
6CF20A782776BC9A0B9F28026E18F1F0B049E76D6828EC827E5411D32024E568
936163FD3FAFD44CD16D4D86CC36DFD25696FB3564D06A68B3DDD0D1C3AD82DA
3A68D8BB958DC8888051E02D817D66CA59B156EC4924A0A6190D8FA4F3F8FE66
E2256ED7410A5B3B359FBC14AB3A05E623310B2657FFEBAC121551249FFA80B9
3AD01E7464370E3E0F9D4551FC9A81269F6F71DB056F36E72D232A618B6EF080
87AF9D859BAF4854C5CB185148CA672713568CC5F01ACA463431115887CB390B
E166026BE00204AF7959BF2D966705D80FBF0F994BA7145BBF16462EE5D9BDA5
D89F2EE5FEA72E9B8115F2BD0997906704E49C95350BB79CBD3C4A8E52F4FB10
49C3C94D1FDC31455D1CB36C20AF8C5207E716A84D61330FDA55A002424E7842
EE90C939A91738721F0DF9CE7D435F733D362AD9789127D2D801B10F6E6F0B69
FBCAD18682119E8EEFA0F3171C09E1C5281C859EB777FDA513DFAC61D5CDC9D7
7F5862007305BB91A865A7307CC9959A8BCBFA65C7AF0CC8AF7DC481A2B979C2
90301225439C1CD17E83707ACF00035CC953753548796F2A456AA6732DBA9B97
3CBB826EAE9ABF10D117F9D3E0878EABEF18C1B16FF1652A633744ABFED58E96
F1ED9239FF1541F40CA655FC4393E7A43B53D804F72A41B88EA4E678EB468ADA
F7476015B1031D74C2AE23554F73E2A945D007DA2939ACE0B9EC95CC37AAD2AC
00EDE5DBD8033FCD314A0CB19068AEF9BE96DA47CE4FBB1D9F5B3DE2ACE95AC6
D212D85553FCA34BEA1C14901BA4583C6870EE9E4D5B2FC25CEDEC0DDE35C1C2
D5B7F7EBE4C9A81AC5E08ACB80FE7D9907174BE7ABDE9701D657DD38B6EF1174
C71CA6A2C446C0BD15A8032B61B03413D838E51AE84A1FEE0F6B879C358AC22C
64DC2971E4660CA2E48B37F8BB11D8A16E35D574F3E78266BF5BB7758DA711D4
7FA8AE1A93141DEF3E4520AA121FAE7B4D645623ADB7E298845B51D9D3F07E85
FAC3BE7C552F40FFEAA0895020FEB0FDA5C8617773FFC06311DE701D44481761
D0CB9CA416F859CA887CBD806310E1AAF04B2312A1E602F26E328351B0DACE2E
B50AF4A026673DF495B087FF9E3B2C5B218CA7FACF3DD7F21FE3EDB004ABDC73
66CF3B738CF0CF0E7BC4A61F07136BC91D25D327B276967881804A2606BEBF43
4AEB53596D23D81A8835471A25D61F2E8182855DEC14BBB3E4FD4409F1F894D5
740CF84CA98EA819BCA5BD65B2B85DC4CA7AAF5808B927227E51ECA2EFA211B1
72D6DB5F13D346CE5AFDA10818344013332B6952B84D332B77AECBBC3CE09AE8
F014D90B5CDA8C253A222AF420ADEA6D7229F5F1DC7CFAA7895FE9B3144ECBBA
DDCF4EF71CF5AA3B3CE67AB71E903C18D91C0C7D5AF716A075096A48A3C7C8B8
A8FCDA9B70DA211B441BFA22AD62D56AD09E91547AADEF5F7F2D158DF0EA0020
FDC7A1DC0C0E1E235EEDA6098D413C9D96DB07AE757C96BCCC94C832D4086161
D6DEF2B38D7A1C14F328E7823E72EC6C08CE6305E0BD7EE1C46C92013EE18F98
50AEEB66D566C9DA2F2E034EC0DECEE04A5841B413975C0A87D78CF05CA1604F
AAB36B2653B118594DECC7C54C86D07FB2D894FE3052705015B5AFE7BAEC09CF
1AC5E29F26AF6E6B603C0A7769253B02CA0342CAE6913BF7B3620B1D4B13492B
44C553763FEA5EA0D18DF926B2BC87C83E76967445B1F5730DE62C0387596AB4
45E29AFD732A02B6F4849A7CE08104170A9DBEF2456260FCA8BC87EB7F0C5240
4F6DB975A26DFFFA9A8F43B31E330BE53B025C141C5A0ED14C89A30D75464213
F1D9672BFD84D0F4A2A5DBFB701C33C5C566629271D2A36F1BCA5229132AD306
E39C44E345E5A3EFF85CD6765697D430F8E6AF1241BB37F09E0010533BC14E56
C291413C5019049F7B450B67A984F6CE6F529A894801EBFFCC59CA5FC711281D
4D0C0678D6AA96258E75F389A0A9472E2DEE448DA6C2BFE5B366A68F7BED0AC7
5991BC3A8D7B194D57EAF6F5D949E53D12F791E1D26F058A6045905F7C6E8113
53D344022AB91C8A9ACF4208423CF505C70D0BFE885E825E7A34772BB2012CA7
3221F6C261FB223E55574BC6C5F5C3BC522F5FB2C3CDFE56319DD88FCC4E468E
510AB5524286430D222CF1EACF0056E7F97ADD9AE53236D4DD320B3EDD8FCDF7
AAF74FD5C7007AE01EF43A784A146ADEA4A60CE7C18B426C304EBC594EBD2241
633442ED6AEEDAF47269B930F2E9F89AA80595E0FB9BBBD3EEED56AE70B54FD2
F56C93D6EB5F4013F329CBD6F02CFE5AF7F85118BCA43BBA33E2D2396B25F47B
F25B6428940FB1DFE9A61B1D7A29042C8420A5F34361AE56ADD729ACA7A106F9
77801E3894D5B24CDF5953E611DB5F6B5762438C3416D0DF55115E638C0BE414
BDC05CD76670E3F30CBA503E5ADE4C8F6EE60200CAC41724A19ABB7BCE0A2E06
88353ADE6C40E334CF9BA5D7A878592CF47B0103ED2D42165F6CA7174C427791
66CF7F8B7C5C5CF6758D0668BD40203113961DF39DE1EE4DD1AD937937B0E43B
002B020E5938625AD353D4DA1FCD9013BA2B27423574A65A17AFE3E99CDE4235
3358943E1090F933AB5A44AA0C18D8511C7822AB41B803D45D4E2A9B63D5D06D
B1786BC14BAD4EF0E1433FB5D4DE363457A3B44447B5E731264415AE3DF7BA9F
765D421C9159327C8812D914FEE39E343EB23944236E5512A7EADDFCFB3E6A51
EFD081A1E1A5155DA3B33E71CA3005D123802F7022B38CB7D9AAA0E00E76E1A4
7B9E64BD81799053F2AE45A85C167412BED78AA9195F3DB251C33E1C261ACAE4
E12B03013D7B9BFE305B9AA670AC2CE45CC8125486910161478FAB68C14C7C57
B9D7F9B92860C21F0C4FEA515F6523D0D543F52EA2C8DEC9A46BDE038E272BFD
902FE09EF7AF34103F9E3DC40386FD674529F722CA2605B70FE67769717F22A0
535D4AD71B9B9DE91E5A426AB9B5EA106E3D155CAD5C3053870865F5D27B2341
63E66FD3CD80D3EB32855F2281C7AEA7AC1EE47E98380CA4E480D6326B136D37
227F139DC5BF9BDC21C79479192E91D0D9F64D2A2A079AB166C69358F1D0335F
30D164451227095A4296C1E049001979E21A2503CB2528CB5A31C45A6FA8D641
D195E588693C547BAB4FAB678F1DA4E426F82E0F36283EB997E4B3485DBE46B7
8CDD8C1F27E280953FB8FBB63221EA31356B2371B2EFC81B22BBB924FD30A0AC
208D7366D05A7D8E2BCDF099D94F385CC2987D4F4F13362D7ADDC3D3BC78B854
3957035BB85B74D89B3FFBF6CB06BBAC687DD1FC0623F8517213544E8CA05E5B
D74E54CD1BED852ED04EB2E98D5B0CF8666CB7BCA86A20D142F8A1C80F74F7CA
2B59841BC69BD000000C082671EBC2441DF1AEA4A8B809140DF390A3E41DC064
A3C4B043DBA42B3A705081CC23838F40C757238507B9F26A5E0A1C2C7BAA1BDB
635E337E367BE0F4161618E2AAB51A9609808E57CB966FBA3D38B538D3FA6E74
C524DE4689EFEAAF3045A262C2D2385181E3F22BE45C2D6F1E332728A2F9590F
7B7E946D1C63FCBD0D755500DA508A9FC20B794517640D5611AE1DE7A986830D
1127CA3E5A0A3C6099B6D3B0767C90AEB6705EFC8C1B91A7E4D8F38D8C13BE1B
A091FFE51B859F9B200CEB625A2B9595FE943B79E060141C49225052ECAC8721
5BC3435AA0E0DE20E6C111559EE4868E4505D819A2AA8C84EFDF65B4D74A7E48
70620ED14A3B8923239EEF15B3B978524700C99F3D0B6208CEEF6735CD0181C4
C75D7F9AC3EFD638326DC402C3D7E4016ECACDDEED6DCA14BC0A2183BD9BA444
3C8B942BE4A6DC20877D78FA32A7CF62CD4DD8B065AC68FCB6F289460D57F6FA
2DB81749EE49A0A08633A660729F9E2E1A1F760498C875ED74DA24428FCEC686
70BEBA69CFD455CCAD3677F7176905567F1C8F69A4772B854BA7539DA23F2673
25480A57B64DE22ED7C55245900DD1385C6B588E3E30B341A140660273CF0A87
E0D98775E2ABC63BE751DD385760E97573C1A40E6A47417D718C37C2FAA2268F
7FBB06503166214214DA6B918A381D9CBAD3F6F61DC2268D009B903268006A9C
1818527EB8E0BE0D8C70324795007691ADC33427F9BA50B4529740D5EA78FB55
C05E91AC3A0F6DC1120213DF599D3C625EDA85E8C6C3C42D9C5B255193924BE5
8E0D110160F50AC58AC8FDC2447A8DA606F7BF96531862A2DB1E2B045F0F5011
D46D01E050A074FAB04CC24F11A19CD448FB9DB341259FD4CF9DE493ED0DCEF1
37C83C168230EED2C26EAB1D04F95B4C11422AE12ACF74C364663DA8442A1522
39AEAB2CC5190871F5B3686D878591ABADEAB2550914DCF27C6B93F8FEB7EC58
FADEB73175256749F478B3B87AD374E4B63310DCBE91563855D38CC064630868
5715B1DF6259B085F75849AF4F75E466105A477D109FCCD2B9B532A58983B019
438B1B83BAE915E0F24A7E0AF18066F1A3E1B70B4C3A8497F86532A8E2F40D99
0965D64D8D3E9C4983EE5F4755E0AABE2DC953714F25F37733E85613210BF6EC
0333FB8457C8ACF184707307CD76A60E8F85B83DBA42CD4DF5D19FBDCD9EF620
9123B6E2B005E8B894934F72506B854A6A75B1C69B05E836C5B8637BF988FABF
73F0DD4EB11165B1077535D6CF74E956123D5EEDBE11EBCC7F05B8F4FE841574
B0D9BC00419C8FCB2C3DFA22092411843C2D0ABC624203BC9931F23A4877D62D
ECCF11CC9E2C87D39591A121D164D47C6619BA475606886D3AD63FF448965859
EB85EDB5830C6515C93D445D441DB5AB70C92F1612E2F772E07CD09E659BA1F3
5B2C54A55AA658E6167FFD5603B9AB0EBF5850F27832DD1237C5909285BBE76C
FCA7D87A92FFE43F7ED763D73991B3D28F9052488F8636309B7EF7A1612268B7
4D839CA3CC58E599F5422BAD83C62B6A88BD186515A15D133E43AC24252F9326
416647BD33E5E9710565DE42233EA6AD853268D73F5D3139C57059DC1F13253A
AFD66EA16F925AA79A83A656D0E621A8AF47A2378C2E4D061A1C0BD80AAC1E57
C22DA4E77553F9C0FACAD919143E8D648BF4907880134F6DDA7112AC05ED3350
E4C6C7D6880C6631D06BB78D00A80231C69285CBD7966E070D8BE21B3390B02A
B80069F7DBCCED8901F90F6BC58C4CDC18EE37BDBCAB8F4B5441CC0CFB83A542
EB94A6EAD36F18E4357C1F0EEC2D5711756D913C9EADF38A4537CEA1C949AB11
A9A56437AE5B8506129E9AAEA996FA953DB7070996AF4450C84E009259F0DB23
AAD7B9AD415F4B34ABCAFCAC2FCC33FE871389A900099B77840169AD16BC525B
3593099D0AB15AF6908F243B673EC29ABDFC6727B9444F45A397E15BA61DAB3B
5839C3823697E73438E5BCB6210706817C9ECC49F2C57CDFCCED50804EE5EF95
D202A94198A7930DA96381F593D01036549F1D6B75D752E14D2D9F208AC7B3FA
572F23D804C49181CF86D477479219DCF2D9CF66753B82978F6861F2F9E348A7
CECEB8B6723B2D0748BC05BE37F09E0010533BC14E56C291413C501BFE4A3535
AA673AE15F560DDFF08EA7AC16A3961F557176D4E7BD01D7A3C2072D491C65E7
C9039B733D96F95A7746790D67CC08A5AF319B72F2B1D7EB2A680D55E7E28CCD
6E72041D73FE8F7B9729A539E1925A0D5FBBE0A2F3F1716F05FCA1CD2CE14807
7DAD0245B36F8388CDACA007D40C2313118CDD0FD8CBF14A4AC0AFA17935407E
EF7003932D6E1FDFFD8E22C885D969CD18C61CAC97921E3385123FBD0EAF3788
648BF5BEBC546BEED07029ED4A394AF00AA7304A9A97B0E49CC2F790E8467F79
548DBE174E29CDF1B70B8CB56A98A23F9AEC65A475AF4E7F57109956A04E3D84
289071C32F9B2355F429F88C7CA8FE6A3D8C284F7447ECC0FD7786047ED5A25F
3767DDE167F368E66F83EA261E21E8BE5DC8117878647039F1FDA13CB31E71E9
8C2F07DFE69683CB50B107CCC7C390818F7CEF87BAE17077359249E35A45680B
57500638CAAE75F8F6954E412C3E88E3726A6FFB1955A35FFF59DC31336087F5
1141AF784895A8B51BAB2690898BFE8CFA9ACB176B9DB4AE330BFF9360D93A26
BD00C39D893B51C1A30F351FED70B3DC135B4F6D2DEBDDBFE06E88EF2EB4763D
36C13E3BA6B7D30B269932DC5ABB716BCB10F893048D59E43E39D3DCF2A127FD
C6FDEC48042ADB9EB9A700C1022B64B479968F05C3924C965FB1AB0C31A5C4DC
A63644E536EC77A07AE023757EB2F70E3152B2A2604D4E3018E00DCF68CB8231
EF68C27010067A52E1E24FBDA313179C362994184A6350C2DF2870A368260FD0
B656289C3557FF9051796982172A8081D625F002C84FDCE0C0D9509A901C8898
5061A5137BB4EC002B9159F6EAE77EC7838A4B14A1C9EDED40BAA220D4770E2A
F4D215F32850E95B479F070E8D47E0252DD41FCB1EB7D69FBEE9B214EB7E0911
23B317ADE21599E7945E6D9BBB8EBA6FC48DFCF38DD7D5E6D4C266ACC900CBF1
7E8709DD5230EBB45F9001E9673911110EB25E120A87DC6ED1EE5EFFBD7DBEB5
9AA611233041F49749729848311D10EF425951847483D351924C027EB4402F1F
F1B43CAF43514257E6C46DE3C486E0235B061F7B4B1CBF8F3E49917A6AD51132
D6B6B366063CE605C92751314624D21EB479BE0482EB9912B64A547FDAA0755A
007EA80EBBCCCE92270D872F448BECB99C1073F9856F9D264DB872989C73111E
F395B37DCAAB1E342D7A5B4CCD3A4A6D8A365106ED3FACA43CF5C5A738B3CCE3
9979BE910C946245DEB1F10DD24AB48DDEFE75D496910DD190676D423ABBB9FB
8EB20DB768FFDAC9BB244187656294A1B17E05276DE63FFE99DE4EA4631E02E9
AC1FF2FBDB9C6EF35FCF210876171868C5ED5B3D0FE1046C4CE762415EF2334B
C06848F7FE1DA4AF94255FBF02D7997B7BD8E0D6A70F8604EBD900D61616AEB0
0803488CF2897B8E834FD1A47B8D8FA5EB10E25BA41EE917B465CB0E4BD5039D
E27B469A242561B588989B5AAF2A6314E5AEE5B0DEFA8D0F98E3ACED64071722
A5C2CE7BA89F220A096D9D9B2A6DB4856CCA3DFEF5B0255C27EBF3185C37CBFB
391842067E86DA1619E09C9299244250EE6B697013EBE6D84703B645E2655B03
8F16435A8002254BD7C9C080BBE48DCE0877D8510B01B952451FD438BD8EED6A
3C360A82A30ADE8C4E9ECEBA2EC06F3F0DEA5E6031C38E71530974493AF6DEBC
59D2FAE80B8D207AE531E1BF18499DF8C812F5904FCDFD6EF5ADB1529868F841
95CC47206ADCC378035D381C5841D0B5653373DF412079455596BB13E7F33A2A
DBB5236240484755D276DA96EA25D2E4C752EC153DCD5F246A8039EBA8AE1455
A1FF4C34ADB130C2EA20CB17746D0DE7FC2E0CE36F223FE59A9971D67FD09717
C6DF992584C499D5C2F1E273CC63C58D29AA0A0C38D8C2A0F73A040D2E538D3A
D9C10DF31A371D49C8AE59C5E05727D87CD65A23DD9C8B90D521A76E0007E6E7
54837E57FC5F0F887D0DA522E23CEB0A7ABA6214E0197EDE077B5C052AEA079A
E0D0A0B8159DF6F060A4DDCB10080AE9E35BF68ED0A8F927E8C1BD16B6FFB4B9
5490DE63478731EC88242C1E0A1726A76F65C927DACBAB9737D011CCE9F0EACE
9F97B3326046EC48C5A36A3361D3A25FBAE4BF72598164E317C3E75870AC2F2B
A029D8207CC4D5FBF0AD52936E24B72AF3966DF7A5CA4E088CE8E79A42DED1B4
47602A97D3DEDEBCC145AD5AC2F89B38D7C875E95DF937AA6B05770D168EAF28
C337D45762A088176C178FA7701988E9FFA82E1EF5332C61623667C23D959D72
C245C56283B9A309EB1592F4D8F82A416523B0AA68A25BACE80C8441EADBF065
43A6FEAA3E779D8721C358C41ABFF490F905E330D0124D5D1691D8C1ADEF2B06
BCE3DA1232D3415A4B10EA0724F65F48F4AE7DBB42219D5F588ACDA12597527B
9779106E2163C7FEE76DB2D5F0D2EBB744E0C8998865C10FA7325BF329193741
C1177707A3CF3A8012953C96545749531EAD826BA8FF52086290BC7308306F5B
8FE3C61F836104B4621098DFA5B2252367EFD9F77F0403184DCEBB5254F97C30
7EA1FEE81E07BC47ABD4574456EB2118A7C04EB2B195D4A129E68883E1DE18E3
262F9391A0ED0E7534FED17C1BAAAA0E1738AF88AF3871563EE7B2AEEE22BDC6
0E1E74F651F4A3453C9C81CFE42A75D040C2ED9831080237AAB4AE0F4C4546FB
DF429AF6D7886050E7E0546970F51619D15CCEC637AE16BC8D6EE13778A1272A
F6C06E84EA15626D93EE7169D5E8EEB407D9B4DE29233D6E31ECD51E5B3FA050
E6FDAACE60D5A6009CC1644BCDB9A475FBD91E32155699A9300A69D2BEE293F0
CE6D41CF35F72515E5AF6624FC9AAF420CC295BC7B8DE36E8E9E8B6CEBA8FB76
5C4A0D14788A699A8A8EFFC394F1A1FBC56DBE88DF350A21DB3A067EAF0818C0
9BE1E3E60ACA16A1FDEE455D3F225EF6B72A2F1AC1D53E89AC5882C5E1ADD7A7
97B90B79A821FE6AEAA6EFF6146794E3108B1C28EDFC15762F035EA1707E19B5
2C0287BFECA7303B0D2370860FF0472B95CA1F1B791362950FBB98CA56649B3C
F218BBC6AE5C6337C6B573DF674C2E6F97A069478FF0D54C3856B0CA0433D090
4C18CA52644C038CA5E93FC02025732EA7E5E5737DD19890B0F20CB1BF9E8DFC
4A5593DBA9FE1F9F7A5B4FCDBB284F99ED6EB48408AF0DEAB658543B3403BE4C
0E40CBA9B40684E28C14ED137B983B1A559230EE470B65E2393A3EACD52109B4
D00D9A88C7C42B004AC8211EB28EE87F0E8977870DB126AB5FE53812F1B90324
0EF2A2954F8C57394867ED03CC33E37EEFCCCAEB567661D414687687531E50B8
C6BBE8A2AF29EE6EF3F53D6F94D7EC62C6127EFFAE49684F7158C5E04F1751E4
DD3D4F67EACD4362A0A54675E0045EED0A696236EC2F58041CB44A6BF5692B5F
A291DCD6D06CDD337839CC3851EC33B6D56F5BD022F4EF4B5B2B03F409B76A44
797F75EFC94BEFA09929F7471F492B33878C65BA5FE49AB4C7E86616C80B8355
1583B6A1DC39C40FD37EBAAEA6E468FE6EE883AFA30B03ED18A99CE066A90430
012C3205A1255A9EDBEE23A55FBF610286535C56E24E948DC18136C7E7711B19
305E0A51DD48BC242EF5A9AB42C4F6CB06B5F3C77F94D414AE3D84196A972691
7A19DDC6FBE2E73B3A0286B45B18D71DABD43C48914E034EBA3BA5FD83B37396
4FF6314E7135CF61A8F7C6D2E86B3A5608D50778A51BB140BC0FF754402B8DEF
B8E5B2CA22485B08403EA6BE05DC54B7CFBFF439EF6E9003785CF40A86BC6FC5
280D1E09E89152240A5197F83369EFA5386E4AE04084CF47BAC3B9B3D4B28BAF
A58BE22236E5C8B8A9DDB648730C65F6999FA3227269364CCA1664335F1A45CE
C2174D0E6422111BB81D4C8B507DA52090E83E13D06B5E3612F98C3C20E1DF64
BE41FA04A036272F789F3C6CA9E8EA3708F1B8CAA8F570BFD8D4ACD132C6B293
6524C67CAF164B8DB98C29E25284C7CAAF2968BCD7F72F211D7D5B81311845FB
6A5B0E4F1D5A31B75764567D4B68699442FA83BACA2CC451FC0FED90B4FD11A6
9CAEAD00713884C87C7BF119A77328520E40365C880F24D7686F5595F35E6E7F
AD20D7CFB95F8A697C2821C839A5C4E59D5333B8666889A5B9DA4863D662524B
E6B481A8D66257445F34A2E25131FE2BABD4EB267492DFC16EDF1EBA7F5D54BB
399F7AD87556AC4B2DF514A83A0EEBBF4D835ED072AF971AE2D8A453A3B353B1
E67FA2CF4C383537BE246A9CFB735D4FAF617AF52F328AFCB815622C7681B0CC
3D71B51D4817037ED658A684EA28447EAE12D2F059C2F67BA14B4395CB6BE6EF
D5084780235678B7C9ACDABBEEB17418EE0A73FE51337BB02067876280CF987C
71918DF6E6D2E8D99706ACF610621ED249ABB3F1B59B09FEED89B3D4966FB418
D6F6426B19D755C99B084E42F8E7641E5BC06A2EAFD7AE3311EDE6DC1E630329
46B0FF170E0AF70B20592F90F3ED2F94ED9D6F1DE7D17322C9AE75AB220FE003
DB19F322A36357EE72270993CF9706F7674FC839A896ACF28AE5CE3D7050D345
2EE6BD699856E4445899D73E55BB557C491E30D11813801BFDF4C6073FC02FC6
12033F9A9949B69AC94FE556D0993DAE9900211D9F79E244A59B27FC2FA2B5A9
F0F3542EC620261801F7F0D87BD2BDA26BAD4C8C1E195236B1477AB32758F8BF
91104F8390E0AFB7F8F252EC7052725937CCD4C616D1553E6D9851611B1DACA6
5F5B5226F4590AA858588A1F79CC9DA245A40B1D81F9578FBA89B6C81ABFB5DD
D86C374DB0867D797BBEBD9E058A68097564A2A92EB3D941A87F467881ACBC6C
811D4162000AE8A48264EAA8E26DACFAD9A265F847BE21F110F8F1E34658E3B7
275F869ABF30E7B3E22A771951C9ED46C5685749426E922BB3B389347C0D4F6D
7F63A4A4E2AB5425E292966283D7BEAE56566296B000709F30BC80273745D433
8686E17B61CCDA6E28C9CB18C8BF95F015438E33FD48F1442F138E6EE3E09BAA
FB009598671FD3DB732FF26EE9E775D5CAD5DAB5B802B510A5BA6B4B7A1BE53A
7A47B495F683B89BCF7BAF9833C35FAEAC335FB48EA262E128DDBD098550519B
2CEFAC36AC8CD449BB6245B8572E9CE3876D4F2C3684553C5C46FCE745EE5D95
547C80DF9F213BD7DE8CD18C799992D38EB532FB048376D604F360F305808CEB
9BD6E08B54B42AD72AA79979C8E7C3B88AF70F66BCF08BDF8A180D499810014C
31481600EF33C8710DA8A8C93E199C144E288DC93DAFD3E4C49A9D205678E21B
720133712788F647A6D8AC0CE4D0FC075311D66F8FF40D107D89D34DA4AE88CE
14553B862CBF5A074C6E0CDBFB54EF400467FAFAE29DB8D4E2E829A79D859BAF
4854C5CB185148CA67271E7EA8159D1D515884182FEF970EEB606236964EAA47
E18E2BE09885EC2404518AA49214FA9A407F0F540B9B8BF96725C287440DEEC0
F84AE523A10B01EBA34E1CE1CEF3DAFE3E3B1793A5EF36CE4BA6B7078D6097D5
6D4D261AC39A38778C937980087C60327B042DD0C806645C6D2E9DEFDD229F1E
F1AE7BE4825552418BA6FF077024B33DE798E50F90A95F38D9C2694CC88CCCCA
D7FE46D1B9A165B9C7C841D52370A2F51B663AA36E24486DC641CC63A68DD914
0A46655238E4E9471AFE4AEE72B23A69050F30C0BC06D11504453B65991F86EE
5DCBA28CD7E9439F2AB2D68B4C103BA0A25E1FECDF6F8FDC1C5DB93DB22F41AA
07E6C638637E71EB29B8C697300E3FDCDECBB37F53DA675076CA59708B3E8081
CA24F2B384A56AFA0948DB4232E1B62D8E2841D9E8A5B7B561FBBF4144686394
83F7D978FB6D0DFCEB462DA12B401E7BB145CBBB4C18343FEA2F8D923A4F2863
2B2AF47B546EE19906B39DF0F8E92B83649165A4EC09C5D7FE032CBBF6F62FDA
FDC02E1B478C6CCEA7FFF811A4ED3579B131C907BB5912D6B87165CB8922A3DF
2BD02E5AD59D2A7AF8194D8FD3BFF1D943B4F4C204A0F4AA6106FCC27B204D7A
67C1F6DBA85F73F388DF710F72C9CAE2AD1600AE4049A78A59EF59DFB3F56E92
49A8191F204C57AAC8889E9CC2DECDC4B5D32AA948AE7385C647C04D58988D00
402DF8794B1D739404821B70B3725696CDE1CC45A2A57156568051448274DB08
35A834140FE5A6FD958CF946A4E856FA51CAADCF38BA840957E36A28952635D0
AE7CE0625DBA2B19AB62D75B50E231B64FB685AC44D4CE272A31A235CFCB1F9C
579D894F1EE4F1949ABA3D4E22B1499501A507843DC5CCD6571C9D716C1D356C
8928F114C1FC8D05647561C1D5C7DDBBA871F680B348598A3744487109A330FC
50A1C0934D7EBB4059448F66DE699CAE723452DAAD213B044151D6ECB0EEA251
1C0DDEBDB4F8FC10A3D9F0DB24F1F9D8A1DA540D80796DBD30F447284148153F
80BEBA54C41C56D7C51010844CB1A1776DFA4D65A0A88E134448569782AE69AB
42E8535B3AC49BBBD555B1FB84A24A297990D84901AA672AFFE242A4E487A081
6795DB4389D1E697FCE085E13E848A07FFF1BAB3C0E54C80D2CE71B8B969D8E7
3FD845CC1122610827DAF896629C024784E7A12DB3429AE002F3B71C23A8E5F4
39FA2662EE346F698186DF6558AF6CA5FD1C96FBA2A7E3EF9944D1A7D023C844
A29A54D989D5DC7AA67DEB9FD654EF7E81E3A243783ED844A055B3A6C90A3A72
565C323CA345507B21C34928687732AB7F064CFC9BBD3DAEA9425CEFD2C8E2F1
36646DA7494DAD087639203084CEA25DED422E05924B5DEED53F78B2D9157321
839EB857896FCBD919143E8D648BF4907880134F6DD578FC6574A960ABAC3ABA
8E3E8776392D136B253A89BC74F5CE5BEDB48CBF98917D8F7BF64A5593DBA9FE
1F9F7A5B4FCDBB284EE5B1A7E3829561CCF5A72F78D221A48DF7CAC522D88C90
ECA49597684AAF97BCA6F634910838F15AB5FE4283D5F71089C3F94174AB022B
DCF275C7A5AA9DE3B1D2770A59C7C40D990187F1DEC4D092BA631C1B785C7287
E79EE139C5C9617EC85B0149324F5DEF2454B9673FB763DACE83E44F3CAC5970
BF473B19D51209F745D54EB054F8335F55CC36DA766DABCE631E4C61A315ABCF
7A3AA69A7CB5467CB1E7D98B2C5336772153B097CC1C2251FC11815C1FB3624D
4E2818D244656DB851CBC310C942D166098545A7D7970E1AB75AB51BBE3DB5E8
23F21A3F3018CBE80DE64140DA52B0E304795E74DDF5C1B8402045BCBDFC358D
AD76C3F420FC0AC26BE9614F0744B3DE10BF371D61E30A73EEC8B21F3458DD22
7E611B4DE615F663E992BC02E9D49917F01C5AA02E846C73D519525602861887
06C46134B09B497862032DA07AC3F3F95F9E5332C4F2AFCD71B3C5741C102B67
D10868CF957A2F7BEF0F032B65449484F1EC1BEAD394EB975E2E491B08A81E21
BDA638B481EB66BB00B7EFE75E9FEB28EFF4353DD1820F90239A73F35C1710F5
BFAA12C978F11CF1F3C9E24DBE49E96DB2FB941989420F47C2504459B337869C
F99D01F75B54094DE3C8344EB41717D17D2A4A9E536B01AD555AA03EB130C12D
4DFED870186012B4AED5096AAC60237B15635878BB1D0874081AA800E7B98F96
274540FF546B2218A35BCD82245C0053F5DACEF90CDB39AAA4C254E91D121B58
B3E0D71D17D9C57D98B07D6101E2D5CA98C788CA766DB7E793184B470CA3360A
D99EB41EA7DAE2CAB0755BC232FF70C182723B48C9FB1E0BB148EE2046C3A8CD
D9EB50FAA299A869A2195BB519E6E6FBF728EBA565C2EA94F3E137877D7607C2
78C647B0BA3564C3C5F241E89D32F0BBB1BE3C33C1FE44F00164BCFDB7E1354C
642F210E02A3AE9284B599C63F2C31FA64133BA2AF5597592B3816CD777C55A7
D35FC0533BCF18F1F156C0650D4A0B81934818BE35BDBA408734D5F89361E52F
FE1E8D9E8954D57D58638D06C4F2BE92E356803EA7F27D9AC672C9373CC8A7F9
47B5895E3B48C8084ADBC03E5F6A86C0D8E5730E808893BADF86ECD25B99D52B
FF26DECBFA3045942DB1C919E93FD903AE33CDAB2B6EE046A58665C549DC0975
C310C67C883541B3FA94D3F16196B9285FDC2973F6D9E8DD01B554751254A5E3
A2642831AABFC24CD6FD194571D069C0A7367B63814AA76382F9079F90D1EBB5
A97CFF90F3A9BB4A0372593939005142F61809EF49D7C198B80D5424DC470AE0
0C0DD5AFC45D88054B8980B5270EF96C8E56A8631EF5E2935768B1805AC67D01
099A13691102DBB85BA406934B062B95E02EF9B6EC9675F77925610B870B20DA
0332877D33009B49727FA8952446053FED1555A3A27FB492BD8EF5326433B4A4
4AC83C4DD8BF03C4FF06CBCCFC01943AD7A65BBA3AAFD7E0ED47FC663E374579
03048F80CA8CC9A9A64ED3EB118A6BC86894E6FE4C3581F7F1AECE66C45412CB
ACF296E30EBC12722EACF48779A5FCF9B306E2010364840A93CD5FB68E712EDB
950916AE96BBA480BB4472260A0C808CC907AB3B96E199F7C78ECA9E22092502
FED235F29DF61AA44228318AB1A03EEF38378129AE2F6617174C26E28B27D37D
A5B226884049A626815BF588633A9E4DB638AB93729A8B65CD289C45B50F4D7C
40696774E35E6A9E4FAEEDC245791CC03B89AAF4C334B98587870143064AB627
C2AAC2A3D87EB2987C9634D5865156591B6CF66BA5BE3059A076D567F556BF49
6149C5A7602DF5641E7D0D59A1AB8C2DD0269E0ABB61FFB9EF92BD2EA415AAEB
170FA7E517A1A75B5124C0AF00B88701B58B320496C00FDFF6E15FF7FA6EC52F
00BA36760C9A55D081368E221C3C698512606469EA8FC0DE95A222B68C1E757C
430D07C67621BFCE390F10FCB65FCE65648A2AB8DC7CADC27273EC391D3FAD65
8807C6DD68BDAAC454665F24E61DD2C75F05494B5648961F74E75B5267AF3608
5478675747E475C32121BCFD0E1B13DA22475985610BDF8A0961264187B02C53
00952D0388B938C36D2C86A7BEE83C0E3BAE6FA313F76E5EEA74E4744B501200
A6A00B19EED864F1B745D7F7A7B1ECE9C6780E05A551F448EF7C84CB24E133C9
707A148E3290DDB9615950B45A620477F2C9B69C1020B1077AA89C4C417FF9AF
1D20D12E454124C03D8E8ABD576B6E330297C18ADBBDB5CE6E28DDA3FB22FECB
6894E20FB9EC4F97363B5B6A2CE58CB48EF44CA9EB43412B6951C0F50799E226
E88FBAD27A85825DD9727CC1096E74BC5A4D0DB6EB5FAE6FA51CC4E290C47BFA
EEA5EA11A725C10A8C4A879CB68A2A69F8F20BE3A067DFDDD557102050EDA5F1
73630B86BFB0E4A139547489D17D3FD0DDB982DDE677E7BAE411F7CB16BCBE5A
066B2A023854FE072C120D3B8A3A3B6C6AE0D989037D14E325B7D86A13546DE8
0B35AC82623BEEE7141EF214889A270D62C37119C2C4ABAF549FE2D0EE515416
7E425DA499E17FA0F901184DBC3C2936818F8AFE79D6477269474F88D0B8BBD7
B3FD0EFCA2E7AE77AEBD18239DA90493A6CEAE24771CB2F379D5EEBC7E1273D0
CC005681116873B9AE578A26918A0DC8FB6F3BDD72EAE920708EE64D64CC0B3C
926798326F8576837B4ED87CB1B318DB600D061DA9CE78B6DD3CEC6E1E912073
699D3AA808B9349DB67D0AA429C6D309D1935D4B12270221C5903F8D761990A6
43FA3A2F0E019E03AB3AE26CCC80AC7FB25ACA882FF1A03BE0B3ABB83B8AAEC5
4118ABC3AE6BF13A9650ACE8CA49A148FA2BE6ADBD2A6CAA32C910EF599E7195
F5FDA22B26FB2E3A4ED735D97A23E39A5A22133D883C45E83015E76D4DD53CAF
39ED63CF34CE2AF5E5DA0E35D843F43E4FD0106D44FEBCC79A2758F6234C9EFE
1B8E42A7261FABD320AD6A23E40E88E1EDB27CEFC507626F0B4DF1B7052F21CA
3AC791B3E711F632DCA511240C9ED05E3D56833CE0E5AB8C547C662B898F6536
AE3DB58291F7CA19E63BAB119D174083F06042F702181FC39871EC8653EFB4B9
C8B9A0EF1644DC354F9E38FBE1ABAD591050BF6E2E01066F0497C152DD96476C
106396B7B9CFDB7E2F29F1158FC31A1BE604C5ED0E979589DE9F8551F5275075
35FDD21AFBBADBF8B7071295246E701E49C1BA2C0CE4C16261D62BF54A986D47
58B45AA7518C66DC86B4DF6D611220003D8945BBE259BE4B02E0598B3AB259EE
E0DA49294123EEEB0C930A43CF37F45591DFC3BF895754A2C4CB43DA2F3BD386
8D6373B736D4CD375F7AADEF5F7F2D158DF0EA0020FDC7A51950635C8C6695D7
AC16289F437D479FC45215A45668F974E0D944768461998B930B8273C95C4F43
0F38CEF6AFEC51FEDAAD95397881EE3751D44EA7F93B8F99EC6499968C61F143
1104218A7ABCA6F167D93DEDC8AA92340FC5966F58ACC5EB54A166A09EFF0841
4EE0911192305A26E1B29FC95F9A1C82E3E930BEFF434C1843C232E10BED5053
1760A1463EC3CF8F4B0C638B439B3A711C2DC1500DE37FBE4FD99F99D27C7C2A
AAB9D14B8020B98910441699B06E19529DD992A3B970D453BE4BA1FFB27769AA
488270D2B85AC4387AFE7312DEB6A7DE47A7CD83B5BD48E829C86FDE1AE59F5A
0A24041320173A9167D6D1537C1063AF30F93DB4761E1B32AD951419AD1627B4
FD8122998477544DD042914BE14C6503F5F39D43D1BB9045C1335FAEB9219C00
6F378B712A5BE446EE09C5603E0506DFA91E59D21FC5F4D5016AAF1D10AD1BDC
0A2A56FE5C04EC8BFF9D029A5729B8664FB2DF75B125F5537650893FD921D33A
A5BB37244A0711D078CBBB3A82EA8409E9FA1ED565A9C87565CFBFE7B34C33EB
313E70D9C676ECECBCD645F92207F8517C68A5AFCE8761D9F1A5894A2A2BC18F
4F56CDE3255CA12ADAD8B295EE94A5EEDAC954C033A1BBEAC0D286103FB16991
4C2A19E7E23A301E19C025E1A22CCAE148A4A8C4DEEF5458FD3C4FA486433D13
2CDCED39A2CDA2167CD3A56B5A2FA277CC93635C3F77FA97E837F763D0E07C68
A90B3E5ED8378510A3404399954E790DA67887AC54C11A5045A340AC87C58E35
04D16DBC674CF8A1DFF2ED497FDDD21F38A47990213258C6F5B6E29EBDEED194
AE1B1CA54943AA2C3AE3E48B0ECF766906A395BFEA35CD5A7576A3DC703F205A
FDF36D368AB252A90256D81DD963BE360FD12A4992D71AC64289A8755A2F15DF
01B65DA1B6CB8CFFDCE0332FFC2A137FC9C07FC5211ACCDB26AF068DF6632DDE
CD3D907D6128173743AAE7AAB8B97331E974B8DD75016379E99D5D82CBA55E01
B0E98D836493698C07553DC37E35B0170D3A5676381FF8E1C160FFC2FEEB2430
255451FAB18E8D3D50BA4D859744BB94F3C19D852135C14D6605D8BDB4DD2CC7
828C9F1BDBD530F71D944DEFD0C7F2FDA496BA2DD9ACE4B2761ADCABCECC56BE
576E58771FAB2AB78E892ED60C5B259D400B4B565947C0A88BCDC5C91F7B53AB
34D3DB8B538697152863E9580A8B3C2C8948D3C8B1E6588DF8798BB5CC4FD77D
7C4A1A158226AF3FBCB81802EF079DC174D9C93A2CD63CA29E638C11C2A5DF4D
58BEE5D6EB7BD75FD336E5B30DA7F8AC4AF87C126C46A8C8568FE34B94447EA9
21F08E0B851B8B30AD1E575C6ADE5FA46BD7F2475466759C0D690C59A7647D79
F8509C5DC1916F65FBFAB1531E74AAB7B6FA9ADA4A6CB9C70FC5D64FDD900BD8
C39AC821B1B553C6F6BF7843EECE9B0D610D6DF54ED07F5F983DBED013C722B2
33136F9989303481B529E3E5D2616067638660F3302931A00761D113BDCC5827
CA0399555BF6302E6ED4607F194FDB470EC9334EBA6E32ADDA5B59688F7503B1
CECE596A34D5F9AD0026521621F41AA3D7E7FF546E2856ABE8314A3BC2B94C48
170E0D91C3AFEB1B7BC35CF4152C2972E2689525BD879F6DB1FF774B34ED26BD
A0FF0BB4A1CDF1DD1BC639796AC96A0A0B1E2840248DE2719511F6235D519DBA
473C731F10DC6F8BC76EF77C6E7407D079728CC231836FAD378F7242F1A6635C
C621DDFB5D7AB1755CEFBCB423E67B18643BBED08E420EC5B936024F9A8A8A50
9C2B7DD09930B72CFABB64E7CC0E29D0433D1F9AECD8AFEFEF49637B82238E74
27955F4BC521D089B71537DCE678C8745A6B72A8E34FEF7DE05B2DA3819414FC
65F45844AAC2707161B04445E9B04A8B194C91D92AE743B4607BC14EDA3F0357
16DB2A35A3FEA7C98B379F161DCA2425366AA709F6B7F0CE4770C4F1B687A20A
0BC8D6A3713748DB19C5BFE3F72187D83B605BB6DD9749135E01B3B32F989B0D
34FC3DADB6FDEBD8CF729722FF1C2BE742D0B481EC493BB77FE70EB07AB439DA
BBF81F0F47330560107F53EB37A18819338798E5B95E417BC586BABE598BB41D
FD4432A7E28A5B1C4242B5B5E393236DD65FD2B57226A37E3886E7FDEED53ADA
DF4D1BFA234A0323F609E2E249D328BA0C1823D522B88F243CD48E934085E655
FE177168F15D61023390ACACDF7E603304077B139B5F1BABB6D328C386E13F0E
EC37407D44468B5D7B24DEE4411FDA5A2550115BD56D063AD449278786085262
A56A454FF7AC7CFE4BF7CAB4B657C55F0F3FDF27F12583DEDFC03B251D882F7D
2BC08B4371E958A61F72B1D04367A1F2AC894523EFDFEFBC6A6A9FFAEBB5C4DC
13B1510401988A5D6AAE598FBE55B74895C88B75EE337FB7354277F8AA38C6D6
89E79E2A618E3F16ECD6B3FE13B500EC8577A7E164B1EFE9CF77BDD044FA0B30
4782B89AA09C36A90A7F807FDD95300A9FE449FCCBB8FCA8042756FBD96404F9
61748F25A4D48442F85F9DFBC28F2F7B7FEEBE0C41A7F8DB7379101AC49658B5
092217005A2CEE9627DD4DCA3BB78B7DC14A400D4707EC8D03B6C0594E348CD0
0372D5F6E74F81DDE8FB4CC593A12CA41F02EEE710E402CB7BED17BC0BA2BDC1
66C1486113854688B28BCABAA3AD0D7F6727000F9C62338F7EB889AE34B4979B
F5E2BA0169B709385B88D9E66B37A152FD52A4DA36344A48150C87BDDD01EE9A
44E00B3C8CE8E62A59C4AA33409D7E01CD36A9F19BC54EE197A6D96505DBB304
B08DE0769A65A030C95E448DB1A50D10DF396A77C3ECB3841522819B3E09FD2B
7779FCA72E244E3B81BA157587E77B0D275BC02630C6B4D35C12975092EB48DB
5E114FD9F910E874FDCA6372FF0FFA221A10977BBF4ABBEE79E19BFFF1AA7498
F4B58AF0C4594CB8C59DB05CDC0966632247B9BC6AAAE1DD23DF6B9D30ECB1B9
CD4E54D2785EC8101DD99E03F538083B9CB05A72DCF2E8596F27B95CAE0DD740
199C6F9B3F29091F071B532146CC5D837B6A2D09BBB20561A56382F9079F90D1
EBB5A97CFF90F3A9B9D6EB7CADED16D9C451DC4141BCA87F42341203A29A501D
49D96703A6E6866A64E553D45C1492709D640B155D287D01AC3031E1E7ADAE3D
63F2C9D0DBED7EA618CE223F4CBCDD0069429FE437DA62F7E7BB4805034C8869
677772281615EDF85F1F1BC47F9392DDB84786A55D417A615570DF10BA1155E4
A76D16591A345DC7270E49F4BB5BDFC7063F24F365EDBEE786A4279E749476B5
0500BA3FA3ED367DDDAC1AEB18B54BFC21D3BA3CDDD85018920ED5956BC07AC9
6F47DFBEC05C89F389183F2CBCD7E54A7D504D8D212C88C80D8D93B7BA06547A
BC5E244C82CE8EC422308206E8311C43372A2E66CA47B2087EC8D33719E67F93
D0F5A4D321F26C7B9F5424B4D63E053DF21B6DCFE6A517A4AA3F87347ED5151C
200C4A956DF880564494F935F6ACE8A844D683580300CC2654A56D65A8C49163
4D70CDB4C3A70E3E69D117EC67C1359AD16FD26E69069F73BAD96B899AB2DCB8
8C1AD9CD659EBA2CF1ABA5A5C7792D8C48E26B029D1164B08B871F24421D1582
EA233DDDCF4938AAD7C6DDCC40BE6AF19C0DF7021FAF12CBB05AC4C43E1B9E91
8E2730C5584219A3C10757A05DCA0F6B1978FDC55115DCC6A83D0566EEC8E906
B8F9E2F0E16AF779DB599005B3BFA8DBC7EA37F495833AE0B8065557A4F9B7A3
F7AC3ECFB06D349AD934295DDA30745BEB33AFCCEA52A593DDBBA89A6045A971
59C34BDFDECE3F75D7B6653DA44C4875F78B87C3ECA495FB7E96A9C11B76C971
58A7C90389EDF2DAD31FEC083AC19C7F2CFD2FF2ECFAD3A424A37DD09153D5C0
A73B921821671845447BC37C978F8BB4F5DCFA902BC1F61B40C58A32CDF48AA3
F8B414B9135D54052436A36BBEFE2BEFDDF91B4766FB91947CC743CD66342BC1
C44B0F34F73786F74D14766B6AFBCF3CFC27FBE360E94A50FD447DED77E90219
5DB14EEE9400A10B7DD324AEA0F9521E5171333366B76F79E6EA75615C1BC2FB
BA51638B64DE39F065BD62BB336083F6CE1C1B554BC721F24ABD7D991EA72196
4E9EBEFCA6F34D79C333C7464DF5CE400B5E3DAF9CE29F5C56207133F0B59319
F49BF064CE6E27E4EA6B4AF1897CE1DAB70585F95A552C4318EF0BFB01B0A771
8822D13097C4647D52835812AD051FE81BDD9A0E89BE014B62759399EAEF8B4B
B1CBB26A550612B0C7204F5999679E6B4B810591C847D483AF57304FD5004A51
F230ABC1DCD0BFC15BD848A87199AF4A8C9C769A3477E629422E910C25DC1E84
820428A9D307CF356EDF826021AD842764CF60D44B611750C6D43D43344D087E
E0DF24F3777DED4066EADD277FC23AA485078E781E3817431ED0A0ECC2707BEB
48FB733710913291B1B0504932D227E75213E3B0247CD2ADD2D12A509A89B92F
C1DBDCD8EAC8F3C72C67A622043D886CC97318FD3A578AC5E3E5BD52FE084766
89354B337A6CFE211D8D3E6B9C4E26F6D5E6287D4C0BFCD17A869E70CB692F0A
5A98E44C6786BDC7AC6A13D24C05244C5943A572AA50B35A061F290E522C15C1
A91BD7F8117581D1D279868906C02981DDD547ABD9B1611A44C7C56BF3B19308
C7344EC8AF79BF283D77F502CBEEB908BCF1D8FD899BB2C86D84F272CA3E85CD
4C89443A083B4EC4D39803CD3FF4396E823E40A4D153C58F0D622E9C8A3B8151
45D32D52B41FE5D0304268867000F453C95F176CF011150BE28F17D57CEF409C
46D5C448DCC04138A3D94191792FEEAAA1DE13686CF288BFC5053D7834AF91E0
1B0F31FD947CA1BBA1AFDEE0E59B2CF76FEB3301D55CB0F56DF750F8D1FF8879
D537D25FB79FD0668AFDA01F80A9583171E1A19E0FEA3B99F4104F6D9B2FFDAF
477682E404199EDC1EA691221EFFD41CFF622F57F0BA79FEF8377A04BA997F03
8E28E03D1400D6977528C06E964A236E7230F9B57573FFC54DC3D4AB7C410359
345B0826F0D01BEE148F1580BC0DFE56DEF07120FE2692DBBA76C83D678D597B
2B234165D7E7B1F92809B287FD559DE76210B93F60C98E398BFDD226D6CCC752
0FD814AE679368901CD3356613794A1D78A2ED8FA6043E519AD63D0ED901F6CA
DFE62C391F52BBEBC870F8177B6D0DC44A5013815FF2EC95926E01FF028CE2A6
A899C25408BED02EB7D6B01CB47BCDCD8166420EA85E80F313D378F601E46A79
ADAB947E1D2044164C516A24BAD59710AF2F9E2098B1197644DA36BF7F2DB559
C222FBF9C92D476823B0AB785A2DB297365B2C9B201C49B7573B99835EBFBF62
75B5157F95828B17EE78F85FDA382F2BBC9ADCD43D91FF298B4800F21C7AECB2
517A1046AB3C74434F603DDB68D3659750954BB2C2F1471FB3A216EE5DFB6E5D
17A1F543673A0E4190244B84241A7F52498B05F492088BEB438CBC036A498E3A
FEB8276F2C652C4F60712CACF92B266F6B1C389EF06583FF440BC68D1813852C
5D5FA5E86A17A41D45807B37E67F6CE71E26D1B502B12AC9CE63D0D1B0EBCC5C
64987D7C90287744C14EDA3F01E54968E05C186D1C28D16084556C0476BCFAEC
8B3A7588589DB1E9C8ACDB9F3D8ED49F662357CFC6CF05C98CB5D90C9B0E863A
ED165B94E7C46F4B4C4022192238654422D7C8861308588A3EC9DC9EF6F1E1AD
8276E4A5A5224244050C7950519BE0A33F60A81187599C28101C3B00847CC1B6
54146AFBC5585C31DA3DC9A25AA2C60387F0C3C2103D5CE3A6CF8AE72129DB99
3AA9BDF35B7B0F86FCBDF5B3F16A127D7D12730C8E5B7CACD356944BBF51C1E2
D10B349AD1BC91CA673ECDCB795A4E3B234B9A320BBDAAA1B7D5BD036A9BF785
7E7F55762C79A17C04A8FA81406F2653510E4645616B127CFE63F08C212DE36E
78B8C99D13E74F199C72604F8CBBC0CA2ABFAFCD8872A93CDA89D640C2D24DF2
716FF77F30AD5A2B83CF7E2C5D9B7FF27F1CC2B577766770EE23C52AA383F534
8740367868948819AE7B5162A3C0F4935F0FC7F848AE1990C3525E998C840313
AC94665C2DBA736A67F0E058A4B82E8421467F83215FE2155A44827022B8CF1F
69EF2AEF19277AE68B00AD7FA9FA045C41D5986EB0A40B5CDCE79841F97C6899
E866C57E64287B2BE4DE02AD2BD6AD8E06838A8BD3BAD06B36932CDE7F6CADA2
87159CF7C8E5D8603795121827DFE310C2FC07397C5D3642434634EF8C82D88E
9505B06CDB5E597C4C4388FC52AF9EB2A58BDCDEE56DFBA82A20F1260452FD60
44AED522DC6AF114C57699C1E1A68667C4C42DDC9F724F01115A484A61287C0C
F240C743110373DFDB45F5C3A7904B25E8E11812319E894B54BCB2C5E0727310
3CC038A63C04DC4763D04D61E78146F2812A8530AC871BE159C28E408A906286
B2E305FA4168089D21CE11B7812E89A91A198781D625F002C84FDCE0C0D9509A
901A2C7131DB89C4892DD310965D3F3A00A3687773AACF4BA1D64BBDD3CC93C3
4CDBA6BB2FB7913157EEC61AD90F14C51209B9264E3890AC21298369C8C8E6BA
568DCB81B36BFB0B0C5089D471AC0FE923F13FA1AEDC4C6C0364BB528D61DE0E
24137DD680D48B3153BC4FDD03A0682072293FAE48449785BA660D49172E098A
7A36322BB90A149DF5D44B5087CFC3379E39B0221CD06546071A6D85EBCA5F44
252B5C8AF24CD934204F7E609092B06884E084BDDE7D2A7A20BE33ACAEDD23EB
483D68DE5DECF910B5586D867ACC2D4D503E70F9F3355F74426BE4152C87CB33
7993CCC0FA8B58D6237E52C4A35FF26A41352B6905FD22421C03761D9DAEC0F6
EA92658B5C3580B6EFB196DBE2AB542D74F962485594726DBE4904FA0B90AD71
DB8ADB5BFA5753F94E438171035A6DBCE0DDB5AF232BDF6702D96A8748F611C9
53911DE2697232732A8DD643900B9DE5B6FD103D2DE1F3B344CF5AD68362B0B0
501E9F7A0E0BA139DA888252FBFAAA1DF953DD49B5574D933326D9CA6B273CFC
EE385C1811F984E4B591F2B8775F3B6EDFC127F45889DB46374D70F5DD66C144
4BC58C030BD082ECFAC41C5F49244C628778521CC1CDC752C1A8E924544299C1
8A0A61F5A8D35A47AE0F453862CA30E1349DE4BDFB87C3F60A8F140CB009A24A
80270037C9B5E51659E3016887577A6E2C553DB4457D94ADE425A2887627B6E1
9D3F215C8D81410F813119C3FAF83BBB84A570B49B9557DAB65DD690FB21D0F7
CB4324D3B14BEF489478642E3F3B8CEE33240B0BEF433D3158B83C0D6B8E07B7
117E189C36541D3BF17671FD43C1F0966D4A7F53E4126D1B1E7F298A6CACB8E2
EBBE31163BABE93A0D4C2480C19A4FEA949E6D09C83B0877BEB8FD904092A8B6
845AA15A81595D049207834EF85A304D5E1CC79A2C668EC0F27113741B919C28
F206166793C6AD453D006CF3E86A4012DEF3751FCE92730C067CA9BC2708F019
E5FE7D9A789F426CFE6FC0029333F29AF1F1566CED741989A69743A0569753D2
395A6CF420BC66921A3D4C5999D28CC6EDFD98057DD995F7A888BDE42DFCEE4B
184E4148C46F02C3F231DD16BD673D3A714DEA4F93E8614966D0AB0926E71415
1D4C394EAC35534343E3827B5B8C07344B23A1D8B0D625F520920702B39B43B9
1F2EBC420085FC2F530A83DEAFB7220B0FFC4B49D1A83F4B69CBD26B5A0FD680
DDA6029A655D49BBFCF53A299D9ECD0995541EF5D814DEBDB7059DCD1723296F
5544899E9BC2476EB3C58143D09A5C5B71DB79F22BBC9042036FDC1D0AE4153E
4CDF61A014B2A4EE6C704FD9796E36DF0B83DBA7B83146B2914CA75B6A0B2309
92903D18E152E9C5DAB2CE7AF67FD9F4BAE2F8DD1E5AE2ED210139779DAAF3AD
732BF54E2FEF669D0FC89585BAD6B23814F84E65B4CDE922B97FE2599781A02B
1F4DE65FE025EDCCB2DE1E59874E2F702F00CAA693F19F2209C1EA2CA3A9E0B0
E72B2C3B40EADF66F21022BDD675C0E67D55C4FBBA8C76364CF03BB5640E0589
1B5629AC0D451E098D1FB67D7CEC72BCBD46C4D0B2E4927460E877242A04F615
6DBB2C0A46E4211725382A28319378A1DE678A30A5AC9B7E7C18D5BBFEA8CA83
75A8D6BD7C3D27B0BAF57CC3FC0291C6B85DE5C97216F7F0C066EB0DBC25C1A5
C451BB69C757266D6CE7BCD92563CBCA6C2C6B50905C922AC88AFBF544F4CBE0
538F8236C60C596F6C2B6A44ED33AF193BCBF6CE905D3357AC4BE04C75A0A2D7
008CF5893C2CD7C3BA90B74ABACB5C3AC0F12C172A3448ACBEA2C2BAF04A0C96
5E4BAE14A023B8FD3A9F79F4D9BA458A0FEA1725EA475C8B063396975CB0B049
3E6294A9E04CFAEE582D0048908980BB7419C397B0B4F60EB724631BA9AE1571
75B9240A6E17F35C4C995C4218F156B80B091A806C68007CD2B7DE92447C4E78
5D2E6C329E2CD4347DFBB8BBD0C4BF0DE6963F366A5E5B34E90552DF6EE257B0
43ABD26007C8AF42FA63D25DDFFB54650A80EF4631B548E54EA57F452E3896BC
A6B3545E852D7621680EC064191CD6CA8C29A27B8DB4C952DE4BCFF831B9ECB2
0C9E9896C76644E8E34A5F4204CD43E67668DB02447082FA4AAB031E11073B21
6801A385AAA7AE837C964F8A6DEF37786849F462A75961C9675B8A95BA75BB00
BB99B6485C4D0BEE82C0F00CBBB08605D6BF3DA775CEFE54A8A2B491FD849171
28199434CA7FD82BA64E2BE257C3B6D1E211C9E00647A0E535837120ACF377B8
40B2BE0DAAA260A664364A3862CA30E1349DE4BDFB87C3F0549CE6CB44D9646C
E9B0DB2FF3B1DC5BED52FE5B11C374D8A030EA614F2B3F382C3E3F6327734722
5F6F0EDCBDACB2844CD279716EBAEDBAB6D334ECD79A47DB76AD12743DCDF04F
BC11A39D28E56B3360EFF66493A56A4D7CC67AEF9CCAC6C68188309ED187FB6A
B6B99A48A60619B6C98B91EA4D6BC2F863BB5A3059176923E2B7A5F1695D68BF
79F918E62247D94E5A23D19692083B58D8FA956F4B75F6AF48320B4E7DB8E23B
9239EBF092F358DFDD1A02EDC7DDA616E5A6C2CFFDE0CC8C2F3ACB020CB7D10F
B14612B3CC3FDA7A042D7E908C2065DFF48AB1AF660880148C5FCBB746750A9E
D6AAA94CB6B3988467C5ABCF0382B8E87C05886FACBD5C98EA1018F08F735FF1
4BFAABDF937B5AABB66A9E662F873268BE43DCB6A70DA18BD29C831715C3EF3C
9E2E1C172810C3F79B6EE341EC986824D6BCDF7E7FAC2596297C708819BE3DA8
5923D165E73F0099BEE013F6770933601D79EB01562BC67BDB6C8E2204B7CEF0
CCC4F01B2F034AE7A5B9351DC61E31A84C35C40753E3E2273C4CA70C1E49B504
C1AB2B7CC4148159F24D9A592971984FA314E9F00712B31A48908324E78A58C3
83450F3CF968AC4690CF549A7C81F83356C4E54F3D2D26179CE725F3693D59A2
458EE4862D6C07BC2974F91C64AEFD0B928C43719555CDECAA0F42E0B09E6614
19D3853F254A574B63D892478DC1F10FB671200B04D84F9EBD196B5B885308D3
94C51E1B10D5533D4CDFAF1B833AFDB4BBAAB61A3033CFBCEC9A2D13D426B95F
0EF50220F8C2BC9784AB7D637241BD2C225EAF9E732629D14D0286B1A2561013
89A8A638CDAC65918788CDD21B2B161DD7384666F3523974378D925462FDF231
2208C3054C6CEA5FAE1C1EEF899EFAD491CB8468B6C238BF6BD40FF147682EF1
FABA4D2F9316E81D20C1D356EF78C81617BFF55E201E9581896D3C22191A7607
BE4324FDA8FDED35FEFACCA51967BEB2771D9E8A19793D5682BB6C7652EC9914
9963C41CFBA54896A13D1E883072264562A5FBE2E3EEFC8ED975AD2E6C35D743
F19E517A314D5C972D36D5AF4F1FC26948B215A24681E92D2E498E8DE280B5B4
E0B4C4C3268E819CDD399D839988CD13733F90ECE27450D9A1832B9A48D22901
0FE4BD2C46388C98F2362225FF7F84DFAD1442D690874C194C57A6E828A7B25A
222EEA1C68A32A5AF9372D3AD61B2D6CB66CD6BF4C7647E47B9439F6B0CCE38C
A0B2E551A4B142DEF6663FF5020E537C383C054339C0B59D107D1F88F4DAD557
479E6FE5E9DD147DA54DB76955E640EE921C4B563ADAAB878FD8D5711B8D6E32
D4D4627E62D04472C836ED7FE13BE59EF75E1099FDADF3C21F161FAA1E28EC28
D50FAC219F2D78A68657BF6ED1F4BFDB270079017AC1E4E09BAAFB009598671F
D3DB732FF26650ACA77E8A29152315F5CE6E364D5D18B9C00C53E4512FA07B3C
CCB939AD416E28E04784F1EC139D06C106735E3322D680CF7323CBD16ACD5367
6FF99E33AA78274219A3D52FDFD91A6DB6EC285F8E915D4C899646D0C203EB65
865E2A62F08C749898EF2B51D9DC1B256121316678BC1DEB158CFB707F08A181
350D6EF2BA740C7ABB56F710B16CB2429D0486EE22E7E3DF14BB8F95C2882A09
A4C809368684A13EB35A71CA2D5396BD982447922072126C498FC7ED34C3605F
82B982419207535C12F48EE43F79974D7EBB4059448F66DE699CAE72345A5503
AF4FE8792DCE3CD6A95EFAE0153F5250162B5618BCE537F8F09E9FA393A35D8A
A216362B9DCA0B11E10E94A0AA4CD398E8FBE914D31732B779ACC6EA36CFBFCE
F3010CC15E87B00878B484F6FBE8A7C456E27318E8C26D595C1C5C8333A83805
640C5D11312C76192227BF7292481BA6D941BE7DBDD2B8F341AACA7DF47175D2
72ACC2ED90AD1A47FC22D47632D220A643EB921DE2AF489256A73D24FBFD85DE
18E3C99C869FC2DDA4F25C8C4CB4C3DD6BB0DFF26069B60C930CF301749EFD88
C69AC5E1BAC5D441B84C01A5C8D31FC613E76ECE88AEDD72F167FCAF398AD41B
7B9511F7C941789648CB47AD25F73B34E3DCEE17348D9AB2153E5B80D27A44D8
BBA7CDF0B654AD9C30ED8DF04EC034989A7CA098E70E7616A35FBB650B173B6F
7AF4B35601F9B3AD1434C29E0A119450BA100E621208CF1B21E795D6781DB760
D60E22BEF780E6C55B2908E8B74369B32230D2A78BF9375354FF7951BF6F5268
DD7B41DF8BA6176F911F37044298E290144FBC4D26CE48001F868B17A687FF46
9B4350F61E50699E9F9EF3811915EC7755984FE9A03D602EEC2931708AB399FF
2040E07FA087FDA110A93430C7FAD21BD82A89AEC36DF3B202B9DBF9AB7AAAC8
61ECE8FAC83C18923A1EDBC599AAA09B2367C2E364FFC839B92507CF6672633D
5573BADC7FF7CD1908B0D38369D8C8C1DAE294DA2DA8FD6355D5D9A3C59A516E
FFD38CB6D279410A1F697E501CC9DB9EF35203C187BABDA640218E1B060BEF43
3D3158B83C0D6B8E07B7117E194DC071BFA5D479869FB018ED4756894A17496D
FFA47C4E8AA7685A2DB505CDD01E943AEC44A4C3B03A1A08B5884500325917C9
CCFC2E0A65150C6D1603096A2963E0178E51D2EF912171AA88C6F74BAA162A67
A8127BCDC22DF3025CBB14F32F1C3D39BA8D1243BF04609DDC15B11D29EBCD13
C0D5B8DB87B06C71940C410D673DF516043325B54EB538A5A26374D6DA688A1E
95E0B76A9F7B6CFA6FCB9D760D333A12862D77A2132AA5F798DDCEFE21BD4D55
514A07071201F9544216D392A405131828385D0FCE457F4F22E4AE235EF7D346
DE3E01D85164420F8497EB926D3EBB770BAF00D0B109B3FBD8BAB44E9EFDF217
856B33E3B857A5EB5D1E1199FAF484C1362373021F966AF6EAA0D0011513C8FF
AB98EB0543015F06CA5583D631C81C7DB1E6F40046945E7D3E5BE907EDB98E9D
9A4817EA0C8CF2C3298CC3C4DD02730DB3F2839058287BBB4525F53D25D77F40
26227F1FB35210953D6F2D725214730B3AB6349F399173FBD3A901A347D01098
5F56B11CC71C20C2670E07C03D09DECC7F3DBFC0ED3E34B3D6F49642D2FC04A6
72EB5D7B0B7F3A70798323B0AA52FA4CBAA94D44FFDA86DD1AA3B98EB761D2C3
AC01D34F8800522E4154E661202A26B795A7B6BAEE10A88D654B53A989AA0B58
06A3F251F2D60518EAC744062D4B25C77BFE2A0FCB8E6160DA59C9538E1902D0
3B122C2703A719B18C709972165913CD1AB9F1CC61D096BBB9056E837A08DDA7
B66AC8339FB858FD145BBED57E50F1B35D494FC3D6B57700B116999E8132FFA7
B115D7CB0CA4C68EF82D01A357F56EFC943C42FFCC17DA823AB69689DD7414E2
6AE9572D02C583D7B2CA9DE86300C9507906F730C09354A99608ABBEC8F6ABDC
B407C9F82F63B9C93187261F5151AFCED1D207DFB153B37F4C3F729C4CB9D278
D68A91356CFC08A0275295A24E0019B4DB886DA310F17C1BECF3D5A22F073AA0
9C19BA92E6B7E141D48F1FD9EAA94ADC6377CA469C545315E5B7C88AB8CDB916
597FEF4CB80DE3167D80600B9459B1EB5030B3C636161A6A36128FE1D8423809
3B57FD30C2CA79F756C24239A44103BDF547ECBE046F43696DB9F62AF40704A1
190B5884287596F7A72480199C921C23396AE8952447DACB1F540128B586E64A
29157D801606872CE339B98EB2638AB9D4F4201AE1CD8442A3302C2568D026DC
CDB232CC98EA5E642967145BD0E4FD7EF8FC0F7E0AAA0AE1F33EC8821B502067
36580D1A3C1505B7F9B611B86171989D5459423D4A0F9925FEC05D81E64BE662
3CC1A42E36F09F82291D173F33CBD3E07FA1D558442FF44B1C1A98FF75D66700
397740F2460C68B9D621FE8B60436A82C09FEFD6FDFA76A69D233ADE39CF1BEF
6F2E9B271BE67048A1482E7036816F201E58AB078CFC02DFA5BB313BFB373E55
A7C3A855481BF776A87F5EB2D25C065112D6AB577C39810259CC058B7AC46EFE
F7E686D863B02AC1A79413B4536501922114C59F3CC09EE9A6DD43BA34863758
83C30B8608B4A0B8D931EEE5FF78EC6841115A0F5857715C75A6CC337F57FD7B
23AE053293E9ED0C1964D5A88D0478691AB71135ECD7851035C96DC30FC5AB3D
CD4A3D172B4A8AC5DE573D52D574310CD82FA6C06251014563DF4ACB9C7D9815
786154EEBA8AEC5D3FE3D8A87EC7D1C20562004DE3BBDAE580D9FFBAC5936F1E
1043A4C41DF9933B7B5DE581A88A7A218BFBCC8B3B0D3121EB64AB7F460D9351
1A37CD0C8A88AAE678DBE2BC4DFCD1FDD34089D289A05C04085284B2CDD20616
686C595D705207AF5D9C1552C0C3C42D9C5B255193924BE58E0D11066B99F52B
F837D27982DC3815D94C9A0DA68BD852D07D265C7C3E5420617503393305F29F
96BE7AB8E1E5FF8DF7B4ACC1573A530FEAD29A6C1212A024D35109B146DDF4CC
942F4B9FB4A739759365BBD978CEF6F04939C3418A6270CDC06470EECE0CA646
BC9A508CF9AFA3B9941603B671363D4A0F8C6F997FA62B90E0383618A22F4637
15757CA99983272EAB35BE2504DF7D5280467D102CD98D08CB83BB3F1E172CFC
687AC0ECBA84B089174857EFC5B4DF8AAEBF800542937FC7AEF744A9542DA621
8503A87FC1D52BC8191D69FD489E5A3830CDCF5B4D847CA1E01B70CC2997B0B8
880B8E01DEE8EDFFC6AA91EE79AEF694DC261E47F15513C8A7DF136BCC8318BF
47DE3172A31E9E8B0E8F03B8E88AED72C2AF3F39B9F44A9DE53E47A63327329B
789F0F37E15A19D9EC4224F95B83FDA7E26F6373A8DA46B83041AE8DB4F9D93B
F24473EED00509528AB80CB9741B98CC3150373F696781A583899A9E954CE4ED
D9144793A9D12FB2FF40386ACAA06BA208FEB6872FD6E4D5E7F6084DADE6B075
A4A67279AC40D5EBD09679A7F7AAA252E60947A7D6EECE4FE32BE162C2740172
98F7C66140E10C8D9673FE2697F58D360676320274AE68F31E80804853424D68
C602BED2868524D45E125C8CFAE64A3579F5CD3BFD8F756A74FF3696C704744A
7585AB77D2892FACA4D1ABB9D7F23B4654B265A8B1DA31F505145DE3B9AA883F
0FF7C7D8E4347733AC1C89BF86FD04838F3507B73F6F24057168DFFDC47FD4DC
3453319ADF6A0D1E7496FBD52F656FFAE219514BE79FD6E1566AE80E81B87CEC
3B435F9429500FDE501A6BFC2B6C214315D142839DF0B136B6E811AADFCC865B
23E4BD2DA3774D18F6144CC8F1055A0440900EDE7062E0EE3A1B3099CFD272D8
366C232B736EDBD8F134D3A9AB48B71E8FBE6A0DB8D1D15D5E7E6982A3C4D81A
AA31A9C60ED3C0A147965F721753370C67118F6FE0A34913ED4CA821A4F2579A
7CCC8CA9A1D8EE4D1080AFF8DBEC6C93D9372E35F37315E6CF63B4FD224A4044
2FE742D3EC21A464E65B1A3374FD4E51911B0C876E5B62CD35A5CA39882C6B0E
22118E98E256C229DA64D5CAD958C77A194EB2B1B0F0B2359F2B3F7356ABE200
56B3DD423BE922BCF3C83C3FCCC8087FF83B554B290734A841AC36B887AC956F
6A23353B163E07E3317A8CC7345C776E2E75BB1F82B42FC8A95F7898832BF31A
D51125A2C53F6CB5C0B4F8781E3A69ABE97CAC6C6F8670398A8B4B855CF0A402
5199105ED2B6567B2314EDCBB705B7CA58135F4038C208EC9F5ACA0DAA2BB203
E7227490BBFF9CCF211D7D75927C074DDFBDBE592A11537371DEF91B9DC088BA
10FE1CB5B571D219B06A37C2066761E3121C6EEA3DB2AFF09B42A36445E4C72F
C5160A99D7A4B7009B1D939203EDE0C82926277D98E1FD32DB476C67E8BC708F
0F7C212A3515F304AF551E7660FEB5D691CE7FF3591E0382602A841CF2E76DCB
77216DC3BF850E70A1C76CE2FE16746FA3102EAD33FB25C9AAB8C85BE7D562D8
7CE12489E9C0A1BB17A8181664B4906DEB2E78602EA080B35F30F6C7629429C6
891070014323A5ED11DC4D0B3093E427968F730F7C21BB8ABA0C94590DC7E5FA
CBF5FA6F6EE86919E2F5527D6479F047F96D8C13F733CE9898AEFC12F01A62B2
F55DD89018C7EC83ADF543177AA530ADC514DA033360EE1AB3AB802B68C5A164
6A92A948F2BBA420C5B59443388EDB91F8A569CFE3C217D540FD46260343B380
D79C4462598DF20483A881BEA1261BE184354E8C9610AFDCC3ED260994669B40
83ECFBE0307D6D417B869F6DF94A5656170684AD5F9321CDF508F68AD5FD7D10
601BB5EDC84991B78AB6039485BFA31C752B801E76327DDB5324DDD10C20B0E2
9BFC3DCE5DD5A423BF42B74C916898BC30968AB930D76DDD8486916979A7294B
96B89912BCD32C9BCAE4F8DBD67FC01B223AADCB21A84A41FC69595E7A1A97F8
8DA2B2205CE966D6420400063B3A3B0D9FEB53FFED2994F529E8FF55D79E432A
D6F5E610158329FF11172FA081AF59AB9A805E804D018463D70534227CDBAD19
83DF8DB10F586A5EF2F3E5A74743FE781F17501AE1687957A727202E86E9D5E3
D3027542F32298C88774ECB0038E799F1A89AD23AC7B52EC86AC88C48E7077C3
0DDD4A6519488062AE3AA949D563E47FA3F4A3EA4C38EC16B2D5919EE3F79684
F7B00B174750D7DF18EBF95E6954178E305B068C11A8020D1A155FCB44F4E79D
A8E0AC4D7E62C82A0E03C14593FB1046FBB7D2DAA74B406807705743A7238461
042BCD1E87E3C5F8E51B67460F8002F3DEB82BFD632583666838B060EA6FF57D
FDC72EDDF85141BA25FA87D82F6F90C04BF543C1929141E640B2A9DAB1777924
80128648D193B18CB83653C761D5BEFEB6E6B7677647A5F1C7D8579C42E04C5D
EDD25907CB5FABAFF5B0E31839256B9BE57A8A7965CD3A8D58C0E34673BD7633
45FCBA9D67AEE06AA10A5F8950F5879209A327923A471A25D61F2E8182855DEC
14BBB3E0A2808DF0A7766FDADB5C90E2E028F14B6855CA3DAADBDF5213879B86
395E7896365ABF47FBB21F66B3D3442EBEA550D41586A94C0682E42B3392886A
E9E02BA3179BA9B4AE21259CCF27C7F84B66B6170F424BCEE0C1B754A674C2A7
B488D1D4DAC3900DEB535A10B6E3F94564E11FFA8ECE2D4C27342EF751F4FC23
E317C721395BBB0C9016E84FD89D639CA2A26D5A5B0B10E298F179FFC6D76AB3
416FB3FC681A79EFD5051202DDA9C23EECDA8A08DFEB68B61A610E17F399854B
5ACB232CF1254FBAE5E72E356A0F613926A512635B2B5640324695590E4D5BBD
6CB72301B0ADA3A44868B78687724433C85EE19EF62E3B5A8E16675E31F93E91
79602F599C061C2F8EDFDA9F95542D5E4649A5F755E2524F347BC1D76D13A4EC
A2771CB6B5C99E9272F27CC57835760E30B8BEAA3AC8E0B6D5E9ADBB1A31FD0E
4001AE32BFF67377DCDFA3A952442F9E111207C3C885746324E7B0B9E298A9A5
75C8821BB4350C40A598932B18E113C0547E84EC0B4B7E2DDDBE90C7AC5B6C95
CF3C06258BF0C545AC8A2A5197EB748BE938E4C0903185864FE7A2596578B112
18BD71B31818B0B2B0E8E8AD6232AE20D6FBE558243E7DDBB5322656862DDD7C
3552C0B76FC657677EDBE2BC4DFCD1FDD34089D289A05C040919622314D2A3B2
6B2C283A5FC611ED44F1A1E14BE94A490257567262F88BB7B30F8726A3ABBC8F
DD0366DA888DDB90DDDFCB6A87C6E2E2B331930824819EF4D3954093316F759C
F7B36BF401599445B8D890BAB76E5248A3CC55CBE7FC1D1853D0E4AD65927F0B
EA4F9E6AFFB355270CCD20F49B3A8C0164A7BEA283E5D71AFBF214B3B94A26D9
914C344872DBFC2CA17D530BC11B4C563D799BC059392B7E3FD15932D2A30B40
1DED3C0C39312FB475491A51AFD1375AF04BE29A49E5F081BBAFD83E00FC1C44
CBA6A3A2258F3D4E1CE2641C8300C594FE2C9476912DC04F6EB1EB1C56B5AEED
FDED22B636D13D6D04DA8608C3D33CA685CCE2EBE0FB904FB2F587BE58063E5C
E124B6A09DF13D62691E14423D32B40977FB26D168E25ECF5CCBAFEF41CA5122
A37879AFE47282BD8DE2E36C370F08C34C1B0973DA0C9A2A32E8F4A83E4AB757
C8DC04ED4E0B87379DD9166182170C32DD118517C4E68DD89BA2C7667E07BA59
B7C25876D10E95DEC08A13061D24AD69B43553CF983497B58E38DEDD9F37AAEE
8A0237B8641509EF7F1E0BC67F2016DF29B2F4350B0950BA79BEF1800BA0386F
BE0FB721B2B9C0C46A57E6AB82D300511B05C15FC42AC1EEB4EB400ADA1F424D
DD46E0D106950707B471D13D7A9C3EBF41F9205329A89F8DC697A6ABC3DEDF92
CBE3800D10A67ECCA3F2BFDF7C552A122BAFA7DEBC26A8EC58DB1128A9F9BE1C
C3128083BF9BE0D909655248B07AF818BD729B7D984A9F68D37677A5DA20361C
7F5ED154EE1AE12CD6DF8E740CB8961D86FFA6F1748B19B83FA1EF41EDCCACF1
BAA41E8DACAB3F519B32275443C8C42A3C2B60BDBABBC4BE4D042DBDD362826B
EF469DAC32CDCCAF2BF9D3B95753EEBD274533ED76AD49BDDDB099BE09D7BBD3
24B4CAB0A008822C1589E39C3400B20F87F87C089175E230B0127A819A6E27C7
1C390C32E35A6640DBF79E2D6EB4269195B89FEE74899FD29F349633F66B6662
72FDBA5D33B1FDBEEDA43433617F9795AC6119CCA9A7F95C1D64C56DBD57C766
5B046A438552C571ADC7C2118CB293AD4B0EB457657211A2422A9550A2E889F6
E60E3EE0443FB925C4500C7A0C383EB3B78D279FF129CA0A23C0112734EA50A8
2A3D6E7954A02F0962E2E80E7660A5B914E04453479E6924C075B734BA4D1015
233A6D79FF1ED48ABD3DB22F41AA07E6C638637E71EB29B04757C771BE24D285
E9BF039F5A3FE8DF5B26B92FE80CB50356F7FB50EEEC9B4478300652A80A0856
F58BC36AA47F6B6704310B269840587B3131F8336EC713C7156AAA187789211F
1B20FD9656A1A6FBCD3DD6EBD7ED27129CE99B1BC2F9D228ADBBE74628D7AB71
B04201017B0D13DE8FF545B3222E8422ED4319ED7FB242BC09A45DC4A1907826
D98FCBA579EE2A7FC4A19CC00CA98D9F0AE1873CB950DED8E8F0B994C777FF82
252708F4E2953342626EF81ABAA02B0C0E056593AEB5D4E5FAD48952E044F1BC
A1B2C6EB074536B4670B4961C7033B759F8606456BF5D7AE8F1DD86B46AC98A5
D8888B758B23C431402F4AFCCAD443CD60CE8C6A84B080B045199979AAE7A94F
71CFDF258F1DEFCBBE522FECDAD5E29A7ADA0E2FE39295938D47B100BB99B648
5C4D0BEE82C0F00CBBB08A5E2AAF4FC88F41F7DD7A73D7661387BD1EB9150568
87577A6E2C553DB4457D94ADE425AE555059FBBC9EEF58A59EFE9330926A2BD1
5B5ABD1F9F4E3B04FACC8B34FEC11B39FBD13C12B6C1C5B0CF4BCAA5A821CFFD
4DCAD23D75635916820E7A851EB48BEBCF33EE9EB89A9D7D0A731CC4FFD460A1
631B7B48633D0107BB6A47B4F645A6FC7267CC23171BBEC63B9E01244EF26F7E
80A5E040C97599F261955E46DB1A7E0EB88A3800039B6B5C4144D16D6004B911
40138FC47F6449DA745CA17B5535298FBAF07EE4A3CF248DC5653C772D06D80F
724F159500C8BA583DD9A279FB94D21D943D332B98C261AFDBC913541295D008
2639D8BF3827D9B60CDFD4D3106079A36D18771FD02C7C46163A0D15B82B72A9
8EF2FE73BE1C676D2D244527F9E7681D9B46962F2E479F73EAB95C0B8B143B7E
D73CF6B8BA64F0AA4D566F5C53273FB6929FA4632C5A92771BF7647B11B57050
5647BFA4D3E6D68ABF7C3BE55F7E8C58229BCECE7FBCED895EAC761B5D1FEDB2
6731D148AE0D5FBFA3AAADE36133B41C5AE1EAE6E5F9170B2C25AFAF2F3FE79D
B14DAE5A39C14B16C29E33C9A478EA3536A63ECC96632B3ABCBD5E710AAB16DD
89DA3C74A705CA1F65E78BEA7416F590242AE504303221F1CB8A5F9323980511
9FC552F63DB4D156B6EBB07A150D71529DD24A9BF27B57B73445BE16C9E24374
2CC356927924A20883FF87DD69789556A974B884BFDA04041E765CAEFC99C0A6
32CA1902B7577244F45E8D580C0BFD6C8AC0F37587795A411E2BD0CFE027277C
BD941EEEE874B88A2E4C326F7FE4A3CF248DC5653C772D06D80F724F1597FC70
3FD66C029C8AEC08729BBB2824C33674A7195BB519E6E6FBF728EBA565C2EA94
FB70F0B1DD3E22ACA3C4E6363883EC4892F625D03E03339019DE292B384503D8
020CD263D90981AF3A068E047EAED4E88676342C1C7DB062E9CF117E12132452
14B45281BDF4F0B444F534D9D36055F1CEEB7DB985EDFCD485C9A829C26A1E9B
80816B526F61C50ADFEA0C291B30233805724807B071E8288F1AF5732A5FC951
D921E572D9004D85A2C80E91D1CBAEDD55EC49D4E68AF23ED7704564C832F41C
5C278CE25A7857B072D7375C96A2DB3CA0CF7B4C199514928F9EAF9A73717AE1
00DA8E491D310A8023181618AF6D255B045079096EC5355E243FFD2846483BB5
9CB2EC012EA2ABCB6CC8DF8BCF9C39A3C152CA0A6F6C22E4ADF5B4E0AC4172ED
164863A5BC150F486B1F993002C4F07B5716838F7DAF61234820FED5BDB2F071
EB708A45D076775A06B2C9AE0D77A6E1DC69B856185C9B4E35F5A2B22ECACA52
AF81F8FB349F95E51313D6BF89706FAE2CEC255B464BF2625653E5EE3BE7FDC6
1D4336EEAB8E04F09FE426F398FE8E21EC7E119D220A197516A448EA0B8B2BA2
F0DBD6740197EB95D3FF126E38B473F5DEAC046F35FBCDE657CEFF63AA973640
B933E2D2396B25F47BF25B6428940FB51A54B9C26E175FA8BFA903F17D2E82FF
DAE41A0BB13A02B8EACA8549F369683C239700CD4DF1C49AB70B8E091126686A
F3E15C7DD6703D67CBD9B9EF4AA7FC348CA5048DE4026A986040C6AE9AD9EDF1
28A76236561EA185C51F258114540463F258585B73508E9A28945C70B5F403F1
E663325A4A9CBE039CD4FDFA8388D6FC23B30917ECBB139CFE925CA54B9CCF4C
6B1E52FD2F6DA950B68EF6AF1DD0DC39B8E07C0A595E7DD371B5F750F19F31A6
EA21B51DE8A46C66D96BDC78FCC41A97E3E5F0B879947E305B5F38B4842D82FB
04C02E57BB179CB69111A07CB799C6D544719471104FDEDDCDBA1E419CE60832
DE009B6D57E11AB564A93ACBB62AC804F20C5644E2183416348E7E1F8382C2F9
BA07A97144B83E456B1005E1464BA146AA2847301D6896D16ECF8B3557871330
BBF56770BD5135901E2121541D767E3E92666F3C071E26202DEBF0BC70A92D3B
64D1FDF723D914DE830F43B370599C079DF74C9AD7D440832B49225D5BDF6B04
188D10AAB2EA25AAD16B60CDF79B0D8421DFE1ADB49EBBA0A8746AEDDBCA7EF1
D18599AF425279B00C9F2304325201839FCADB7CD7DBDC7925743A1A7D9BE699
3BC8B254989BFA7046D880592C2A0DAB509F469AAD5E6CB37EFFC6014135FD6F
75875EE3CFEE144EA2D752C23B476F55A202BB5A04139D1CCDBD1F227556506C
FD0B79E121066B4476E7A9D310FA4D477BBD8147CD866CDB153486ECEB58E91A
DD579BB4F3FB5FA456A71DA05AB497908AF0681D834DFDBD6686D396EC097BAD
FF284B85CEBC204F25220060FE23E1DF8D0DEDF1536CA906FD6E8C3DC6DE3091
F3A6EADD8ED9FA61A7329E1F292E2496525F9ECE6EDE1DE8A78816431DB48B98
74E79B54C8D1963AC67EEC9A5003B438B20514D1B53818B474C8D2D3BB772D7C
D0EAFA7DAC1353F7C1C360ED46A35C914610E5A8277A669A201DA4198338A8C7
DEB95533ED3F634A3592BF1214E19CD7DDDCFC566912B89E93D08F97CCFBF002
46B35D5C56E24E948DC18136C7E7711B193994078394E426B23B8103DAD5CAE8
0C6547E892AD4E561E3D3CCC1F781D6938BD8434FB011E835D66C05375DB0094
35761AFBA562AA96B42E58034293B2FC8B9FADB88E84025FA6921BC299DF824E
E8600D105407E165D39AA88F9053354EBE2ADF2D9B79B93E84F2100092B709E5
7E16CF2453E2FA20409EA9B70EC43DD61615594E6D99A4BD87993E3CEA298634
FAF6F7C9ED12F5AE61C6E4448240643350BBF6D16D4C358B39562F922A780EF3
53EB3D5F54D352EE8DC5F3D297158E004EEA31CF85C30F422B8B720FC40666D9
1F1E8E8733E447B03C188F0019D3994362D449596263FC5B5B8227429788FD52
B6AFD4CD716A4C5F5EE0F40D261B2ED41E24EFDE8BA17A027EEE40E5DD1E46D4
28E468F297082A90A2D14B53245AA757A20B58ECAE585AEE6B666391AF8B33B4
7EC4BEEE927951881B85E359A65F981841EE4F938CF0453510740EA9B262DF67
065C92733A204523D6B375598F6D3E85F5C327C535AA652C0B70FFA100616E95
E8E9B8B1E95B8920F435FF01B8EDA5D9F76D84687FFC86B844C07FEB20A639C9
373AFC0EB01AC4D7C78F14767DF8C192183D4F21CE69143B90FFB2D64CDBDC6F
CA91DDCD24DDD8783463B737FEC8DDE446081ECEE650200B96EA38ACD253F9CE
FAF9DAD18BE66171840D65F072E6444370C58C6F05441D303F8BBB659570D9EE
22DC88E8EECD1F410294C67BEAD9C64401507D9F05BBC7EE14141E02C64340CE
8843921D040BCFCA7D18D4FC8A437E86E393EC80BD89325A68CE77275B4F3040
4FDB50F7A70788EA50F2C8E08DDF4ABC68816C59431F0B8BE09ED2077BE138D3
97D9AB3B555D28644A3AB7B3BB0D099774858E0FCC961959691B05F7354355A6
00F4F63EA1A434F744EB3CA129E7AAAEC5ED21BAC95ED82370921C864D48F3C1
9E00722F3E717AF3E9795E8218DCAAE84B43B94D558DA64851F217D01146B9A4
0F925092FA4A70D781359887325EAC9F1009FBA6E1615F4676C2FDFC07F7343A
26664E6F184BA9D078410D912166EB29CEF525E3564F679E9835733901FD38BF
37B929CFE40820D7FAEB5E34962EAC5B96319A8C97C427E93EF0507BB52FB321
C941EA22C3D7E788CDF3266AC4F2A58D9C8AADDA1B8FA186DE616FD7A740BBCC
990C60FBA08F64407679B6A4484F0E7EFCE4190000FAC8FB9B3F4CF2CCCB6B47
F45BFAA10804E3EBC87E9C713A3A175733D5CFD3E2FB855CADBD575AD932F861
65E37E44F202526555BB4FE28AB48DC04338C45D33C4550E8547A21EC298BE4E
A2024BB8A0C51A20BAF1BA469C22832E1FDBE7765AD0E7591183107751C05EAE
D82724B1B429E15103132F5F53CB4FE439264EB0BAAA0D3C77CCA1A388B0171F
D20DAD5A5DBD5142D589E8246C655A4E524474BA16118002B20EBF3FB5C6BF6F
D848166A1256E0144BC8E1BDAB9737CC53C5CB01334D86276B863F7DCC8D1BEA
E21A6A4B9296895FDE961C7BC5F64F77AA7948D6E5128BFFA3A6F58CFED3B46A
F4896390E3845C6BDF1D8A5C58866565BD82CCD31D7EE57AD50AD408ACF49749
7D47ED30D7B432A600C2CB3B346FA724DB979FA648E1E9D792118339FA2AAFA1
BE5D72238FBA0F2774F7E0ECB4D6882F3093F5E85631B99351BAC3C8142F9478
E3EAB62F9DD9701123CB216D77D6A058943EB5EDC503205AFCF25D154707E3B9
515A07D0C8EFCAD5B4B1E861486F0DC893FD495F3F35C9BEC95AEC46C44D49BA
47846DFFAD7C7F5CDD209FD878F4F7970B76BE54F1C827548036EF91C4B93272
1E6471F87A0E61B3F141EB8D2A2FB9576FBDF90751355EC8662A6949F1AB84C5
DC459E3AC26BDE087F97F6598DFDB52879089AF3D95E392F9A2D98375FCADF7B
FFDD1EFF463B4CB816E6C4E63F5668FC3071D1E1ADA3D27630A6D74EF741D426
A736DFEA8C4F47ABA8A7667D77C53AD304D4D092F558E48C321D4483635CB8DE
7F410D0BCD465BED573DFD614C5A83FF12B56915A3DBABA3005001877B44F4B2
FD78886753A48AB5BFA49BB082707B2B06C1AB65D2ABE7D1463FEF0A7B361A13
1EDA5CE494DE58B2A3E58D0B69A755BE1B8F3D3BA0C2F11F9228E4FDC6BAC8A3
A2CBD21CD3A62E6F462470138FBD5FD9D19C6D40A0E4AA151D468A2C8A7A2B49
4298CFCE4B2FBBDF97F7A945D7E64131FB307AEB993219810305B60805B0AB33
9B9F776C830691322233975297C43319EF4B2A7DE3D84EDFDAF4A09402FE9A4A
894495162958D59A165F2CE0D9C34FDB209FC8F1F1C14014B6B2AAE5F8AB7453
F49A675253E13D7108310B2390BACC2B20DF8DFC4F52F84AB2EB5FF0E9E321D1
017CE6D008AC68780C6E7939BC3213504EBC654065307E0144719FEF73F67677
9D281EB212B0E16F654EA8C79DBAB59544314509547B2755D2FA7CADC658B40E
5334C27BDC969B2E3E54DFD4723A21A1B0C182692000EC9C2F2BC4A5326C0D22
BECD3D600B2200CB8911CAF0A65BF04F0F9B7F331868095AE5B236E57DDAAA54
5614DBECE7C53434E957405565BAA56CC19E2DB362D6C364E7D601D1E3934407
03698DE97DC35C4042111E18DB66AA4B2C7492E8FE40B1893C4468339AD8FE5C
EA094B4BB426D0C697B5CA8240B3A6F478A11E6FF4C216F0DECD0B332DE32AC1
01018311C6F3207EE257359037ACF6E16A73834E1E392BD2DBF9B3CB0F4298D7
39F5F1BA4387B02E6DFC7251E4EF96AEFE800A0C825840EDD8986BC2A4397365
BE90623E4A23727D17C15A8E2761C226453DD690C4F70D48C201615DA8277723
504DF426883CE2949FA8C03F183F977187DE15E67AC87620A5530AC7F77B3E60
E588CF90802AEB78D616CCC61B9E066E82E3FDA38C2C8BA48F35A0D78DA80F34
D6F78642C00B903B65F802529AC96B65EA231F7BAE4500E84E750C163DCCCE8E
674E89938960E8C0208D9762085739BFEA94F763C311CCDE7CD0FF410194F585
00EAD840BE173AB9088BE4542552F4C78FF7ACC54287E5F86483A4F55EB04280
50027F06A1F3F38F65E3FDDDDDD3A12C89E383DAAFE152686411164650B3AC8A
1FC7C1DBC6FBDE23AB1B7CCB1F48A1001890B5EB00A9FCC8A96442C1F6554C4E
BB62B757DF0E25F7C0444A15AFE24A9D3615BDFC8E7648F377AC252D27A21724
B0441024A31EE580129305A45DCC2D72AFCAB58BFE617A784C1A4328AB9FEE8D
F9869412EB326B009529A3C550596F56FC8BE6360FA5DE254913A375CB7C3428
A025143B2F462F1445750E86B9BF4794786047E407E2836CD6145A0D70778E3D
CDCFDCEE826FFA5FEB6C81A3D837838617E081D4FD9D658EE1FB2DA8D24DBE34
16899507BE82919FCA33E64D4F828DC2510970BBD909C7778E391C55738EDD7A
FA272231E183D8F57A6992E1004CDFBEC6FEFFCF9FEB3D09EF72A02A0630243B
90EEC379E5AC0E6EEC0817BF29C4196A4E41FCC9B7840B81E1B1D28D2BAF83DD
FA0F721154081DFD0F5C038827EF6F918593B908CC73E80431B16154A2E884C4
66F051E921E6650F326EAC76AD58C4E92A16C8FAFE0D5730269BCF8DD00ACBE3
CD28F50A1F54DDF8E907A3177DD9FBB0A7976E37F2F643F477F3E4445243889F
08FE110ECA89F259A5A389B570F638A8DB5C5EE8842F18A49FF940AE7F3BCFE3
CABB35BD346D7C3E4D7C4D0B6CFFBA52399718E909E2DE135BA37AEADCC23237
BC8DD65DF9249FBC48DBD80A933B65FC1CFA45F0B6DE66224888BA29A5A922B0
89CFDC957E447E983AA48A8380A77ED4FCD31E6632F0115CB6A748B214A2B04F
2A363AE754E48C1C50C0EFE7B3F53FBDD2701CB7A4AA406741A99D3300FA46B3
2057DF2A60AE3189E579E92DE8E98DF1A86DAB5CDBD9880875639BD6CC7CB858
A1554440919972DD4B1B6B8594BE2DF10A8D9503B87FA885F418FE8C0CBEFF3B
9272C31125BB98FDB4FF85940F7D22DE8F25B0FC69CCFDD003F3B79CF5CD2EC6
BE52F350399B18B00B1BE2426BE07DB61ED5EC53CF3FAF3BEFE93156F0575C30
ED8DAEB3E0786EF615BE883C519B61A5C4903B35191BD08A66C13B06DD3D9048
D7F1879266CEE7BF29FA5F02195BDDFF8EE2F694571A8B25DCA69EEA5A8A88D3
D7748774EEA7DA8FC70A6624C0D6B64DA38DE22928F35903E5E98CA5E982E950
42810E9C89F8EECD0583BE20584249E0AA1CE88C120ED3E6F3B7EFB166C2D45F
5F6F72A82C76D9D17527BB5AF50A65F08452253A5C9099BD483D2F801DA4EBEA
35880814565012929C66E0A189CDE7990A565965187C6E178DECF792BE4BE9E3
11C660B5E3BF54309FAEC4338FAAC4858B4551B257E603F44CC22B333B24D4B6
94ABFF279F3E47BCB2785BC7A0A0FD447F078A707237A187A3F5EEE26C83D26B
3C221607034FF950A7FF213446046678C38F2811A9C0AFE2453B94DDF3DBF772
C15B051F270C8B923B651CEE4351DB0127AF835DEE44582511812E64C58BBD40
6F3FD5C85EB1EFF9D4C89AA6A3A1C67BF93ADC8511FEEC33D547A179633989E8
B474D5B3AAE427B4BBF283E8006AA31BB5B7F24777CFA608F46C82A32ED97847
6BD8B44629A539E1925A0D598A88A5A0E440CA017D4E278CBD716C0BFFE768FF
F9496D0C8A1F4E6ED24F8B0C13A77DBF8585EF198A853C4077EF93BA43A49921
49C2CC745A57042D1D17A0EA50D1E77CBC4A049B2757108384D5AB49CBB1D380
9B17CD4C95E4CC64B304107C34F2799CFB8F027C26BFD23EF2C5DAF6F2D58F1A
F1544E5A4FE78C5A19683DC96E24D897C6A6A747A301504910D15A9735C24690
73CC93338A89EC2698F8689D00F89290FFF78CE0CF98116D0FB226ED4E302AFB
D902F5DF41E20B4613D932FB941F118FFD512FB3560FFA1E35F8249D0A8F0510
98AB8A44D83905AE2A940A245911EF877563D14C36CA82EA09241B8996937FA7
D704F5CB9DD1A6EA81BD5ED8283341179A877750324C7168AAD74711FE224949
5ABC52C3EC57029A12B63E8DF0583F3486F8DEC4B46A999B6F8D86EC49B99FEA
2FFBC6BE0D09BEAE6448F50DB1EC40EF2178C4F5A3712B9639A43B79215FA37F
1E3F7F01BB191C92D7173487625FF7698B00603D8F2AACAF92BF70091FA7B058
D39A37A17EC5B294DDADD1FB5CD6A60A356BE1C739AD1F92F5AEA13D4FF15CA4
5DFCE22551B503C53FD4501324B0DCF9877B1BCD114DD13A24B209E04DEAC84B
C9CE934111F07C8B5D12F52D63D1BE5F9A68032465C20CC2519C612133DA1F5E
0A573ED33364494732A4745AD107EB7963B1517EAA32207AEA93E1316648EAEA
0FA2FA42750D27C3BFC46A4F1AA3B6E9970A937FCAB5E3A912F0EF7C2F4011BD
DD8CAB3CA24E2365483FE6F5ED1978B023916193952E1D5E567BC9CB27D82840
C57195B143E9CE9891921CC6208476EF2889D8C7636FCC7F6A6662F5DD74B5D0
3A46DEBA8214853A82394F47EFBCDE7E9F8447B5DC0D2A2539FC32E01E1D2245
F505EEF4B387B7E5B2748E3B9949643593E5C1CE8EBDCAA10B4C89BAEBAAA695
62D7726E1FBA834A0CC5B5EE75B2788A6343CE2D412FB6D59D9CE7E485D52A07
EDF8ADDA4031D2167BF16318E0DDFC2658FAF934FBB6B6C98204AF7617E998C2
49702C3A48C18BDA34FF5D766AA4A6370A8886035A674B6A087B2E6AFA52FEC7
9DF973B76E9109E0516EF8FC4D61FE39A73E2B7A751436FDD052A1D16F000C40
6519E6BBA1B81526DB572EE49D0148B836378E3793E69C914EDF2EFAA6EFD27A
035E8192799A7D2F2DF9203349A74F382E233221BFD6352D8E9EAF9A73F1B367
A4F7214EFEDB15CCFBFB9CB02FC055CC017CC6CD85C3A055BF9A1D4FADECFFC4
A484A5D64262D5A529C8911EE9AEE5D594EFD5CE8266092E48865168F7DE33AB
266427F42A4B62E101C9A347BBA334E8391B1FC21196B6CBFE6A41D34E3D2190
0A606ECCD7668F140EAC8EEB903B86749F6F25C76501D2F2B70CF4F9EC140737
A4839BA81DF573A6475173BE93CD538A97040CB1E8E8FABC30862C8B9F4E593F
74C791C1053B9FA71D23B70A17F5CCF0FC0B379FBACCB634657A512876852FF3
06AE7C36B3340FB15294789A9131DEA8486D315ADDBE8C8006A580D463A78D3B
999653E2810A592776FFE4E0B898FD569DD578A0284CCE082049843CE72A2867
59835A814418CDB40558B6138846A1E419F69AAA800F3516F5B7845154E89C2A
E8A9D508CB22E70A333DA6D20615857FD55CF30B49C25ED2BC8D3EE6B9CBB56D
B71E2CFD259B0EA0D1333BE92422A6931812C3FC9312B7FB2E64DBE4F2201358
7ED7438FD272A192D69F78CED290CA05EE3522C118A17752114DC214C5520CE3
CB77E933BF9C04AAA9107457252501C2F9A1E39A88A2129E8BE708F9CDE8EAD3
AFAD175488DE289EFDE1DD1094FE958532BDD64306407FFC8176E7F0AF5E68AF
A36C3A37E41EA9BB736D40E5353ACF17D26BFECA6829BC62AF52C94AF3A707DA
E9636BB4331489A59B4A82DD222360919DD376917AC4D8DB7CEFF3B95783CEDA
5E5F88DB6A301554D11044E6046CDD548FC0B0107056A01067D9A42A04A7D694
546711BADE9C10AE4614534F1C110461921D5A21015FAF5A27F1BD52A5D2153F
C45C4111AF1407A0D08519185670E26CBDA6414E903C68B366C0CF6147C57E95
56D3E29BBE2CFF936595259DB9C61C5A24D69F1C11B5F41E5AC1546966352FDE
064A3EF61CC0AB7F806CC816F686D884253E33AB144AAC63123EBCAC57043B89
2227742BE99670B753
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: DejaVuSansMono
%!PS-AdobeFont-1.0: DejaVuSansMono 2.34
%%Title: DejaVuSansMono
%Version: 2.34
%%CreationDate: Sun Sep 22 16:29:44 2013
%%Creator: Pavel Farar,,,
%Copyright: Copyright (c) 2003 by Bitstream, Inc. All Rights Reserved.
%Copyright: DejaVu changes are in public domain
% Generated by FontForge 20110222 (http://fontforge.sf.net/)
%%EndComments
10 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /DejaVuSansMono def
/FontBBox {-558 -375 718 1042 }readonly def
/PaintType 0 def
/FontInfo 11 dict dup begin
/version (2.34) readonly def
/Notice (Copyright \050c\051 2003 by Bitstream, Inc. All Rights Reserved.\012DejaVu changes are in public domain\012) readonly def
% Copyright (c) 2003 by Bitstream, Inc. All Rights Reserved.
% DejaVu changes are in public domain
/FullName (DejaVu Sans Mono) readonly def
/FamilyName (DejaVu Sans Mono) readonly def
/Weight (Book) readonly def
/FSType 0 def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -41.5039 def
/UnderlineThickness 43.9453 def
/ascent 760 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3491FF0D04EF446AD8769DE20E54
1720D75F2AB6757C7C228E5EE51BF64BAADDFEF9C0FA3301C525103D2280F773
8054F4509B3D63122FFAB5125CE8FC73ACAD3B1E153EF78ABBEA64B3FD2705F0
2BFE68AD5670233C9DDF7A6CE741D2B7A0784D86FAC2D73CDCEB858F21BCC366
D652A738C3854826F97E3364293843EEE50CFF386594860051FBA702E2CDE29F
5179930151E7B1CD87E1FEEB31CE2B1AA4A07D4EDE7695FBEC4E22181A9B5380
DF93E4926154A2AB32BEC0C2A071AF63071F895A4F714E6CE31293BF4647BC0B
DCC0934D4C1CAFE035ABF6E73CD2ED60A4C6416F04EBBA6343EC39911CA2F25A
843EC16EA40A688C64AC31B4CAAC75D92EB7B73C2F7F0055D23F297C2A582606
642CF5382E260B9495139D3F40217BE6FF7A594F01C8B0438AC58AF9B82D9B32
2F6546A015D07A6E66CE71B43103D1B1C2EB9D1E2941CD1558234D6AEEB13CD8
5AB1D608421DB33F26F0ECE68BB808CE15EC5F2A2B7E125B46F622AE0EC3A7A6
EAEE618246BCCDFEBB4C84B9AA023E4C2E1D0F278AC3BA7A4888DC6E90ECCB04
BD972EF8A717D2A57905BCD23614AF3A7C94025CE06E6C68570E50A33E3A8707
00FB4FFBFB1EC7F4F50C03D122AD4B63E9E65F0A0AF43EFCC9FC546FD13DA42A
1C391CD5A39D75F1A4968FCF34270917DD0B7DC8AC08BAE392C6082E3A035A03
4CCC595BA01DEF0482A83E02EE1F0367F4A80E193F4610960393427B7A117FB7
D49657AE7D2B294E3534EEEAE97DA3239259BD2B5F063F81FB03F68D22853258
3F8387F0BC65DF02E020E4DA80F0CE2DAD5F5A4E8D1246C83DE4788F5CE3875E
4C412F8B4F1AF941EBF9C39BB17B310D911D21F05FB674AE8409213346B08413
FC160E9D7D5C5AA2F9E12963F9F03B33330E14914C09A5983F0DF27193BFBC25
32C24DC6432B4BCADF6CF9304554841290962D4C077BC1D5C7DDBBE50EB6A0A3
1BB786F87431AC95740C7E138AD3FD3761A27F6A8D89F3EE3D32D0AD34C3EF1C
144DDFD1350FB0135F96EC20FDFF8A181BF1B21CE49B7ABC4746155A560F417F
E3A60697CDAD47578430FE93F3ACB45B1698577870AC0E23CC8F65A5FE9ABD00
4BD9EECF04868480C689D1F4C59CC5BFA61A362B2250FA41EC78F302F14A6935
B8FCBC6E5AE0AC63AB55EBE80AA594F1C27E2610D9D94E1A283040E40D34A48F
F1C91A449B9D325DA9CD5407CDECFF1403FCF5D9F07E12FB96D6CA50DB5024A0
25A937A4538869768A32E17F36E9FB3494FFAAD76DFC3A0C9D91CB040B39F12D
BC1AD883FB04E174C2644CD820C75C576A4DF008C77250754831F18F80C0AF10
61A36E88E633D54094CFDB643D8B069E28FE49A6C0851167D085437E0BF759A1
C65AD058FAE6BBF34DFD0E3057645517D525EFCC1E560043A423B7991035F80D
E5D867CE3DFD17CF04FECF64B5121874A33863199B08FB5AB83759A0D6ECCE6F
F1D1B6ADF2CF0E2E0E886B546C5F02FBDEB13097E00732C3853253C322C17D0B
51359FB565BBD5278357D7C02DD8E6DDC6D2B50677B05E07BA4D9FA1D2FE87F4
697D41DC422DBBF6C424AFD2E59F946E4482EC9909331CDEC781082E29CDE9E3
E5F6DE759736748872CCE46B9FD23FEDB3C172507E4FCE859DA567B65952C989
27540E57CE2E202348A293CA5C0DAD34ED900ED29D79063A88F8E2E793CEBEB5
29D60D1D746A9E502A4389E2822C594AB050B8F483C8E056328E6C98235B490E
41026091FA933A917E5A149A2B1635545ED0D3622E814D2E9082BC0CCD31BC29
2DDC7310CF328508BC4C925ADF507F168CEE0F4BD0DEA9A841EEFF06E7D3C90C
ABD9E113DCB2A86999A55CAA164A742FD031A65C15E93FE9982B3E788FA7B44D
CF7DA72999BD022DE5C2F3A2F7F7312A451728393B9D4623F68CB0A1DC33DF44
56055C250095B58DEC55C0A7B4988219F96AAD547189BB7028E32AC1902F0C8A
902E77143D190387235991874BE44FBAC7AED2240680D8C27E2EC2E938F262A9
3B105022AB69BA15DAFBC55E8A2863C69EFB65C9806DFDD60F8C1A8F40CD205B
C537BAF664D258C37075CB5695725956E9A16FC60D9129F882FCD021BF33CEEA
429F69820C5E004705D06D23B43DD0D9A8BB3CDA7C65164CE424273D435645D1
53DC2CF66C68C921A358521925BF1A4B3CC7F495F94C8C0031B24A8ED1D3849C
2FBD979890415923BBCEB51E6110166D3F91C17C38207E7C79FEE9B30A9D8F22
6F8D1F0A76C1D48A7B83C3E22C2AACCD5597A4669D9BB2F7D5087F3BF41175DB
11B211771A5F2B664F0AC483AA933B9976A1884111930AD5C08EF49BB60447EA
52FEF05799368B9CCDDFD4EAD1187DEDA7CA6B5A3EFD4A6DCDBE982153C5C7C7
7EB9805C5446CB532816806CCEFA571F2F7E74518A2CC6EBF5E7A65736C4142D
8652C1D7DAB43FF111CF51A064E1F58BA6A661A632271713AC176EE47B6310AC
5A4015272B802D6878DDA99AF85E946E565E9B2FB5771E2B069B4C5F9153F221
DBABA9E16BE2D5A3B927D0C83A8905332531D80C85F6B665825D669CA4C45245
C44A672D62A4008620F3B8EC735B400966844B1BA21E850C777E257370E2D27D
299827C4FF12D85D3A3C9333835032F10C7F0357470D43E3F45BBE84B16402EE
8AEEA198C5B19D143B96535C17B44C190333A8DEDA8EA1DEE63749A93E147907
3A0F0380B4C0BB0CBBBDEB38123007BA2991309A88F5BEE68EC4310726C16AE0
0EB4B81B20B3BC6D5CD913DC9839AE7E96CAB92B286D1807E3197FDC78936F24
49C69B85859CDC1B57E6092198DFA93998522E2E0CBE1D200A34FD4654282F52
DBB81C0BADED6F2889AC1F16E7C858C28B675DE63B3C4B2DE886080146DB4064
C38E0A2B56388F003A44C45C966DB1793F67FA31B9B8342F3A019A7D047FF801
F776AC884A9C729771F1CA1C271B0BA9663E88DC153D74F37A4EE8DACDBC577D
5DAED49CFB7A03C9B7C4615E33F8B45C69F24123ACB99F2C72AD8F3769036C4F
163503E155581E1C5B28026378393E5FDDC3E1B8AE667001A443CE1E32DBF4CC
DDD0C3DB8C3954632B94E72166037E8D888FC24DED012E5E72E3AC2BA7EF1E0E
F2F862919EF17811F3692E144EAB031342FA4EE2856B8D514AEBB83F6F2AD9B5
98BDB5BB859F3A512A65FA3ADBABD25E3282ADA8CDA9210C77928617446677A7
3DEBE6F91D704A74A301061E38E57953724D460BBDB54D7947BBF11CA27EA6DD
E0D083B19BFB4E9231075E868156AA4C8C2D4E72651234ADF6EB0FED816262D8
34E7633D278A65AA50C371C2C28B348B3426E2FC6F8ECEC7FF88823E417007A1
822AC7FA0DE4FF5597C8133832876E131630152745BDB3D29C242BCA6A560961
01DE58D42ABEFC3096B946CB14044B3C2E535BC03B3FE103DDE9DAB8F8A6B322
18795458FF7C6634813B4B4AD421D71D8EB69C9D8BBAE6CAF0E17E1701E547C9
4C4DA341ED39954D446F45B108597056326BAD581A486470FD93E1F0EB429363
5563B71BC179DDFE80D8D2FDF6DAB97F3BB2266C20F3EA5572831B1087C654AB
242C29CBC648C3109C51DEC8AF5C45D91A988D1F3C2AE319D938031067A18DAC
E942F1E08A035CAAA4C7765C842C2F1264332F3A54250075514A01F69AA52BC4
ABAC6C2E8FCEFC87ACA7616C121AE1AB73A4F16AB67EE1564D71BC20257B66AF
FE62C8148C4AB925D81F6DF2EF9EAA6D268B1E43B3156CCAC87BE30CEF59859D
02F779FBE8C7206C92F8E55C830CB5521D60F8533FCC3262A7A2D7716D14AAF2
C1061D9C72FD61F6F0578F46132FB6A9656010B6C353F90C4CFFA5FD928EE3D1
215DEF64BD2A28239E2AB147C3470FD69B5428E39088F9A0C33C2C35E1376C05
A10F44E6576EC7399D156088389E70429F646F57F74820FBC651B24E80FC72A8
27F19D07752575DB47F866DBF0D6DF3BCF3921E9BDC7A2F4EB7D367138B86265
EC1D7C3FE2F845A067A1B0A794C9F55AF7C375CB186D7F93ADDD0F6FBCCB84BC
A26FC4F6CD12E0BC35B7F269CE0E766C762F81AF137DF9CC16ABD4CD0D30FD17
46739E44B7B8C280AF33ACC841BFB85F09672B49E88D7A7EF01DE52B6270973E
38C739C9BD317EE8FA5574F1734A66338C56F96F5D601C0661853C491830615E
195CC00CAA96F4CFD105A1ED7F442E22D9E0ED6D0A06CEB26778ADED62ACD882
7859A339F8BD67B22B83B1805220B5A8988F25E87A1B5E782F16EEF97E5933EC
C49FBF643EBAE76DD4B1E4C31108473C7168C10241B0FAE83890B4746F64BFF6
A20854FAA0A98BC9F9FD42D29C2E34E4F941458D9561FA42A3C6A9C7A8CB09DC
DD1A24E4B6CF2F98431410CA470ECFD2C2A17993F3ED0B3BEB475890F2E170C4
004B1CF57522E284AC2CA5573215BE5C6910F523459602EC6A180AA2C7E1BC54
7C16967C6797094B9EA55E7317AD4A70F81DB59580C1A565D77B5A97D261E430
8126B647BC83CFF08746FE7515F6A96527D59C2154254C1FE3904364B021F150
D553B9A75564A3924D8B0E557FB32A4A280A1E262B8E9EB19EBF27DD02940868
2A7F06ECD8BEE9487AFFC8BBADA3BDF47DE8FC623CF8511755DE6E323ABE0B9E
DD1ABD92D2A7EBD109E7F61C0690CDA203A011E2D4721D3ACFB4EB373C12A5B6
2BA341363C7E82D9666FD695466ECACADA25FC5396D2F7CEEA4F6B03609DB7B3
046EDDBE9A4FDB1D31A447D3C063D976FD42FE49DED69453ADF12072F08EB432
BFFC4B5DB530603FF445F5B3E278846094774B6E343182C5B6AF73E5C0CB90B8
EBD9F6A1979D8DDFF57BA056F5AE58D8472C2CDC859189300667B2B9151F5F19
6A32652B92425976F729BDA158DC72F33E3F9A8AAEFF90713153014E340456A0
BE9A812AC053112CA9D00AD0C953AE63BF6D11D3C187C2106C77559288E7D9D4
364A5B461A7821296BC8EDB9D5E54078C71455A3C17A03048779C863A60B1926
CD8C91F3AFC2B4BD48437C1FB9A50C46B170B76B25EB949FC9BDAB780289611A
0F21E1B61FBF03B21911E3663BB1C0D1A076B5F1DBFAF8CD841D8F40DCF23DF3
82C501E3ED2F791E49BFE0D6CAD21A4EBB7796A679D44FB2CB1DCA4FFC5A9898
26102CB37094F2494AA75C4FC4D9A25B45A9208FEE3A783915A8627D57EEC7D4
181C2CB0FAB9475DAA6920A7A01E00E2FE442B373D42A1C5234A148563688D8E
93011D0A54E436C4C3D2A8473F1C1AD2F0B9D485BF0A2D3B18AAA136718DF94F
53FE07C9F39155082DA1770A37AE06B34FB9DBD6A34C68B3AD6DA0DFCFE49DE9
66FBD607F6005CF7EED9DFC1CFAE79817C9B20A2DC6A1C07BB21CB0FBD0D141F
E150A2E9949666AA65952830564FFD40C88F85B512F9B16E5F9A1376FD893927
561F57F631DB84C599022C0D6F443098737E100271867EE8DC54EEE6F9D35BDA
459761233B6B87DBD5E95824DAC0BC9AA912320FEF1CD6CEAE764FC664029C17
D565C440512A2B2803EA4B0DE48A2C5F5F42BD0134C040ACE2264FC63227BDB5
22EF0B1BF3987874BFF7AD2A5CD7B12BC5DEE2BF2067910F770C8A9C9CF91614
299A84F46CC6DD0F3A16E04282E4B77FD328D453DCB8C87EC68E69881A0FB99A
E11A38CBCA99E9F9540B94997774F2B1924B43276241BB099259974A7D82A553
3631521A20553981E819BBF030B95438EA76084B6663EA1D4FC6C862C87D80A4
57A5302A798C4D97D60D6380EB3A4EFFFB3A14A35B57E5D0B5D6FD014CC62BF4
CEFE81B15D1D5C6DF6386DFE17956F9A8A89F52A982C0CFCA7E4D4D5933FEA77
51BA9B4490F7215276C26CF53A95652858DDE917E1F263CDB1D71907BBA17F2C
C3E0F5D61914FF16B6464513632A5539EF383273F0477A9FF401A6B34F8E079C
5FF03BC855E58267C8E8822812E31EBF9A857F191B2A8262B8CCF459B4DC3677
22450CA073CBAD7FE9751D6FEA25AE759C82A608C4BF891B59AD64452C43940D
10AD9A15D74EABF9B6959A432386246860ED61B98FBB76FFB97FA1B530965471
D606DED9E0F31E885EB8633AB42C34A7932A77E6C4F539B8BCC60B1853E7020D
38D3F819DD2A9C794710115EED4C787D87797DF0788FE5290E011A949189F391
F6276E2CABE08743C6B8F6B26D5CE350021394716612115829AAF36F9FB97D8B
9B93059BF9C25E63653FBC52C3073BC2B5DD0502A05776E52BFB239647B76893
DC14B03DCCEC89B5C3103B05418635BBBE93042BE39F7F4BB351AD774360CFF5
B5D3ABC190B186BB7DC7F8AA3302052E433EF0216C0DBCD9523AC233DE427517
10CEAC3E2785D93570358B730530D1CFF8B244CE8BA2139572504940C75F5BFF
2E458263E9DD186275361993455959D0B0BFE5A4BB1DEA5A877CCC6254511BE7
56693591AC7A768187B315CD6EA548BE7D2720EAA92DCCE264D55418065B7ACA
FCA0CB7AC6DF64D10AC5CC5BB32CBA67C75E0326F87228B470C41CF6524A1E13
593F751AA6FCF270FFE0BB2F0684373ECB135061361930D6253771986DE521F6
2BF9DEE488D3544C5746704676DE2516FD681B7A9EA2DBD59B519522C3092561
2F862AB6508651E9CCEF824B5FADEC3DAFE5C14F92E8097A99296C4B74951437
DE19324D1B542DD22A06754D9F9AE066A7801464BFBC770B346D97D799644421
3972D169E59D19B3B7A618ED0BF6D0BFF6B96583DC430D6AF65E904A3D59DF13
D29D8BE394F8CC4B50A2418C44357DF43810BAA50B05BF92A46152A52798A7CA
34CEBC7D4C2E1F85618EC5B78FD6C64C8FD5A5B6F6D666DA60E80BC4BAE50EC8
ED8EAB95F83FA51DF621C6693677DE32BB23BB6ECB72E1246A0F6F09C8F38A1C
8BB180F8001650513790815A6085C6BD91B9C8B4ECE3CAD238C231BFC3B4433D
A17840E676ED2EA92C61FDA5FD4BC9C8E6E1531A94D44ED16B916F3FAF3D3C9F
FEAF66629E9B931DC380AF180427178E74D3AA5FFD70265235C289534AD65E20
9ACEE4D4B772F49558BFE675D7198AA28EDE0D9C92E39DA2299E12C69431AC2C
42A737EE0F4784B14FD544C70F4520E5CE6BBECECB5CB3CC4F85C8A7F259198C
40F8686E98953A2AF1A7E6B48A40513F9A9583B5504518448053F35CAF8BFAA9
EA20DDD8A0E49FA5B084AF43B318FAF385F34D685151939FD2784DCF97994476
D85DE98CBBA0D7F6FAAED2A6ABE14AAA2AB954E2A223DC22F3D268DB1B85D7F1
69575F3513CA99951A18614BCD54A8AA1AF324D723870087B92E05EAEE2081C6
97F00B590361056DE780C33D0290CF66F257E223C416138FE974C66A267A6C85
49E0584019749B81C5DFB8E0B6947F1A81B02AFAEFEEBD02273E6072C22F581E
1D9A10B55628ED03736FAA03854784C252A50085F1C008D56527B4C2E2FAA0A4
2C9E9871368E653A0B16356CE0FBFED150EEBDC2CC0E26953789F92F15AE9C19
B29AF6EC0A4593782A599B1207F7EFA824D8E5C2C5DDA6C0E18DD3A2A6A0ED9E
F3EE7FAA86EF319435FFC8189C5C3E15A6D3F668B023E631D146CC8D5C9E6041
AD6B07C7533F6AB848E296D83A2B530C44B73A5D2B48A554C5351714C28B6615
915C568F3A5CCA67ADF530C8EFAEA9E2209449D2B2747D0AC3B46F44C36B0FF2
73FF3E2BD4C9161EC444D8FD38DCFA35DF7D956CE18CED82532C40EFA25C2EC1
F658A0DEDDC8EA3AE9CF3B12889AB6CD0BDE7D23097A973B643F3DE8E9725842
0F9BA2C6507593A4182FFFA4677118F9ED22231833854AC07B89EF057B14C6AC
C71F9711BA4338F2A2AD57113BCD97515C0029E6301B381FA916F09145968713
2A3B6E3B5AE6BCCD2299EE5D96C837B338DAFD6F09402D77F23710DEE673E177
D6279AAAE2811E499CBEDA614CAF79588063FA5C12788CE21FC60A9895B6CF39
1CAB3B0F645A4734C6C3BC5D039C24DD75C7A4F038C15E7007939680912BE2B3
4B8CBD7B6D29896E8D1807150C2282F11907185DF77B2944603F47BEFFD06259
B256CD1A08F6239DEC7BD65B80885F9C3574339A61253C3234BF4437065EA511
7DB4A12E0531143C7167C7A9D37C948DDA434783CA0D396D75D56EFA3BE861CA
A13E235F1B8C2881C0B52D16CB8A3B5D19876C87443D4304D6F3AB7D26BCCAB9
FF0415A8B75B58341924151CB937CFC36D41161567F8C92B97CA2247E9B3EB6D
4F45AD488E1FCCDD50CF1D3983ABCE9C4AB4DA44F305FFFF5E4D629E0B405139
B02A2933D48F2811D04D3832B0E072BB3F1EA66DE3686AEE76097FBEEC1A2141
6A7129D479335923750FC317ED437B23EC47417FA7DD1FCA5B1881D3010A13D2
A635506B1FA0698030E72BBB025D25761B93A1F695935BB0B692AD2DEB1E194D
5602761EF93ECF4B718710DC766F4F59339EAA934DE86876E14ED2B661895B7C
B1149DC390CDE822C39AD876D362FA6C2D0F872D37B72E6CB9A06A3AAC7F87B1
FD8620A5A695852F2FF71CD16FA342EDBF0CEF41E2E467ED1518D82B08130625
B70FFA7747A25EFDB18D279D752527A0A701EBA73263002177A50BC18B9323EE
4C860F0706B63446BBB054A5EE5E2F541CA963B239C132D1D6FD41345C5F2391
0DA9055623EB7D6A90860842964426D9E506537B3F8B46F308F540EA78CD1DA2
FC5C50B24F253C617D02E4748303BBB47D11924A6E5F83FD4120B90A72D27884
5C61CD90B8C708A187AC3CE7845F5F94B2386FA989601D4F7118089EE5162F57
806D70EABB203271949B748AFEAB292710B36DDA99DD1D482E97365DF69C1A7F
E15AFFC4B1597ED69E0B7DB8D00A6FBBCA7D915592A91E74DFD0288406F013E6
BE1D537934E9CE2EA9A81F537A43DC6BE1C753F9FA8A6175F1F54CEBF6623A0D
3778084EF6168C677EB452EE23701F493A3471A97B87D1E05B7A9A4375CEB76B
0965B847115BB3BA70C55BEAF0DD74B7DDB1C29392E5B043E4DA6EFCD6E0A5DC
F8B578AE9000C3D2459ED8839921D02438D3DEE3AAFF71F24DCE4270C7419132
AD875B455B49C28B7DDE32F1F65EECC3EE1BA1D80EE2EEAD5623B9844C48C276
D1B7C4A6D19A8D1DF0A39EBDABA5F05CED1CC0198BDEFE54E7C7B694DCF60B0E
8B28F378F936C5B3548D5BAF4AE6947F6C8A74B4A96DEDAB9EA5F9B0D96A5EE9
61480A4012D06783C92E626F77D86584CB525966C0F9F9BB22062C13E6CF97DE
23AE16501D0288C086AFB9868B3D04233EDE83A6C320A335C1F51F1F8ED8819E
41741EBD5CFF2A4FA545841C487825CAA524C8B374AACE6AEAC8CB4182A887EF
4B294A690E988FF631518D02389D76585768F9161CD6D3512AB8567AEE1B94DE
DDDC4A1867AE2186BC6E6DA0AA29EA8B96B98E9CAC0F97387B731F44BF23D34F
A3304DE0E78D628646C32C1D95C0DAD9F3568A87F8D0B18758821E64E5EB234A
BA4AE8E96C42B9A16BA81C1FFCDF41CB32197A8E25EBCF8A1767E8A6CE641736
EE0A9D0672915763DEE4849B792A5910E700E25410E55B22BC3A9AFB83A41C44
ED889309684762110EB3D500B861A7254A6C9C626ED79CB8C51F862504C79A67
2F74F198392CC4472D6E86327F65B41BA8A3157A35F89F990B8B7F59CEDC4682
D857DE2C13A9B4C1AE31E9FFC1737B6553A15DF9F5F66F1571346ABD5D7CBD7A
792B3DB4780894591A4587DBA063C52E8210D6F5B3C5C23A6085587569E4693B
2E8739D9BD57A4D67E09514EB3A1D2DCF490D8CD7D1C12433ED9CE0AF54C7317
2253EFC739D753B0841DD7E3548148CF0E31AB988FF2A7D18056EDF50BA14C24
A407D408771341818CBD9212AC5931D8E1840AAC9A32FB888F23C3803C635D1C
E704C2DE46ABF1024BC23065C4640FC87709086E4A434207F479BC9EA4A12371
133EC86B9B844258D424E0262D0242F7ED6D90474F1A6EEC3F89043375CE0952
92A692487FF9CFD44D38D1FB686DC46B994D2A4928556628295F5FCEFB8951C6
44A10ABB7CBC3A579E69FD9DBBE5372C3BDA0817AEEC11C8E1544DA74B369425
D80E2A4707E6D30DCF02DECFD422DAB156ABDF73CBA7DE351875F3B4F3E7D363
C7296984A2980195E373EAF1B7B910D3B2222F8D726C4D375CBB8D129C460EA0
C959D24B00D4FA952D5BBEF79CBACF519FA548EE115C037EDF4C9BC1D95B9BE4
3C55E807C0451D07EF48F7D7113D0BDCF08281CED6B849E07BB06E20C03B12C1
716710829F9ADFBC56063DF8A8AD83D5F0CB523688BCB4217E6E6A1FF2A6BAA8
43D72F2C9D349C4FFD3912F57CB7769C53E80B57670829BBE3767D68053B9A33
CC27AF4957CB948EFC9C9BDC7C81CBA60F18579FA9E291A0182BBED304B28C82
5FBBAAF61C73D2254EFA2C214F641D5B258702019FE5AB5D67DC963748164DA6
075EBBC25B62AAE41F79CB127B2EE9F92CAFB5210AFC8B89C0BD4592065E2C28
776FF53A4B722AF9F76D07A57697783DD51678BD417E87277EECE68CE511975D
6EA01620C1382F104178F13DA99416A44446E1C74DCE0094E943DE786E3E6FCD
0CFF230636AD480930489C7BF83D9FA08D65A799C2A58ECB70EA6908CBE1A8F5
CBB8D88F034F86F540CA75E18B3418B2AF6A39105CAEAD241F10D58701D85CD1
A40FCD3B531971403231000ADC500B077823B96E4BD7DF008DAB4FFB6BA51707
574969502BA2AA0B0882ACC7B100FDAA8C5244A150B0058A931D781D7F0B4E3D
F22083B29AAEA996FA96EB4996C322B8682F3132AB6B4F22993741276FCFF1BD
223D46AF12EF390BB680E6E4F77B93A92506FE97E7082A297D73B58ED7675A42
38EBF56255CDF46D7B0388A47AF4466BF1C46FF15519F3D1F46E0E51096569A0
E70D2ABC3835718FBE023225DBE1639869AE0635F14888FCFAB40F74882518FC
E7A2AB992331F5DAC4D6211EB8C91970BA3B905CCF1AC633E989D31CCEECAEEF
3108F04636753D9ADADFD1C972916DFF38E77DCACD3AC2D5E846541D46E821DA
0D2BAB07A4D71B47E43D61A973B2DD17656FC7A76024634A00DFD31B1CAD22EE
23F0CBB61D5FC086C180BE55E6793D223B933212B31EA7EF5735801E77F23BEA
E4B836728DBF513A39E2DFE46440E4E5167E369AC65724E0E5783595FB04365C
D4B4A5FF216BD8534C4ED6F449EA1DF35151B7EC46C1C57BD1822BB6433FD76B
4D64E1B0BE07A7A91A713E41CF3900234FE10C2AB46EB843726BCB26A1EFDB64
A553BAE8CD4D081BD4056E6859A60EAF8516C879931633FCEDD3B873B5D63FDF
71131FFF47E4533DA66CD991640317676B337593E7F5A0D4B7460BFEB0A6E596
B32BB3D9CB607E556122464DE4CDC3C23E1E67DA8C52AB5B4BE487FC32BC3FE8
23B2D8C842A02BE454CAE7D0FB255F2613AD18E2A9BD240BBCE9431576046FEB
78BCD800EEF2627BAFE016A3D11FC76133074BA8AF90EC2DC348618B10894105
3DFA51F0A495337E3BF9DE91AA8EF1F58FA1C8E574472460BC3FBC55FCEC99E2
ECE78B802C6FE79F7AF06FD9AB3F03DA04B616B9EDA1AFAAF1C4A370ADAA462A
383A082414F9FCB0C4F2AC9F992E1D2B3EBC3E6BF68BDD9E1EFD6882435B7E12
781C2231676F2733F68B7684FC00F06E195C0E3F2B12B433D7DA1F634865DA6E
5ED757306D492C4F6A7635B85ECF70EF5733EDB26731D14E585E7800FA38AE1A
02A13EEE5C11FF3C9C89413D3CCD820A4739CD29440EDB70BA3F23E992CF17BD
F505F6FF0B60ABE838451CC125E6CA41F34403C404C616BA390DC80C94AF55F5
F1CFF40A298F1BCC155CDC51FEF816434922D9DC361A7DB1148863EFC6E6FE38
F8BBAB337157A13242C72515F371A7624AB93C2080AD85016BD6ABB64FDA0F71
13BB57299B5086E73627CB0655FCEC8D83BCED6066FCC248C4421CD919741ECA
9308D44A93D148900E639D750E0DBF8060AEAD5106824D748D9C085BAC95E031
1FEFCC8BE299B33BBD923AFC2F0AE54C0459012F2A2D52641CF279206DF52D94
3BC285B007D1135D873B767527B90246E1D373127A15D692386B5122DE5AD416
6295BEFB34720CC83A93C59BA87A95B85F5B50ABED1C13D4AB97021214DF4A3A
95A986511C21D348C848091F48D50C7AE6A25660CCDC503B72685159AE2CA3E4
9549FE100E5300AD8B40952508747952D8CF3C4AA657C597C92A29A2AD9E74E2
FEE36FDB709AA2C7C694758F1E9DCE8B6FCA15CDD5016F5E3D23FBFFA1C5342B
906E67D9805E5312591A36498A5B10DE7C78E42BF8D96DE9881AC1C5A4C221EB
BB2F297793E98BBDECC6C2F83A8F4C21B9409705CBE13FCF9494C62DC2469933
7CD5BB95961473E81E402CE45C2BE6C33254025F8927684AF8EDF9F80AF6361A
4CCED860BE5F36B8F5D52DEE12690CDE67C1F51A7920C0EBD0419A0C1C3B6BE9
4B3B2F1EC46D96D8313109C865994880EE16C09C248E4864652E82B8C4A2393D
4D0BE642E7BD08E2BE2A19E385AEE3BB6CC89810621BF8C37540BAB98133099D
37934E53C8E5516D88648658A88CFF5973C197BD8B80AA264225523A751F0058
40B3FE91C2BF89F5C310B469D987DAEC3B710A149F819DCB73017FC477FB8F21
6F563C8B7D6E6FA07CAF120C7A63C7DAEDAE58F80B542B771E373856743115B4
2D6702AEFD11E8035675C26F7CDAEA42D0257C6F1B1A420747037A30757D449D
4C148E7AF822225F4D7719FDE54A0405646F9B1F28D4DAC6EA0A7488258617AE
EC368589A1D77372D55A15D051387913C0B5E5D50DDEC3C97E5A70E1F054BD3B
53C221B6928DDCE92D182D2C7AFED35347C0157A55D40A5863D28C6F89803E43
5C186FEBB14539C4DAED3F69FBE620D725082C1087EB5C09CA816E1B5180318F
20190293C23108881B1AB2E9982A380BF172C5E39CFE35B05ED364F8C5FB7B33
1D3635BB72FF5C138731D481C378E7913B070E54140D17946DAFEC6951B0A126
ACCDEB6D820012F08389D05F7072DF22BB7DED185C4C492275A4056DCAC97B49
25EAD69D18354ADFA7E57D93FDAE4F504D5B5147B28E42093B9638EAB801E59A
C75B7F0D54621EFE18FE97D6486C576073F5F3EC04B988C442ACC26152348CC5
44F014E35ECEFF5F02E39D21366D1A90353E93F7F8547563ACB1EECF76159F3A
DD205D8D39C200177710C0D55828DD31E5DC4D59BD9C69D37C0162C1B79D2B70
F741DD8FAEC13CB24BBB1B6D8B0A418897482905363C2DA465FA60333794699F
8C26E94415C630266948B05AE22F09156850623FD9FFC20A81E18DB7B8D4AF37
B9EACB0E38FC6D9CEB0465BC2DB6C99DA8FE4D423B34DA4C73E3A65AFE12D84D
C81C9CD5538BD0E174908691E7AC8BA5D55F9FF343457D8A6A6032DD97EA2127
DF25082DA76E6764C42E4A78712F2920EDD7EB42AB7261BF24C65146E6C2812A
6ED42D44992CCF7B181ED404A47838BFF71A949D9A699B6193247FF51955B848
22891861A758D6B35808D09F2B9E266D518653702ED1BE8706C4ED9677E3B4B5
19251B9EB57549BBC1F260B1EC89238704158731BA0EEEF1013B9FF64018ACD3
0A692BAC2D5370EA840CD51128BA9CCD70F89C20AFF6BF0793966C612BB017E7
6053E215C094B1B150925CBC6548117345FE11816038A290D9ADC647BA21010B
0996B99DE35FE8D20D249A9E801D789D5C1128ABDBCBE32044AF54E165803AC9
59B98D26BA7B93C8A08608293BAB1FEFA7E4AA0569C94B2876D71756B0EED6D8
6D7D2117044E2905C8FC7FC1DFB1FF48BFA227EED22C3856AFBAD2AE03BFB3E9
2D5A5DBD3DBB115B311E105565C49C09D660BD2818D2F83D8D44CC386BA9D1DD
02C200C7FA1FBD85DE806976AA1D37BFACBAFC68991EE1505DDA8C11EEA077BE
CDC111D4F773C28F892CA94D64972D9469FDBB1176F10C47CCF4936BA4755750
C1BCCD1668A6887A6F8AD94CD1425D53D3C346AE1F0B66231610CF1948C20906
1EFB88642CF6D7BE56DB86378C8A0D95DB6FF72A504E563509394AF4B66C89CE
6B13E69FB38EE4E4DA759F973ADFD8C90E233DB15AF6E00668E0262CF0EBBAF0
4C0658CA553C4DDD84EC425286110193538A1C239067ABB52EA19F80AED2A0AD
53D824C8F9658910B5489767EAAD9368C425C38DAC80915AD2E16D0D4C08E2A9
4F627700A3420BC168011D1EFB6D8261D18733275CBE11D0C5CC5CC911576FD4
CC08A40B928D80E2945E068D81E4C5C82272FC1930C1A7642DD46DD3F33BDB39
2926083D4D70F2B0CB0AC44C8345ACCD9695A7704E9ADF460902A5D380D64134
935D3182900C8612A33F8E6776830DDFDCDDDA7A3CCA9E51C777278A63D4E011
A18B9FB97E3E659C444BF8B26578C0FF0039569338769246DD5101F49AB808E1
96991FE669E6A44B7D77094BD09F55EA150CB536E3C99C62A268F130167824B1
809FEE990560D5E4A5735C31317B91A7F35C0BA3C384A14B704B62744F4A1043
BA8B0BD1DDD242A59E1C3C54F31A18799CA6DEF144440946EE8567EAEB06EB5B
91BCF6C2C76B1DD7F82688A7511F9AD16586C625564C43E37A2223CC67535464
EFCDF83A0D9707BCDF24064496EFC3F4F9C72DC0C9E43D6C6A0290DCA90A5FEF
3BE7F9D3134BD1C64B9CE3FC2A8E8B478FD00D4BA1EC40FAEC31D95D0EE14E5B
0940C25BEF8EF1557995FBBD3544E7AB630D2EFF0EF79EDC106F4EDCE84D8E9B
CED9561E730DD8E19C339E4FCC8B1FB5853FAAB779BBC08D0F4BD0FBF332E179
D8843972AABD5AA3D6A2EFFF84E1DAF13B1E5084488AC2C2ACFCD83FC5328D2E
DDF8925C25CFE64B8BF42280EB7A1FAC220EEE5097C9F5A28A0BB479F70BD542
3D71292787423CBF330090E872D8E68BF9E012EB32A8FFB76B58163686CECF01
DB9941FDB6
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
TeXDict begin 40258437 52099154 1000 600 600 (anatomy-for.dvi)
@start /Fa 133[362 2[571 2[255 293 296 1[406 371 430
650 221 2[229 3[333 406 323 397 403 55[260 254 40[{
 AutoEnc_7grukw4ftfgbx23ssythacmksg ReEncodeFont }18
830.22 /LinLibertineTI rf /Fb 130[400 1[400 1[400 4[400
1[400 2[400 2[400 2[400 1[400 400 400 400 2[400 9[400
7[400 2[400 2[400 400 400 1[400 400 6[400 400 400 5[400
1[400 400 1[400 3[400 400 1[400 400 40[{
 AutoEnc_ai7sfw4ev2rw3jfdy46mgxdj6f ReEncodeFont }32
664.176 /DejaVuSansMono rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
 end
%%EndSetup
TeXDict begin 1 0 bop 0 TeXcolorgray 0 15300 a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 0 15300
a 0 15300 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 0 15300 a 0 15300 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 0 15300 a 0 15300 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 0
15300 a 0 15300 a
tx@Dict begin gsave CM STV CP newpath moveto 3.0 neg 0 rmoveto clip
setmatrix end
 0 15300 a 0 15300 20271 15300 v 20271
15300 a
currentpoint grestore moveto
 20271 15300 a 450 15300 a
tx@Dict begin { 0.0 0.0 } PutCoor PutBegin  end
 450 15300 a 1 0 0 TeXcolorrgb
-9269 x Fb(for)400 b(\()p 0 TeXcolorgray 399 w(i)g(=)g(0)p
1 0 0 TeXcolorrgb 400 w(;)p 0 TeXcolorgray 400 w(i)f(<)h(3)p
1 0 0 TeXcolorrgb 400 w(;)p 0 TeXcolorgray 400 w(i++)p
1 0 0 TeXcolorrgb(\))f({)p 0 TeXcolorgray 0 TeXcolorgray
1631 7732 a(digitalWrite\(redLED,)f(HIGH\);)p 0 TeXcolorgray
0 TeXcolorgray 1631 9432 a(delay\(250\);)p 0 TeXcolorgray
0 TeXcolorgray 1631 11132 a(digitalWrite\(redLED,)g(LOW\);)p
0 TeXcolorgray 0 TeXcolorgray 1631 12833 a(delay\(250\);)p
0 TeXcolorgray 1 0 0 TeXcolorrgb 450 14533 a(})p 0 TeXcolorgray
450 15300 a
tx@Dict begin  PutEnd  end
 450 15300 a 450 15300 a
tx@Dict begin { 411.93932 1691.11864 } PutCoor PutBegin  end
 450 15300 a 0 0 1
TeXcolorrgb -1688 15288 a Fa(initialization)p 0 TeXcolorgray
450 15300 a
tx@Dict begin  PutEnd  end
 450 15300 a 450 15300 a
tx@Dict begin {  /ifStar false def /radius1 60.0 def /radius2 60.0
def /Alpha 542.025 1192.45499 281.85365 1192.45499 3 -1 roll sub 3
1 roll exch sub atan def gsave STV CP T /ps@rot Alpha 0 add 90 sub
def grestore /Length 542.025 1192.45499 281.85365 1192.45499 Pyth2
def /Left { Length 0.5  mul } bind def /Right { Length Left sub } bind
def /Width 1.6 def /pop4 { pop pop pop pop } def gsave [ Alpha cos
Alpha sin Alpha sin neg Alpha cos 542.025 1192.45499 ] concat 0 0 moveto
0 radius2 neg radius2 radius2 neg radius2 arcto pop4 Left radius2 sub
radius1 sub 0 rlineto Left radius2 neg Left radius2 radius1 add neg
radius1 arcto pop4 currentpoint /y@Label ED /x@Label ED Left radius2
neg Left radius1 add radius2 neg radius1 arcto pop4 Right radius2 sub
radius1 sub 0 rlineto Length radius2 neg Length 0 radius2 arcto pop4
Length radius2 Width add neg Length radius2 sub radius2 Width add neg
radius2 arcto pop4 Right radius2 sub radius1 sub neg 0 rlineto Left
radius1 add Width radius1 add radius2 add neg radius1 90 180 arc Left
radius1 sub Width radius1 add radius2 add neg radius1 0 90 arc Left
radius2 sub radius1 sub neg 0 rlineto radius2 Width neg radius2 270
180 arcn 0 0 lineto gsave ifStar { 0 0 1  setrgbcolor }{ 0  setgray
} ifelse fill grestore 4.33546 setlinewidth 0 0 1  setrgbcolor stroke
0 0 moveto grestore /Dh radius1 radius2 add Width add def 542.025 1192.45499
281.85365 1192.45499 3 -1 roll sub 3 1 roll exch sub 0.5  mul exch
0.5  mul 542.025 1192.45499 3 -1 roll add Dh Alpha cos mul sub 0.0
sub 3 1 roll add Dh Alpha sin mul add 0.0 add exch  108.405 div exch
108.405 div exch    108.405 mul exch 108.405 mul exch  } PutCoor PutBegin
 end
 450 15300 a 450 15300
a
tx@Dict begin ps@rot  RotBegin  end
 450 15300 a 450 15300 a
tx@Dict begin RotEnd  end
 450 15300 a 450 15300 a
tx@Dict begin  PutEnd  end
 450
15300 a @beginspecial @setspecial
  tx@Dict begin STP newpath 4.33546 SLW 0 0 1  setrgbcolor  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  5.42058 SLW 0 0 1  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 411.93932 1669.43631
411.93932 1306.28056   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5
2.  CLW mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 5.42058 SLW 0 0 1  setrgbcolor  1. .setopacityalpha   0
 setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 450 15300 a
tx@Dict begin { 823.87865 1517.66998 } PutCoor PutBegin  end
 450 15300 a 0 0 1
TeXcolorrgb -1491 15295 a Fa(termination)p 0 TeXcolorgray
450 15300 a
tx@Dict begin  PutEnd  end
 450 15300 a 450 15300 a
tx@Dict begin {  /ifStar false def /radius1 60.0 def /radius2 60.0
def /Alpha 921.44249 1192.45499 672.11066 1192.45499 3 -1 roll sub
3 1 roll exch sub atan def gsave STV CP T /ps@rot Alpha 0 add 90 sub
def grestore /Length 921.44249 1192.45499 672.11066 1192.45499 Pyth2
def /Left { Length 0.5  mul } bind def /Right { Length Left sub } bind
def /Width 1.6 def /pop4 { pop pop pop pop } def gsave [ Alpha cos
Alpha sin Alpha sin neg Alpha cos 921.44249 1192.45499 ] concat 0 0
moveto 0 radius2 neg radius2 radius2 neg radius2 arcto pop4 Left radius2
sub radius1 sub 0 rlineto Left radius2 neg Left radius2 radius1 add
neg radius1 arcto pop4 currentpoint /y@Label ED /x@Label ED Left radius2
neg Left radius1 add radius2 neg radius1 arcto pop4 Right radius2 sub
radius1 sub 0 rlineto Length radius2 neg Length 0 radius2 arcto pop4
Length radius2 Width add neg Length radius2 sub radius2 Width add neg
radius2 arcto pop4 Right radius2 sub radius1 sub neg 0 rlineto Left
radius1 add Width radius1 add radius2 add neg radius1 90 180 arc Left
radius1 sub Width radius1 add radius2 add neg radius1 0 90 arc Left
radius2 sub radius1 sub neg 0 rlineto radius2 Width neg radius2 270
180 arcn 0 0 lineto gsave ifStar { 0 0 1  setrgbcolor }{ 0  setgray
} ifelse fill grestore 4.33546 setlinewidth 0 0 1  setrgbcolor stroke
0 0 moveto grestore /Dh radius1 radius2 add Width add def 921.44249
1192.45499 672.11066 1192.45499 3 -1 roll sub 3 1 roll exch sub 0.5
 mul exch 0.5  mul 921.44249 1192.45499 3 -1 roll add Dh Alpha cos
mul sub 0.0 sub 3 1 roll add Dh Alpha sin mul add 0.0 add exch  108.405
div exch 108.405 div exch    108.405 mul exch 108.405 mul exch  } PutCoor
PutBegin  end
 450 15300 a 450 15300
a
tx@Dict begin ps@rot  RotBegin  end
 450 15300 a 450 15300 a
tx@Dict begin RotEnd  end
 450 15300 a 450 15300 a
tx@Dict begin  PutEnd  end
 450
15300 a @beginspecial @setspecial
  tx@Dict begin STP newpath 4.33546 SLW 0 0 1  setrgbcolor  end
 
@endspecial @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  5.42058 SLW 0 0 1  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 796.77739 1506.82881
796.77739 1306.28056   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5
2.  CLW mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 5.42058 SLW 0 0 1  setrgbcolor  1. .setopacityalpha   0
 setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 450 15300 a
tx@Dict begin {  /ifStar false def /radius1 30.0 def /radius2 60.0
def /Alpha 1203.29614 1192.45499 1040.68864 1192.45499 3 -1 roll sub
3 1 roll exch sub atan def gsave STV CP T /ps@rot Alpha 0 add 90 sub
def grestore /Length 1203.29614 1192.45499 1040.68864 1192.45499 Pyth2
def /Left { Length 0.5  mul } bind def /Right { Length Left sub } bind
def /Width 1.6 def /pop4 { pop pop pop pop } def gsave [ Alpha cos
Alpha sin Alpha sin neg Alpha cos 1203.29614 1192.45499 ] concat 0
0 moveto 0 radius2 neg radius2 radius2 neg radius2 arcto pop4 Left
radius2 sub radius1 sub 0 rlineto Left radius2 neg Left radius2 radius1
add neg radius1 arcto pop4 currentpoint /y@Label ED /x@Label ED Left
radius2 neg Left radius1 add radius2 neg radius1 arcto pop4 Right radius2
sub radius1 sub 0 rlineto Length radius2 neg Length 0 radius2 arcto
pop4 Length radius2 Width add neg Length radius2 sub radius2 Width
add neg radius2 arcto pop4 Right radius2 sub radius1 sub neg 0 rlineto
Left radius1 add Width radius1 add radius2 add neg radius1 90 180 arc
Left radius1 sub Width radius1 add radius2 add neg radius1 0 90 arc
Left radius2 sub radius1 sub neg 0 rlineto radius2 Width neg radius2
270 180 arcn 0 0 lineto gsave ifStar { 0 0 1  setrgbcolor }{ 0  setgray
} ifelse fill grestore 4.33546 setlinewidth 0 0 1  setrgbcolor stroke
0 0 moveto grestore /Dh radius1 radius2 add Width add def 1203.29614
1192.45499 1040.68864 1192.45499 3 -1 roll sub 3 1 roll exch sub 0.5
 mul exch 0.5  mul 1203.29614 1192.45499 3 -1 roll add Dh Alpha cos
mul sub 0.0 sub 3 1 roll add Dh Alpha sin mul add 0.0 add exch  108.405
div exch 108.405 div exch    108.405 mul exch 108.405 mul exch  } PutCoor
PutBegin  end
 450 15300 a 450
15300 a
tx@Dict begin ps@rot  RotBegin  end
 450 15300 a 450 15300 a
tx@Dict begin RotEnd  end
 450 15300 a 450 15300
a
tx@Dict begin  PutEnd  end
 450 15300 a @beginspecial @setspecial
  tx@Dict begin STP newpath 4.33546 SLW 0 0 1  setrgbcolor  end
 
@endspecial
450 15300 a
tx@Dict begin { 1111.15123 1344.22131 } PutCoor PutBegin  end
 450 15300 a 0 0 1 TeXcolorrgb -951 15295
a Fa(iteration)p 0 TeXcolorgray 450 15300 a
tx@Dict begin  PutEnd  end
 450 15300
a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { } def
/ArrowInside { } def  5.42058 SLW 0 0 1  setrgbcolor  /ArrowA { moveto
} def /ArrowB { } def /ArrowInside { } def  [ 1121.99239 1333.3818
1121.99239 1279.1793   /Lineto /lineto load def 0  setlinejoin false
 NArray n 0 eq not { n 1 eq { 0 0 /n 2 def } if () length 0 gt { 1.5
2.  CLW mul add dup 1.4  mul exch 0.4 mul neg add /arrowlength exch
def 4 copy /y1 ED /x1 ED /y2 ED /x2 ED /Alpha y2 y1 sub x2 x1 sub Atan
def ArrowA x1 Alpha cos arrowlength mul add y1 Alpha sin arrowlength
mul add /n n 1 sub def n { 4 copy /y1 ED /x1 ED /y2 ED /x2 ED x1 y1
0.5  1 gt { /Alpha y2 y1 sub x2 x1 sub Atan def /ArrowPos 0.  def /dArrowPos
0.5  abs def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def x1 Alpha
cos ArrowPos mul add y1 Alpha sin ArrowPos mul add ArrowInside pop
pop } repeat }{ /ArrowPos 0.  def /dArrowPos 1. 1 gt {1.0 1. 1.0 add
div }{0.5 } ifelse def 1.  cvi { /ArrowPos ArrowPos dArrowPos add def
x2 x1 sub ArrowPos mul x1 add y2 y1 sub ArrowPos mul y1 add ArrowInside
pop pop } repeat } ifelse pop pop Lineto } repeat }{ ArrowA /n n 2
sub def n { Lineto } repeat } ifelse CP 4 2 roll ArrowB L pop pop }
if   gsave 5.42058 SLW 0 0 1  setrgbcolor  1. .setopacityalpha   0
 setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 450 15300 a
tx@Dict begin {  /ifStar false def /radius1 30.0 def /radius2 60.0
def /Alpha 1452.62631 260.17133 1452.62631 997.32565 3 -1 roll sub
3 1 roll exch sub atan def gsave STV CP T /ps@rot Alpha 0 add 90 sub
def grestore /Length 1452.62631 260.17133 1452.62631 997.32565 Pyth2
def /Left { Length 0.5  mul } bind def /Right { Length Left sub } bind
def /Width 1.6 def /pop4 { pop pop pop pop } def gsave [ Alpha cos
Alpha sin Alpha sin neg Alpha cos 1452.62631 260.17133 ] concat 0 0
moveto 0 radius2 neg radius2 radius2 neg radius2 arcto pop4 Left radius2
sub radius1 sub 0 rlineto Left radius2 neg Left radius2 radius1 add
neg radius1 arcto pop4 currentpoint /y@Label ED /x@Label ED Left radius2
neg Left radius1 add radius2 neg radius1 arcto pop4 Right radius2 sub
radius1 sub 0 rlineto Length radius2 neg Length 0 radius2 arcto pop4
Length radius2 Width add neg Length radius2 sub radius2 Width add neg
radius2 arcto pop4 Right radius2 sub radius1 sub neg 0 rlineto Left
radius1 add Width radius1 add radius2 add neg radius1 90 180 arc Left
radius1 sub Width radius1 add radius2 add neg radius1 0 90 arc Left
radius2 sub radius1 sub neg 0 rlineto radius2 Width neg radius2 270
180 arcn 0 0 lineto gsave ifStar { 0 0 1  setrgbcolor }{ 0  setgray
} ifelse fill grestore 4.33546 setlinewidth 0 0 1  setrgbcolor stroke
0 0 moveto grestore /Dh radius1 radius2 add Width add def 1452.62631
260.17133 1452.62631 997.32565 3 -1 roll sub 3 1 roll exch sub 0.5
 mul exch 0.5  mul 1452.62631 260.17133 3 -1 roll add Dh Alpha cos
mul sub 0.0 sub 3 1 roll add Dh Alpha sin mul add 0.0 add exch  108.405
div exch 108.405 div exch    108.405 mul exch 108.405 mul exch  } PutCoor
PutBegin  end

450 15300 a 450 15300 a
tx@Dict begin ps@rot  RotBegin  end
 450 15300 a 450 15300 a
tx@Dict begin RotEnd  end
 450 15300
a 450 15300 a
tx@Dict begin  PutEnd  end
 450 15300 a @beginspecial @setspecial
  tx@Dict begin STP newpath 4.33546 SLW 0 0 1  setrgbcolor  end
 
@endspecial
450 15300 a
tx@Dict begin { 1561.03131 628.74931 } PutCoor PutBegin  end
 450 15300 a 0 0 1 TeXcolorrgb -332 x Fa(statement\()-10
b(s\))450 16014 y(wrapp)6 b(e)g(d)208 b(in)g(braces)p
0 TeXcolorgray 450 15300 a
tx@Dict begin  PutEnd  end
 450 15300 a eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF

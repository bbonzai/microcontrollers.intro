%!PS-Adobe-2.0 EPSF-2.0
%%Creator: dvips(k) 5.995 Copyright 2015 Radical Eye Software
%%Title: definefunc2.dvi
%%CreationDate: Mon Jun  6 12:20:47 2016
%%BoundingBox: -130 -685 2241 721
%%DocumentFonts: DejaVuSansMono LinLibertineTI
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -E -o definefunc2.eps definefunc2
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2016.06.06:1220
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 919 2014-05-19 18:42:47Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.23, 2014/07/31
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def

%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
  x1 y2 lineto 
  x2 y2 lineto 
  x2 y1 lineto
  x1 y1 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%    /Helvetica findfont b scalefont setfont 
    /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 919 2014-05-19 18:42:47Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.04, 2013/10/26
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 801 2013-07-09 18:10:41Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: pst-text.pro 0 0
%!
% PostScript header file pst-text.pro
% Version 1.0, 2005-11-29 (hv)
% For distribution, see pstricks.tex.

/tx@TextPathDict 40 dict def
tx@TextPathDict begin

% Syntax:  <dist> PathPosition -
% Function: Searches for position of currentpath distance <dist> from
%           beginning. Sets (X,Y)=position, and Angle=tangent.
/PathPosition
{ /targetdist exch def
  /pathdist 0 def
  /continue true def
  /X { newx } def /Y { newy } def /Angle 0 def
  gsave
    flattenpath
    { movetoproc }  { linetoproc } { } { firstx firsty linetoproc }
    /pathforall load stopped { pop pop pop pop /X 0 def /Y 0 def } if
  grestore
} def

/movetoproc { continue { @movetoproc } { pop pop } ifelse } def

/@movetoproc
{ /newy exch def /newx exch def
  /firstx newx def /firsty newy def
} def

/linetoproc { continue { @linetoproc } { pop pop } ifelse } def

/@linetoproc {
  /oldx newx def /oldy newy def
  /newy exch def /newx exch def
  /dx newx oldx sub def
  /dy newy oldy sub def
  /dist dx dup mul dy dup mul add sqrt def
  /pathdist pathdist dist add def
  pathdist targetdist ge
  { pathdist targetdist sub dist div dup
    dy mul neg newy add /Y exch def
    dx mul neg newx add /X exch def
    /Angle dy dx atan def
    /continue false def
  } if
} def

/TextPathShow { 
  /String exch def
  /CharCount 0 def
% hv begin 2005-11-29   1.00
%   String length
%   { String CharCount 1 getinterval ShowChar
%     /CharCount CharCount 1 add def
   /CharSize 1 def
   currentfont /FontType get 0 eq
   { currentfont /FMapType get dup 2 eq exch dup 5 eq exch 9 eq or or
     { /CharSize 2 def} if
   } if
   String length CharSize idiv
   { String CharCount CharSize getinterval ShowChar
     /CharCount CharCount CharSize add def
% hv end 2005-11-29   1.00
  } repeat
} def

% Syntax: <pathlength> <position> InitTextPath -
/InitTextPath
{ gsave
    currentpoint /Y exch def /X exch def
    exch X Hoffset sub sub mul
    Voffset Hoffset sub add
    neg X add /Hoffset exch def
    /Voffset Y def
  grestore
} def

/Transform
{ PathPosition
  dup
  Angle cos mul Y add exch
  Angle sin mul neg X add exch
  translate
  Angle rotate
} def

/ShowChar { 
  /Char exch def
  gsave
    Char end stringwidth
    tx@TextPathDict begin
    2 div /Sy exch def 2 div /Sx exch def

%%%  MV 10-09-99 00:36
    /sc?currentpoint where {pop sc?currentpoint} {currentpoint} ifelse
%   currentpoint

    Voffset sub Sy add exch
    Hoffset sub Sx add
    Transform
    Sx neg Sy neg moveto
    Char end tx@TextPathSavedShow
    tx@TextPathDict begin
  grestore
  Sx 2 mul Sy 2 mul rmoveto
} def
%
end
% END pst-text.pro

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 40 2014-07-25 06:46:27Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.15, 2014/01/27.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%%%%  EMPTY lines are not aload!!! Problem with pst-eps -> \par
%
%
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
% /startGlobal { true setglobal globaldict begin } bind def
% /endGlobal { end false setglobal } bind def
end
/tx@NodeDict 400 dict def tx@NodeDict begin
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
%
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
           /NAngle yyB yyA sub xxB xxA sub Atan def 
} def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
%
/HPutLines { HPosBegin yB yA ge 
  { /check { le } def } { /check { ge } def } ifelse 
  /xxA xA def 
  /yyA yA def 
  mark xB yB LPutVar 
    { dup Y check { exit } { /yyA ED /xxA ED } ifelse } 
  loop 
  /yyB ED /xxB ED cleartomark HPosEnd 
} def
%
/VPosBegin { 
  xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
%
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def 
} def
%
/NCCoor { 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def
  GetEdgeA GetEdgeB 
  /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def 
  /LPutPos { LPutVar LPutLine } def 
  /HPutPos { LPutVar HPutLine } def 
  /VPutPos { LPutVar VPutLine } def 
  LPutVar 
} def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: dejavumono_t1-type1.enc 0 0
% THIS FILE WAS AUTOMATICALLY GENERATED -- DO NOT EDIT

%%AutoEnc_ai7sfw4ev2rw3jfdy46mgxdj6f
% Encoding created by otftotfm on Sun Sep 22 17:45:43 2013
% Command line follows encoding
/AutoEnc_ai7sfw4ev2rw3jfdy46mgxdj6f [
%00
  /grave /acute /circumflex /tilde /dieresis /hungarumlaut /ring /caron
  /breve /macron /dotaccent /cedilla /ogonek /quotesinglbase /guilsinglleft /guilsinglright
%10
  /quotedblleft /quotedblright /quotedblbase /guillemotleft /guillemotright /hyphen /emdash /.notdef
  /.notdef /dotlessi /dotlessj /.notdef /fi /fl /.notdef /.notdef
%20
  /uni2423 /exclam /quotedbl /numbersign /dollar /percent /ampersand /quoteright
  /parenleft /parenright /asterisk /plus /comma /hyphen /period /slash
%30
  /zero /one /two /three /four /five /six /seven
  /eight /nine /colon /semicolon /less /equal /greater /question
%40
  /at /A /B /C /D /E /F /G
  /H /I /J /K /L /M /N /O
%50
  /P /Q /R /S /T /U /V /W
  /X /Y /Z /bracketleft /backslash /bracketright /asciicircum /underscore
%60
  /quoteleft /a /b /c /d /e /f /g
  /h /i /j /k /l /m /n /o
%70
  /p /q /r /s /t /u /v /w
  /x /y /z /braceleft /bar /braceright /asciitilde /hyphen
%80
  /Abreve /Aogonek /Cacute /Ccaron /Dcaron /Ecaron /Eogonek /Gbreve
  /Lacute /Lcaron /Lslash /Nacute /Ncaron /Eng /Ohungarumlaut /Racute
%90
  /Rcaron /Sacute /Scaron /Scedilla /Tcaron /Tcommaaccent /Uhungarumlaut /Uring
  /Ydieresis /Zacute /Zcaron /Zdotaccent /IJ /Idotaccent /dcroat /section
%A0
  /abreve /aogonek /cacute /ccaron /dcaron /ecaron /eogonek /gbreve
  /lacute /lcaron /lslash /nacute /ncaron /eng /ohungarumlaut /racute
%B0
  /rcaron /sacute /scaron /scedilla /tcaron /tcommaaccent /uhungarumlaut /uring
  /ydieresis /zacute /zcaron /zdotaccent /ij /exclamdown /questiondown /sterling
%C0
  /Agrave /Aacute /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla
  /Egrave /Eacute /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis
%D0
  /Eth /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /OE
  /Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn /.notdef
%E0
  /agrave /aacute /acircumflex /atilde /adieresis /aring /ae /ccedilla
  /egrave /eacute /ecircumflex /edieresis /igrave /iacute /icircumflex /idieresis
%F0
  /eth /ntilde /ograve /oacute /ocircumflex /otilde /odieresis /oe
  /oslash /ugrave /uacute /ucircumflex /udieresis /yacute /thorn /germandbls
] def
% Command line: 'otftotfm --no-default-ligkern --encoding=fontools_t1 --pl
% --map-file=DejaVuSansMono.map --no-updmap --no-type1
% --coding-scheme=EXTENDED TEX FONT ENCODING - LATIN
% DejaVuSansMono-BoldOblique.ttf DejaVuSansMono-BoldOblique-tlf-t1'

%%EndProcSet
%%BeginProcSet: lbtn_7grukw.enc 0 0
% THIS FILE WAS AUTOMATICALLY GENERATED -- DO NOT EDIT

%%AutoEnc_7grukw4ftfgbx23ssythacmksg
% Encoding created by otftotfm on Mon Nov 26 14:24:44 2012
% Command line follows encoding
/AutoEnc_7grukw4ftfgbx23ssythacmksg [
%00
  /grave /acute /circumflex /tilde /dieresis /hungarumlaut /ring /caron
  /breve /macron /dotaccent /cedilla /ogonek /quotesinglbase /guilsinglleft /guilsinglright
%10
  /quotedblleft /quotedblright /quotedblbase /guillemotleft /guillemotright /endash /emdash /.notdef
  /perthousandzero /dotlessi /uni0237 /f_i /f_f_i /f_f /f_l /f_f_l
%20
  /.notdef /exclam /quotedbl /numbersign /dollar /percent /ampersand /quoteright
  /parenleft /parenright /asterisk /plus /comma /hyphen /period /slash
%30
  /zero /one /two /three /four /five /six /seven
  /eight /nine /colon /semicolon /less /equal /greater /question
%40
  /at /A /B /C /D /E /F /G
  /H /I /J /K /L /M /N /O
%50
  /P /Q /R /S /T /U /V /W
  /X /Y /Z /bracketleft /backslash /bracketright /asciicircum /underscore
%60
  /quoteleft /a /b /c /d /e /f /g
  /h /i /j /k /l /m /n /o
%70
  /p /q /r /s /t /u /v /w
  /x /y /z /braceleft /bar /braceright /asciitilde /hyphen
%80
  /Abreve /Aogonek /Cacute /Ccaron /Dcaron /Ecaron /Eogonek /Gbreve
  /Lacute /Lcaron /Lslash /Nacute /Ncaron /Eng /Ohungarumlaut /Racute
%90
  /Rcaron /Sacute /Scaron /Scedilla /Tcaron /Tcedilla /Uhungarumlaut /Uring
  /Ydieresis /Zacute /Zcaron /Zdotaccent /IJ /Idotaccent /dcroat /section
%A0
  /abreve /aogonek /cacute /ccaron /dcaron /ecaron /eogonek /gbreve
  /lacute /lcaron /lslash /nacute /ncaron /eng /ohungarumlaut /racute
%B0
  /rcaron /sacute /scaron /scedilla /tcaron /tcedilla /uhungarumlaut /uring
  /ydieresis /zacute /zcaron /zdotaccent /ij /exclamdown /questiondown /sterling
%C0
  /Agrave /Aacute /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla
  /Egrave /Eacute /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis
%D0
  /Eth /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /OE
  /Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn /.notdef
%E0
  /agrave /aacute /acircumflex /atilde /adieresis /aring /ae /ccedilla
  /egrave /eacute /ecircumflex /edieresis /igrave /iacute /icircumflex /idieresis
%F0
  /eth /ntilde /ograve /oacute /ocircumflex /otilde /odieresis /oe
  /oslash /ugrave /uacute /ucircumflex /udieresis /yacute /thorn /germandbls
] def
% Command line: 'otftotfm --automatic --encoding=fontools_t1
% --tfm-directory=texmf/fonts/tfm/public/libertine
% --vf-directory=texmf/fonts/vf/public/libertine
% --pl-directory=texmf/fonts/pl/public/libertine
% --vpl-directory=texmf/fonts/vpl/public/libertine
% --type1-directory=texmf/fonts/type1/public/libertine
% --truetype-directory=texmf/fonts/truetype/public/libertine
% --type42-directory=texmf/fonts/type42/public/libertine
% --encoding-directory=texmf/fonts/enc/dvips/public
% --map-file=texmf/fonts/map/dvips/public/LinuxLibertineT.map --no-updmap
% --coding-scheme=EXTENDED TEX FONT ENCODING - LATIN --feature=kern
% --feature=liga --feature=lnum --feature=tnum LinLibertine530_RI.otf
% LinLibertineTI-tlf-t1'

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/@beginspecial{SDict begin/SpecialSave save N gsave
normalscale currentpoint TR @SpecialDefaults count/ocount X/dcount
countdictstack N}N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto
0 vs rlineto hs neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale
ang rotate rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}
ifelse scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale
llx neg lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly
lineto urx ury lineto llx ury lineto closepath clip}if/showpage{}N
/erasepage{}N/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{
count ocount sub{pop}repeat countdictstack dcount sub{end}repeat
grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
%%BeginFont: LinLibertineTI
%!PS-AdobeFont-1.0: LinLibertineTI 5.1.6
9 dict begin
/FontName /LinLibertineTI def
/FontInfo 9 dict dup begin
/version (5.1.6) readonly def
/Notice (Linux Libertine by Philipp H. Poll,
Open Font under Terms of following Free Software Licenses:
GPL \(General Public License\) with font-exception and OFL \(Open Font License\).
Created with FontForge \(http://fontforge.sf.net\)
Sept 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011,2012) readonly def
/FullName (Linux Libertine T Italic) readonly def
/FamilyName (Linux Libertine T) readonly def
/Weight (Book) readonly def
/isFixedPitch false def
/ItalicAngle -12 def
/UnderlinePosition -98 def
/UnderlineThickness 40 def
end readonly def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/StrokeWidth 0 def
/FontBBox {-634 -312 6171 893} readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC4458B82105453377C5BCC86A8871E969
2A5883625ED627224A0AF3682D900B429EF419A526767AFA4B7CDCBA9944E362
4B9085210A29AFE2630A37A9793520AC21119E3F50BC0AF96871E5A8911FB777
68FE40F007C5F6EA075630602DB28D02B22C15F751BC16CF1D47C03C6860460A
BFF1F187F1DF8035A7204090974B9358A50802BCEDC4DE3DECBF30589EC7A57E
A46C81030134C34720ABBE3853A90710E8029CC37AA1E5581ECD6ECC982F6793
AE4E6CB73B1300D5BFEB7BE622681A268080310E288B6BB3902FEF817A055D4E
168D6BC5FE7AA88FE69D1EB23172CFFF4C684E29EBC36C43AD3A3454DC128798
A539AE0F3C7A123D6119EAEC7A8CA0B081B750DD06375DF43D3A498773B7DDF3
20F572DD19A6FC5654A41AB701B7F310C643070A3F0CBCB56D3514B6E6CAA0D8
1E6889B1B3AFE479FBFC2BEFC65E92CC85A45C3D6F079ED06B5BC960DCEFBCB0
0DBCCADF3D6C66DC2282A46268B6D29E2770B8028E69CE699EC81C170E5A656F
85C281BAA67ED9C0F5AF5451C76CFB76B65211FC8015D0CB050A0AB7DC6A5FFE
F5543BDF443A1B236683004AFA91F66909F211381319F2D3C7AAE154952088A1
482CB35BE7D7C77D328666F776E120F8DB7777651002FF048CAABBD695C0ECA7
05B5FAAE9797F1ABBD188D284299C10A6653738263E1742DC3B927B0DB2F0853
5C3E4C383587086CF8EFE52893707C0A44881F7965A3921156198508892A35E0
B6CADE83BD6ED44A31107D919AEE03C0B2DBA3CAA9D268D0DADC0491D3567F7D
2E1D9974BB845DD0A0FD8DF7F007D742E262A1F97F814D7EF76519B0A51E62C8
393BD870DDD80589D569EB3B9FB83C63A66FBB89AE22266137EFD4CB20D287E2
F4A2C69D13196564A88B0BB1EF0774C8030A1B4B41A17C0C12A4AD978E70C70D
4D177B098AF9E7CEAA7B09566F0A6E75C5B2203D7F0913EF7B428B1361A37745
02BD2CF7ACFCE13A8B5925F2A65853BA8CD693DA796A4260E55EDDBDFD345136
4F78C574972637488002E3106030F62ECC7702548C37B7C6A85229023DB40B5D
38C342B480A7C8677D67A8722112BFFAF7CF1B1EE6EF45F817D43D0E875C06E5
4A32178B7A3CBC14FBC92D794F7AA32EA445E702BF763D634A142EFB8F890D30
1E8CE75D233062EC9D79C1AA2C5FE8B7E66F63F91B4ACF66DF02390454EEA4F7
449627B6731ED9CFD381F388C987E7E2A391C48CA876ADB0EAD0382B7EF0D6F1
90ECEE218F54475CAD8EF824CFCFE8869499184CC1C99241EF422AA34CB729AC
9CD10539F4B887A5489F1F5F6F4440A4E6DEB56FE031D5D3A6D69CF2546285F0
CCD68FED95EDD2F43C9F64542D990CF1968B6384A432297C8037C0B7CCB59EB0
40E74FEF43352784AA22FD6A58590CEEF2A6945A4813CF787CC08B83BA990FCA
F4CD1B0C9E4B16B028F1ED33339031189D04EDBF75EFE175E1ECEF145C452B44
95C129EB787CE6FBF1285E3778E688D21DE377096C5BEFFEF5722743E02D6F11
4F19F2EDB34E3943A0130C5710BDEAB05E85F1B0BBB6B84E49576051D5EDF717
0A1EE0B64B745D12F8004B35DAB59844AE56CC0D514F2C751A09AFFBA7E4E024
D6A35144FF0CC1B182631356A6A5157265CA385657F592A9B4A542E951D66124
FC791633A92B882DCA53690EAE705C8E3659632A4D00BD0472097FB42B0CC730
D3539C25ECDEB0FCF259C3C026D76687F096AFB703C77A54B4670E0E2BEE5352
B536F63D5FCDE2B95823B06E84618C01ABF2AF00721CCD364F5607654C188E8D
194420E3F5697D0294C23AF82659949BD19C5627E4FBFE7A839EE93D88CEE92E
F4019F6DBC774EE68320484D309902892E7A30B005108EC43879109C6447810E
DF2DAB34DF71D6798256E434DEE2AF99CF51DC357F7AA75FD666C62CF195403B
60294A72A065980D3F9E01A3F1FE91CD91A979349148892407E3B7CD6277AA97
731F2A1B54FA7F2D91BCA4751BC48CAA934AE3149F9435A44F868F605F0510A5
7FD3017739748B78B395C083A1FA718A773474534B2693531905AA938039836B
F985B795AF427E745930C6695CD14A0C056810C7028817632C2AAF6C752BCAF3
4E419D77ACAF26BC3F2919DEA27AB0209E9CC5C833B985435083351730E7B41C
F52E26103C40BBA3DD01B7C3B917E96596B6520E11FC69BC36EFBD8536F27A80
8BD4849962B1D148F827C8B6C296C03567D4B8D5BE407D8B47DC5D9697744A6A
F134BCF88F4E9244457E957B3152DBC7F8863C0663A13C4EF2B5DA1FFC7B2BD1
152B0590BABD1524451FA0509F4FDD32BFD71E5EB79C36F72F25D10AEA12342D
4568F119A87945984748E2E010146CABEDF66E00D14DAD00249A1D30467B3467
D76D200EC522B993400FDF37672F4A816F9D030A574473BAAF92F35D0D41E5C7
56BF560045E638CCD5F645294A80AC3CCDDF7098FEE8F2884ECDC1AE1736D877
930D23B984E323EC91113826FA261CEFF00B224537541D7BF141137276646A3B
35B876D98E1E37DD77712D774D8660B48B27EF3BC757A82A66C76933C123AB9F
4E08D5FAE581EDD3E8FB0EF2983A1B32820D1FE8D5D13EC7D0ECEAED2950E0F8
2B503A7F72E563A9F11F95BB61D6C13EDA3DBE3F13375BB3E6A95CF2A0BF892F
EF6F6BDB0F92FB844E19CB8EB3495949CD4387EE3A8946D145E41F62924BCB6A
551A1EB5F5261BD6E7F020BD8F85975745BFE725CE779644090A3CD401666E53
2CF5875B77CCA4F61CD7041F4E47D50E02460BBA3B8A292586D366ECDDF699C5
E012D00CC1476FB1ABDD342CCEB62474A876842093A5CD2243D500A59A66D4D7
9D50B8157C429E5817B7E100C14EFF88E8547C4CB37B009D867F3E7F11B2441E
54477202CD1C4ECD77E8BE0681F2A6175621A8F6BEB4B778E8986E2493463B3E
C364BB74982931DABD32A87570DB7468A77CE8DC0268E0DCC152A923B7CD8F50
CA6F6AFD16A71481AD861AF6D29DA4C8E95A3F7F5066D533FD6E200DEEF82465
89168CBC6F6B36AA9D34A295C5AFB70475F98A113A830FF6E2EF51D7C2888A4B
8F413FCDCE7167D50BAB5BB2516FB4FCBABCB660F3D2D3E5BD0D391B02FEC96E
2A3C897F813A6318A2581C4F68E79EDE9138FF6BF414C6A3AE58432F608F4CC1
ABA7272DEC803BE444E019DEFCEAD41998DD1F2DB8B7078488F4F3EA9C84AEFA
ADBC862EB6A9DA323EECDEC5960E133DC838DF05CB23873B2FF2AB0B8B7F463D
DA77F15D6F840C44FFC1C424655C6B93D60AD082CF4DAFA9074E1D09766CD279
C1FAAEF8CFA265E5F137879893B8F97191A2440E84D3608A98857F384E215C4D
CA31C252A5A3BA4652601EB6C420D3B2309684DBA7D0A082EC7FAB11CDE4A10E
E536FC72BEC6BFDFE136E92A2A393A12B1A9A61906D8D9812E0261A7C2BC7E66
AB6AB5B649791356886E3592F03466E072B5034A8F0BF4F3AE0608D93127E879
77D11A3DE314E172DDACE35AD0DDEA99EC2AA101295FD8EFA3D67B4012560B8B
53E1063C3D398CF1751ED89DAC0FA9D09D64EDCAADFCCB92D45C1ECD0E671C30
ABFAF6B5AED7E4362CED5B602E9A9A4B61A31824DF5E24D6046289773A8FFFE0
9056D9554B42B9604908B6080C7303883508BE0262A8D010D8FB4176807E0658
CDA513141F8D2693CA304B79CE3AB68C90DC1D702891442B9C7F4A1A16F8666B
97BF84B63B09F2ACE0AE0CEBDF372FBF6EC6D3B28581D0309361168AAA738FEE
A3EDB1AE0E4F67054169C473B220D8B3B41523B047C2FBC16C55FCD50773C1DE
ABCC4EC8C566493A0E9FB234C98F2347217BA4CA038420C5D9109AFD65F61A29
D3584A465FCA425DEC33E1313ABD0567BA733A487F88988F76FD9D03E888EC8E
A31B9EC8A91B0E7DD722A68D6A21A1B5BB7407B1F57F36987A4F1F57306CAC95
E26F9012E31C711BAA899446E3DC69BE78E71B389451DA41E05A78C46555AB1A
9C6C78959C0B4634EDD6E77B40FE5270A90FBC302CD473B639120B9A2982CD64
8F1629A151CA0652656092166E76785EFBF7A8FDCFEC32D6EF933AFD7C9D411A
7E0E9E57D89BB75ACAE30BE9A84BB1582DAA72CBEBC80E8367A115F3D7E72AB4
3AB5D2E65950FE6F6253EB34289CB6F253CF8950C0F6470AACD9A990962D850E
7F7883214FC778675F99850E4B51C4AE78009E863B37C22C26B23C56DDC8886B
782523CE1685AA79824DD39ECFD77C3A4B63E238F940F1D43E273D48246275A6
D7494F6226CB03CFB74D2A108B09FE99AD54219E12DFCC368B8114FD5A662D07
1F4A212666DAA87B08140D064A235A780A3D972AE4EB612EA98A7C506200AE75
F553C949453738C84B1FD8DBB05105C656CBF3BCFF14E889BCA722C557760046
F1D15FFF0104B2820D489BA69F8FEF7456843E8A71ED3B3C8695550057178353
FE8F13AD2F41EC22336C987A516E6ED927DC4D24A33841E451308CFB4A73B61F
805A106C0818D1A7C1AA189557C85A22BE2AFF0A6405ED0A9F33BD3FBF36C60B
1377DD1D41D384E7724D78CC79759ED8A9D2BCDCE2B1A29176E01508BED511D9
3C7274311EF537E41788C0739F54B912CEA40D6474FA1AB7113EF0FBFAC88DA3
D392D5A41D6A9B16D56783EB04F51BDF19877F96FDA3DB573D1853AE1340C8BB
E91B72E5C515D5D9AD3F6736F00ED340EEB98F75FAA5129AAC7A50381C6FFC87
C9E0671E321044684737D10DABE64AF966ADF3DB9068A8282898D54FF9FD13C6
7C39FE74CCC8D39F9B2E114315BECAE79C934DC8E078E856B6D90E1F3C9A0A2F
6390AFE75F01F2E8ECA96AA67F5D2CD20646F032D625C0E2FF3DA8536E24DFF0
E8DEA30C3CC9C61F202B530BBCB7071150AB2721B4E3B0454987F51704022725
9655426716AD2D55CD3E28CECFBE31026031DBFB3EDD740F507F523F2633C053
FFDA1A4C0157AC2848504FB17A835981407E077817CCA8D840ADC8263C63DC5D
584AEAEA5AD475794B352689FD9C8CA37D7879DE471CE20B629A4B54AE8AE485
F697897359D7B8256578649570D80043A6859E829F7A1AE1E03CA0839C8ACE04
AF57E1FC42BD6751B87B4532BD9E0B7BD0BE8754CC8474FE1E1A8D7BA92EB24E
965AB095ADD787193CD445E36AB7C61EC1E5803DC3C4E1ED7CAAF498AF397B20
5B6E2E3E1C5A4FCB92DFAC55ED9FC726385AA255B5F9D8456695C61FAE318E86
979927A2966F244D791197246328C3249666D511277A3F32D62C0C36329FD117
807193FADE37BCBCF9D97AA0A9152209ABEB550A53F00C93A9B10AB606174253
B804139F3AA88BE060CA31E42BFCFC5E2F04CBF7C107B9C4D3F45BF0967A3E5C
5A4CD94FFF42F575A5C3816BA7970714482F63B3E3DC24209EE5DF9C00A65D8B
755C5E9B1DEEE93D3FC5C474BD62FE3A07F94459CE8E251FF38A6929BBEEDA32
AEAF90039BC84573570C79F0FEA1FDA76E824018FD9A6A4D0EE9BEBA3CE2DD4A
649AAECFAC45B78982EDE6AEE4FC540B70AE2A0471292C4AB04AEB5FAC33FA51
03F428916583B271FB53EDE72A0849AC9ACA5AD1BF65D0EE9C78EACB517EDDB3
4BBDCA2E3BCD7C9FC01631536708FA4EB66F9A75316ADA58A63E2D65E09A9546
EC966D183860841C09FB68C0E63A48004F1065AEFC2E519DFFDF323C68478ED4
323868EA1558D0A9B27B8360FDDFB8A8FF7DEBB454C2D4566ED68110F929C8E0
2BFA5F49E1C23F0B6C1738FAF4A7937DF13C8FA19EA8762E7FDB66AE3506BC70
585DE4FEE232C5D1E95B75A9E983F5DEE85982CED614B31BD96F88D8CB905E8F
83015AA97211860F9E2C89D55E326C5379D365A02EC8A39978E68ECEC8A17EBC
671A239431C7AB848F2660EB8F5EA2A8D2A9B0BE0E50E9BD8E6E7069F9F26752
2C42B99474D36CC8C2B2DB792804EF83D65B24DE2FB3B3868274A42CB2414D31
65F0DBCD99ECE0ECE4B22732A35ABEAAD29BC114FABB7A8747878AD715A7CEA0
493924E17EF74E0B7B1571A6450BEEA9EE2C67CC2DF8F6E2AF78D4C8B2AD68E0
A49416F99B5C7FC2E606D5BB7B48D4BE831EFA2CA4415E72E7EC2736C93B7095
FCB657AC6505BF549E22B029DB69C519FA6A04D7007B0CA57A45E0A5232D09BF
27BAD6D828B7BB1A82F66828FF6437DAD3416FF6DD5A47E786905B36D014DC74
7780FD3E4FCF4B36188A04158CEE9A10E205C53EF2ACC3764137123E9E22D1F0
A6ED9C13840DEFF1CC38815C0505A7577EFEF2B8A11270CA699B925845E05124
10812F1099A3D60BBD93144414DFB70F54A9C1278E3FBCF4643FFC81BA4594EA
E1F422BE7684D2BE028DFD314005B5D23D85ECF12D26D5F49A68F6E14583FEE0
06BBD1F130FE2F41AD91C6F39033189AD9B5E9F55BEEBD8910D23DA6A2F13F50
9170179EDA9519D22DF375A0958E22FB84116FDA21A7277F8709F35ED4CA7F30
A69CA41E87704F033F93BE2F1300133C0AB3B62F56B6F0384E2FA775BB713DCC
7BF0985A83C2A67B9B7ACF7B36F611AEEAC0E2A7DA81A6F1D94CF54C44F1948A
CA554D04B6178F097C5409EEDFCECD2D47E36414787622AF63D3D6A7D1222780
973C668CF3C00C731E037F47B9A6D09282D09A39A8938E0977DA8188DF7D8E30
94C4D414153976C6C127A57B14F4748ADAC0A972D5B7246E1CDAC7F507A33DA1
4F9C63EE697911DF3DE499EC5421A183A8413FCAD3878D5527A8A9E25DFDFAFB
04594D5F2C802D18BBD587BCA5900C385664C1599C79DA1CCC1305E9D9DE7CF0
D12B8BC0E199F6531FCC2A9EEFA042E48FB969EFE10D11EF305A8465B4581D00
8E74BFB9C5F799D684BEE5F2C4688FD8CFAB30C1E17237B8D72C960315B16E8E
26434217AB8EF8BCDB8C2F7706DBB0186A6CB635330CDF1CC0433BEDDD7C7D7A
5C744FE748C93FA63C009B32D4E532BA176D271788738D21D6FD8DA36148F733
5B28849C632B37208A06F0B5025594367389246E71CC07379DB5684FE5030942
3615F8E26C28C29A9A571DAF8B4BF622CD4F50CBB134AF18AFC4CDBE2AD8BB94
446086FE93D6960362AFA908FCC2037CF7911EA78C4CE6A48FCC2E18C95CF27D
C1EA30BBBCDC325315865D1073E6B7C8EF07F5A3E47BBE8EC312768DDD750D62
4F71B13D4FFA05D3D8CAA7EA0717F584F5A361D284CC48F56C20D4B77CF77AD1
5AACB90B2C6E01D43CE307AE5A8D534203F339909B8721806807C4B280EB85F4
67B09C837C252C1E7486E04A86D2A9F714E12ADEC865F14E14DB2DE27C8BD356
00775FF26CC271E12C6719EE4E00576DA30BB94BF0DFD10BDC484CE123E6C888
0CB5BD7AD7C8F6C422BEC958588A7D406CCBAEC4238AA0D5D9A2ECE770360A69
D958A16D141D240A959F59D58589C4A0A0D686D244B14D4689F7CCC9C4270280
D8C45D72F102616EBAEA0C8445E6C0FF9CA58062DEAF622A3E24E43AC32915E2
DD45B63858D38A7F62A3C9E6E90584A16F424CE18375EB248C7E8DF9ACCF1AA5
B6BD55A0F850BA7FBB0E80A8600920D018804D712E93B820ECF4658380D3F464
753D6434A2A9985E8DB1F08A0243100B39A4A9CF565FF9B216151ACF02B0890C
D212138F8D0049FDE1F9A87D1D275972F33932D153F7FBFE92A4F2807BE51C6C
D09D71994EE172309C15E58406E9F016C9CD7700D2371B4DF7F2D24A25623FB0
919A561A8A0FB206B6AFBB97EB505BEB707D168C974B4997CD1925601F4B9A0F
510060E9C3D90C83B298522C38B3A0770AA0ADA9158A2774F9BDD6C2CDF16E6E
31E18066BC3EF96FA6E4452CCEE6FF4916014F0A17F332C36C21FEDF792ED6B4
804CD113FD6C74FBB8BA56078C6F7CD4635845C8DECFA73B07BBE7B7A79CAA43
DEC233C129870AC44F2C8ED7D7FF8037806B935AA94268340A8631111A169EA1
888B93662706D6431C19F3C78187C1C64D400734755341D8D7D040FBB658F270
114296A87278237348F964A1944EC33CE43D1E08D2EE0112C34508EC5498D7DF
703F7AD5B436083522613DF3ECAD277615BE401FE8D8D4B0121A217C26975691
A89719BDC728E96C50C8D2DBB80546153ADAB61516F4A5907C4EA367B409702A
D40C74BDC897916A2FDBCDE2ED328702E4955B100ADD78ED7D3314FB2C2258CA
C739D067BCCC254D85CC4BB8D789833DE56925B7D1DEADD401115DA9ADF226AF
215EFE5A96AA4ACE1893153084B4E1EB773896E11EACD8A3E45F894327C05C12
3151C575892216D7C4D77CA0EC44168614C05C439F4BF49569F1922E0F2286A8
A7A13CCCA4C1427BA513293CC0CB598AEF7806C06C381F7B87A3136958C173CF
EACA5E28B903905C553DA08648B5C0F4FF9B6A1C2A8C3AFCE0E7A98F7E95EE5A
D60B1285A7C0F15A3374BE08F7C1CAEE3BC42BADD944195E01409C220B8A6642
48287F80A484F05D7624BCA26C1450F2353F195C6271DF3AFCC070EFE54CBFBE
3ACC78A1AC8611948CDC7C93B80F52D03EFA876CCA56FA55F2F55F411329383A
216191BFECB1E11E22BE19479C5670FEFF8548F5DD9A7653F9D831676627D3CA
D458EDD9D2C645D8959C5D696A2F38367DD8008B4E6DF0DCA7EF476FBB63343C
BEB9BCADC17997831D98B646DEB89D8BCB458C9DAA5E37C450949DFAB39145CF
2956D98239588E6778F8D57E47BBE797030A3FAA5ECA86A3BEBF3DDC573282E7
7C26F9ADBD0A9423E05CBDC181E5FB9338A09E227C6C8E9CE5EC8934B88C7FAA
4912BC5B27F64ED0C81666702B92F3C3CAB8D8B7E5638AFCC6540A5420A37A17
3434E158162D2C07BC08690E9B3AD8957DFEEC037B43F9C72B59ABFECF6DB0CA
A46331984DE511AF08BA10D75AF04A371B8BE52C137A8AF44E2EE4DF2E9EC740
EB5778E39C741CC32E2D7F259BC9E1ADA3D27650D8FD3137B815A5A7C88F8F2E
ED99D23A99B7C4EF5821393836C6605E6B2F25B703EDB52388A1B7BA26AF4D44
270F1EC102AA045CE90BA9685B6A9FED655006431F92CCCA9A75E08ECDA903B8
E587609B2346113E066238B1C4A6D569918DEED51E3181C607DDC2409E0C4233
E090E46B3D01305E40974B0606F96000E6FA1F1AD338CC17E17E0CA0D938FDDE
61F9698342F72A0232D1BAF8044C5900F8D4D18CB36C4EED051DAB058DD4A5A5
8A4D8E1429CC98DC77C52DC4617DD2C0D0BD03F279D4C279D4D20911DCA2FB69
98A31AF08DABF60FAB8BA54DE12F04511380430E168DF3B656410AF0B963651B
34E0973C1A80E2AB3D38017FB3C5BF63C8F7EB285CC6DFC997B78F9C579DC393
780F05809DECFC78682BBCC404CE1FA3040C7DC650BEB1F8CDE6ED0B7D7165A9
DA8DAB162983FFC3D0003ED292E6BAE3C8F55321E3626CA59318C0145BE1C495
D3FDB1BBD9A6071BBB1AF96EA0BDF5BD8CD25170CF22FABFBE77F584D4963DC3
D28836BB6D2E2BC388F2D8B07643C4F2BC809FB9346CA8B65C65C12751791531
AD0169BAF7A9123DDB3571CE5B1063F2C122FC055E0EF227C7F2F6FDBEDB08A3
E38506C63EFC4CE8B6421DF7DA1F8A8C8B34022DFE5F7E2B176B7D813B48E78D
237A642D5BEFFB636A7DD35766BFD582C43B735338E329B70D92B5009F47FDD3
5493A806A353E3216F5C88BFF4DD77E6CF1FCC80E33DEF86FA992CF33C76E988
FBEAB15F5DB32FEC100081521D971D6F2CA6DB49ADB1A9885DD337DE2F7E9800
0D53899AE89A2A24808B0C4FDF41735887BF3F0AD05D6456DD53F8E257E41840
301DCF038A73D49990DF020CC40B4F31F6A379A89118EB1C56B5AEEDFDE9EEB7
D97FB6BCC5776BB46BC913F0D27A017ABC5A6BDF5E42A06F81801BC733DC7610
6E2163C7FEE76DB2D5F0D2EBB749E0D555170F0AE1B81524915943EE4D677C79
2AA799B2DE50A375CB7C3428A022F1481E53EA7FF2FFD17A6B7ED658ABFA3EBD
09C34F638D8221772B3893392701C0926C8210293CB39D206036B1526E79EF5C
A27420264F7670E3E9B3458F272838796C0D5548E979D67A1BD9FBC456D9265A
2DD5E2171D0BB6A731A371A521FEC23D655B89FEB287179DDC25F2E3490EEA4B
B9BAEE63EF5185F8A8F736C91554D73EF15A7B3815FCFCA515979287566CC764
DD75B0A469440B43E8FCA1DCC7AEDCDE325BF0D0C7825123F93EB424BE478047
8812EFAC4B30528776EBDA66B0A0A003E62A21BEC8A5A9BA0159774FFFC79F9E
1958DDE5D24C044A315F256524E205DFB9EB86E852D130DEA9026BF358549351
8A43713BA46ECB346BE217A2F3D90E92F63D6DCD4C8B18E3D0399338CB03968D
8EADAC60E37D22198A65ADDBE9EC98A89478F8C8EABFF56F5A09C1257CFE3B41
712888ADEF2804FEB380BB2188EB29DCD19A56C7D2A494AE4C7D41C3B931C759
CA120094BF10839C82DF83FDE3DB72DB1914E82398052A0945C40B1E2316D347
FBAF4E5AF4CB5722D9ADA8C30249456E29F966F1FBE7705D1CCBA78266FEF6D3
E4537F32DF95C0F97115306585FB70E4D59691C2AAFAC725E4FB6E07D5CD9E97
2A8B9FC2FEB59CDED7502E91FD7E2D5D5F4E700EC9086DA48BFCC7D504C68FF1
CF10DEFDAB954503D2CDE2A2B3F4036FF75EEC9EE5C41124E129244B19CFCFB7
AC2A629B8CA46BA7281D8EA05D68134AE60471A6341C6AF1D108A573F2DDB5D1
A4261EAFAAF74709CB82C7CC736DCFF3AEDDFD05F9A15168DD086A8EB0B7F9D1
CC0FA6BCAAFB3BB802BC07CB5E5BCC57F04D2BAB51D7EFFF56E05B2BE7B63CE3
3DCDD190F68D2E20757CA37AFCB7AEB0415D03C4A8B5653C985EDFFA78222DEE
B2D9710BBAADC25D40D379822410D827EFACE84E984433DB5C3C24A911062871
0BD5B7C82C7CCFCD17E3D11CB1A45974A808204E127C55862C5C7B089968DD4A
6A338FCB81320DF07DEA87EFC6AAE69F73556C0A90C0630A952CF06D0FFC6138
CFF4CFD2149AD62E0EA3277CCC7B8AEBD9108BFED7D1390A3040DD8C4D1DC5F5
7E41C25DA8A310F4FE6AE08598572C707E3CC5C40B87F0B5D4D23087FC2960B4
5AEF792F7CCB492B349C2211372EA8C7D9AC211EB6FFCA02B76620B4AEF2400A
7411F1D9BF7699B1914D3DF39CBA5B4156D8DB312AC8AA4208BA03A42D71AFF3
C028D5DD9E8B217E936D4838D61CE3AA17C7F3FE4F8D0E071416F35F00ED8613
5CD0DC32DFEDE301EF9FF989CBF5B72820E40EB93E46EC19CA46D6A6DA0CA1D2
1C11081F76E9E4E0BC466167D1AB7495596845F1BED0EEA915C8E476DA4B7C3E
2E12FD5153FA8ED05C720D28393B9D463DF82F1E5675EA37BA4FC5E31952D55B
0D56C80BFA2A4001000C7AB85BF7F8A391267BA23EC1F65CA5AF6D70FCCD46CD
6181C424FEFDED7BF1CE5DB62D75CB4E704276634E629C8BA6024696B18494B3
1014CFCA5DCB82BDAAE23F0FC75DE2CFA64D8635BC8BADD1FE506329365CCD13
D0E3B5C7E9E70F8B19CBF1285B19EF7177396D3F678204811AF13B71A9940D14
4500275820B208068E4819A96A51D398662F553BEDCE5B6BA16D5D16281E5AE4
67787123E363C508079D3A3435F916E93C1F23A619F93CC946D421B421FA818A
4B14A1C9EDED40BAA220D4770E2C6E3CC8E7EDD5916124CDC3BDAD503879FD59
19BAAE1F247BA62476B05F4D443468204D1067712003EC226147D06797C5E524
9F828A71FFD462A0E8CB394D72F75BC7865C2B4CA231BC5E0E60B67FA37C27EE
929233D738F03B41C08474C494F44C9B7EB6D7735CD8FB21C434FE2DF3A4781A
C711EC68B79DD5438B1A1493C6809DCEBB020E97F453C971A117A5F6E8A36B91
61FBC7D89A16EDBE8BBF9A743B0CB701B9A7E61D4FF95132C3ECC8F4863ACA4D
B3A5CF07C63F7EE7498156C70024A354D9F3571B3889F9FF0A041ED69DFDAB74
53F4666385EC8FC416BB46AE3D7592317478DB7043E8014966F4C861C9D1503D
08F49759870F15202444EB3DEEB15AE583C485E6D495157CF551AAC93460A490
935131C21474B066D7059656980DCCABCC3751111C821D5840EC1816313959F0
59563A4F4E957322B9034E4AE6119641B783C91762E94B1C1D7E8F460237CB8D
25D9EA0FD509795CAC8426301058490E5807F21FD6D210FB51C9517F1E01E50A
D85973E4A27F6B2315FA4BAC8A9ACEF50FAE0EB699C4FBB7BA910E11E7F2C697
2E21934F06557C03400221C12A9D8EA7A2B57540F4BD82CA46BFA0A4A37DAF3F
A800E6329165A378877AD8B63882894CB6E03B5CE7FFDE739B3E5F1A429D632D
0F4979056A18E04AA75B9DCE90B5DA5AA35F29B02D90424C7B39DE9FB8F4C157
39916855ACE75D72BD92E6CA7E870AABA6921E161C6C6D4FC06E57BCE9DB0476
E3B2491626CA7407E2FF56014216AC623FCB1F5029F79910B7F10FAB381D6D9E
0EEC817B0C0E0CAF454E54D849C83E314DD4C768D40F77F772448247BF09D6A0
EDC61A050D535CF640EC7F8B22A10690EA34C6A89E5F06EE8D5BCB224844AFF9
AA7F713E89AB906D231830CA93BF85EED01AD965F19458289A17B198F1293697
35C2229AC9D0C327F1508AA5317CB8AA826B08457AED0A09D5B7BA3CA4E52857
FCF052EDF14B2496C52B1D6B7142F88FE20A5AB8A16663EB87BACEDEB48CBCB5
B114E1AC6EA4107ECB9C8736EBBC23504901193D09B39281A3A4B016694BE4DE
CFF963985A92A278BCC9B70A40803C256E22E5122BFAF367FD211F7197B4F53B
3071B2A81EE764E92B5DBE073357892124F21362FD196FC91B921FB8BF656A98
996282BC6A32257CBC217B8FADECBA870204FE7FBE4C198399397B136D2E2F37
2A42040F8C180C6D51ED5B06D03E96799B8220B58F2557289C60E9B6CA26ED5D
96E78520C06A5DFB63070D6522C9BEF8C4560D02319642C65C282F4113C6B620
D9380D5CD5A401625272DA93B586717AF8D58D6DFFCE577248996C73F534DD2E
DADC05F0BFDDF0A6FEC6B5950F5813E3717C31EE4C4D00E17FC66F49076B7D6C
A4FB356F6E36556504A111735A563242DB06F6F19AA2F1F87D5F977B448A9337
81D305B2C38FDE31F2AE724E36FD209F4A9EB525633072B651C69A8556B5065D
5DC4D3315A0F031E7BCAAF3949297D173EE0E4027169EE4AC1F2C37FBFDBD020
36155553AAB657D60E2C36D1BC7EC26DD026DCCDB232CC98EA5E642967145BDF
DAE5BAE31F9598B8F600BF0561A7C18B5B51BB1678D655C2F14B4E50647F37A3
68ED0394CDD4823C41E0C63AAABF817C39930B838C81858EE388F39005291772
63931D8DCC00349524FDB6432A4E3240957A1B58EB9DDD48D390D7A977F888B9
785B4E057BCAE1EF0321C0A911B7A4E8041B1A13FD2C1F410A1CEEA62CEF4065
07863C1EC734601B4E326FEA00B5E6E855F2532796B42E8EF837FA9BB22DC1F9
CC8C18ABCA492B04D4C3941EDA80A4C537BFCCBFF5A25E8D003710A2B8D40135
0EECA6246E4DC59853EDF1AAA0F8657D1F6B2ADD4A1F870E3626DA5684F59329
D85F651BDEDC1B02D7D06B9B6616C11E84331577C0B59A17EC0CF408C281AB3E
8600C5C7F06F212F2E2052DFAA4449F950A1EAC90278B8AE446ABBB751053D48
747E49E0123AFB9FC61814B14C93F707D53C1570E4C6BECBDF4634A2486C0C4E
1D82967658C95CB43D521F1F55475AFCFDD57E0B967CD089427B77323C3BC09D
60F570953301FD382568132096416D97216425EE0E4F1A2A43FFD23A886F004E
48A987EE709D4BA6E5F90FE69D7524D8AAF29905ECD40D78D2F455A2DBB8815B
964CE45895632104508636E945B51006DE85D26A58DE78D6A0A60186D5DF5C73
C7A1EE7237F1402A7A73A29B68D1F202877FEE35A0B493CA2527D000947FB0D6
90D6005BFEAFCECEDDA1F3DD8D1CEA2F617D7AA53F09817FAF84983CE9C9E59A
2FC6D7510B34E22A51AB446DE4B3B32E762D6240CDED5DF14F9F0DA069B55F1B
A2B3F1D52392951B81CC79F4ABDD8F9358A411C2801A8095B1BC80DE989B3FD5
A3803548ABD4A303CE8F3909A18051A0C0C2C3285FDEE8F1389C3B0C915B4735
481E2F10EB7F71765318AE3209864263EC9EC6DAC693D17A9787C2114D349FAD
EA80B1E8F8CA6BA967A0386536B0AB8DB6351BF489CF00C3757B78821D52A03F
669ABC8CCC9C79149137A988168E3174096AFFD5B2E65605CB9588748A815896
32AD2CC71B77875CA8D23891AFE953A35B3372C6798B080E05316A569DC14E19
4AC3785C15F962CD1669D0DE28A377DC6DD1529E6E0C5CFD1917BB1BCF403894
AC735295764B76DE3D9B7F9C235137CFB7CC93CAD84B6DE80B35AC8262384752
AF724AA6019838D990D2139CB6629B2239E7F7D60B2E1433CA696136B6AD2D69
2440D292828B169FC3DDA0BE0C05C80DD94CB1C95BEC227566D416A8255758FF
27AD0AF51D03A082B975221F440F8CBDF2B8EEF32D28A0811D810291F968FFD5
606D2C9EC3FC5A31CE40E2EDF7F2A684A1E7B30B6DB685DD1912A346BFCA1517
1AA64B9BF3763B230C75229DCCEFD0207CFAAB179C83E9E559FA4B651FBE6D0B
D114581921663D3BEB40DA2DEE53F301BA889B2ABD919C5BE1C04CA0FB6A3329
46C6E384FA45ECD89CC16354D11FE75618FD0550B057DE0C572DF0DE86478812
EFAC4B30528776EBDA66B0A5AF784B9BE7756320DE1FC788A6CFF0978A7CC28C
26B19FCABA39E28507DAD9027185149527981BD44600D99926FD7C3A3F37E641
6092B0295778915589418F10A45FDA80B1C6CA6292AD7F979465F5E9A8100E3C
391F8195A17CAB70BF6A161FC614D69D0A6BFDFB5FB8046BA34E3CBCA440F97F
A94CC6D26858CF4FD7C810C064F9912B7B2850E53349FAB4FBB152028059A890
9845C2A0BA45C68B3316C879BB1C3E6A9CF7937893E2ACD81D0F948033FCB16E
5F96E7867482FAA03A3DCC63FFB05EA6CE7E11FF41FAFED999E2183B11962A40
F23501866DDBB2E9D6B5103057560B05BE38D1BDCF08B3DE2FFF0CA7ABAB892A
6E645EEC2019A802A795C5537FF688DEDE0DDDA5B4EC2B55EC21B9DAE894DE08
A4346E718F1AAF3DF62CBE183F64319EDA59B171E43DB3EF7E846906ABD146AE
524B553B5A2A39617CA09B5971E03E3CDB8DBB1C8623DE64D19B303363C061B1
C3F77BE9A17B8E38650D525DF306BD03A6514FA1054F97EE2AEB3634C9B4AB6A
7EA3BBFCDE7D3976953B6A7F0C687E2003D74E68E5472E8066B36AD6C9F9229F
CBF7E30690BFDB0EE696FA118DA27A9F321B44C3569468F1BA4E4FD96954773F
34E1E727FEEFC6790D2D0CDDFDAEFAB79879360490EC0EF50BDB469D66A81A5B
C61E91F8C0960846D296672A0D7709456C5F683EFCEED616163CBC3B7D3F630F
89B85AE1044880D04A831C3CAB57BF1FFF10D184F38C786F5189EE1AD87FDCFA
7C1A92C23FADF09AFE275D145020B94D30F49EED4C518F30D02BF42181A6E257
3EF9C6234B7BF4A687F21359CB4F37A479D390E7F470BE569C7F7726C499CC49
43449DBCD6EE569C6800389CBF12C7B22075540D1CB8F0F7955CB6FCAC5C084D
DF9BD2EBFEBD5303B3135C89A3DB8176F9C32818F9933B7B5DE581A88A7A218B
FBCC889BEF5205333FC037BADCCF8CB457C3AC880B24BAC4D42C211E996FA7D9
C0E8653A852C15A45F49A8CDF6C2A56D09A1B5D369638D8295A17CAB70BF6A16
1FC614D69D0A6ACC83D1C7504AC4661393FF5D6940A3FB567C2E91951C4BA1CE
A35FFCA2BF9A151AF2AB309DB34DB4E4416BDCDF6FD1AEE7BD8CA5264BA695A7
B5175A93F3E804795EBB845C10A84D96B20368D4C7311EA243019B2B72922517
7C95C83207A0D83B1D23ED27CF3A90B1D68AAADD93AADD56F729DEC052B007CA
55BE98028857DE4CE7AB090E92DC2C0408FCC2FB312D4C049FBC463679A22F07
BE7C5F83E9A415BDB772ECBFDDA721786D787C90AB2E77C3A4F5966723F07B04
8A3FB3041A533D0CCB166490D6C8B22B497F5083F1B340DA30A807E54537269D
F1B246994B004B7DC70574C59C343C8B0D08D9F25C5010FCA4DBC0A47E3ED636
9B602A6820F9E5A71704F5B99378270DBE943AE783D52D36DA5BE364F559C596
7A2DD3D65F56FC74621CC0583A510C4873472D8E00965DEFC7E2D7BBCC4B1331
F826F2DEEDF42FF7D1A7164598443C3CCD7A1E4702641196A40F460010686CF2
88BFC5053D7834AF91E01B0D5709795EA56FC4C0F3024E4BFAB0758A0C514E4C
B080949687FE7B9EAC17AB85B1CE6980B1A007BE0DAD70B6338FE51016A41F52
3FEF0E925972E9E7D69A1186AA832CA4C75780871AA514A2E87897ABE6F28E8E
7FDCF9DCF725F793E1D5B4975437F75671939F7B447AA09BD8D2AE06A297517E
F7FB7EFCB2DDF4DEB36698AFCAE54E6B1552C08B4842FC6E1B033110A6050CF8
FC5A432C37493A3C7303EF0839A439ABC01ED5E6E49F6F23D439624FEC302AB2
A9B42CAF3BC02841AE611BF4E002ADD3EC484AE662E06B48C1A932F72FFB2F19
57123E7A3A472804062B8EFA70DEE5B1CE469AD8A82D48CA829C4266ACA8CF9A
DEC1B79C8CB867554FC418A2924818A02FE6964DC925E6C50D9EC45749162C64
BE91C9FE1B7146E96053CE27818083FC481EA4EB7E70A45490A6B6D9CDBDFCEB
F3AAAF297BF686F26E3CF2852AD056974565B253A6565F51FD6A201EB1A40B89
EAEFDE9629F2CFEE7B8852C4C86D6FD37AF910E2C8338FDC710C07605A7E3CF1
76D9B9A43614DEEFBD46B07386A035608BB2F423199CFB2722B485B72080A236
0BD53527CF51C10D293C24C8EB4199C5CA3A43E343E8BA94F3C19D852135C14D
6605D8BDB4DF8E1306684232A1A6C6593C5951D105D653FF22B1523224DA1D9B
25C3079B38B2870744F3316DB4434CF467E48E9C49E2D9F883600EA8B2FEDDC4
ECC2F9A1632C60EB44F3B5E1840D6D16B06EC3A091C3C78EF0034ECA82A6F860
5D8054C9BF7CC7D3453824D60AB7EC2667B8973043154385D0A04140B0E8D39C
9FB69442DC88166575049E84F397741D9E7E90665633A83E7F9C5E2F62303904
C59EA129FB2BA282BF891B07CAA62149385F180D5F890209A45418E89ABAA757
3FF5603C69175AE76C589CA8B2F48FD7E2FC6527BE33ACAEDD23EB483D68DE5D
ECF91215A07B5B6A8345CD0BA16991B5E31A70DDACA5666386B72023CFB302C5
B962742805E85A258481C92987AFAF70467828ECBA28606F2004E86B1797B6F8
1CB076D4861E82C2214F35DF0AB0D6CE94A091A27E784620E6CED9E67963016A
1C77555FF8EC6F39C9C57C725F791C1E935E6B18751C24EC1C8BD85BE5346001
B95EDA8C700E0FFE02BBE6787120EA314873A996C79E23B208068E4AFF0B374D
194F984558314A256C554C63BFB95AF8C442D3E33C688AC274B4003FEAB7A9ED
FC1AA09EA7D3C5E553AB897E1D4B3993275D8D59108DD41805F007949849C1EF
98C1B3B39D8710A0770BE0D75CFE65E100B1B5359F2B3F7356ABE20056B3DD42
3BEB866DF653DCD4039DB729F3ADAD09EA3A0C180E9AC15094F01EFAEFA7F3AC
52BD2CD78C4348F7F3BDD4A848B99AA372FAD830DE559B43620BB91A3C181BC0
2784C1A15D63F41E66B2525D70B5D913ABD8EF5E30FD84EF4C6A366EBB2DB65C
FD1910C5F90752F62E8DFC44EF23401DAAA35491B9231F2836C36D04D5FA898E
C0BD095FE32595B2F9E0AF205B06563992449CCF21EEA5B45583A92DC0C51F3D
3F15048B3EE075E0E097FA9145D210DDDCE662403168762A25D5A813D15AC82D
6FEEB1F8D584F4345DFABAC4C2122562592A1E3A9AA448BC45EAFAD7F08E1773
18E400BD8D92C83B617EEB9EF208B1E6D6FB433573423F67EC29881BD4C7DE97
F983D4A91A4DFBB8CA5ABCA3387C78E203E5D7791728BB722A1A0309DC2C1CFA
6831E6F15753E46D31608321F45468D6C4D857C95D6E618E2D89C9F5A0D27066
9E792C0DF5155B4D701157CAAEEBCCA69CB23E3EDE41DD55B050FBC4A6B84956
B249AD29281A24413E9C5253F8C745FB95DF40BF08021FC5A5B048413923DE84
C65E6BDE600928D0549863F041C94C69C52A10CAC92B0797073E7326075B1BA1
CC48CF92D95731E6B46687A19AD7B93DFE996B5B60E03F5E4DE80BC9B28C62CD
0A2F580DA299D19740758FD5FD24F6859F604416232AC8F7A2E3ECB7B592555B
E64E0717E7B076251A9019C9AA9EBC4D654880272A4BBEA34AC676B1520772E4
F83A5F746785C77222AEBB2EF5476A044EFAFAE9A1472E6D0C5F650DCEED3C3D
C4BC00AB5ECF4B10E9E1413C2499C82E7D266B03E9390041B2C6AAFFF778DFA2
BD6A74A18DFF2FB292F30D852DDE60E6818C16225199D16281F6F7F3B4657562
ECFA24715387C3CBB19C5CACBE35026213098D47ADAB35FE98E8F195C0C15F67
6DDBC8BC7CAE64021E84C8542C3963B62C01A3039E9969CC09F99D1BCB65753B
A6E2BBD54506647E28D6640D18EB71F8C433F3A034996064991B87024EF8AF5B
917DCF9CE1CC23A2FB117C401354A1B984FBF893B77CF01347412F127A697EAD
3951063F0B22FDC003228E7EDE8C7CFA4B4DDD44833833102BFC28949CEA563B
7623FB0172A356855B7519621A9BC5B6DDCA56961525A040A522A6AA6846B39B
EAEED1CB25682D2BC5865B762597372D77AB84FB073087C2E4F721B55FBD8E43
A845AD74AE65D6B3F591AB473AAE1215A28E5661627A5532D5543D4F7E9F552C
9B7DB4551B80A15B3EF74B76F7AC3CB68CBEA43EF351A702587874D9515CB3C0
F1B44A1151E2CE05F6D83BE56E8D82A703908350E3A8F4327ED3738806F11468
63A5DEDAA952BA4B48C6E80E8D9119DDCD3628E54364C54F4583A2181115A668
34F5F55D75CFB0AD3BC266C288BF9BF522CA2DED3A8345425402EC899273E7B5
2315CC8377B2EF7F980858066EE045028836A5C9EF60F581A46EBE4A677D78EA
5691E311F74D5D8E1B4A20F1FE4125726CAAF168C08CE31F26CDF6613C06CC57
BEFC79C4A84741EB8852B76C9F0C91B554F7047CF115225B57CF2E6B5D2430C8
EB8996FECC14BB93939B5B9E26AC8899CD0DDC9A93279A52F99332C1E10A5B93
4A0857A8F8FE941EAA80902E3BD33404D241E14CED56560012533640C7D6E85B
057F8C57C693A1B6070949E863ED09359D65D5351D5AA43F18FD6F9CF7A9F8DF
2FA4CCC17B6CD452537BC719FB079D59EBC2A2387D5D7D63192977540C9B244C
944B11AABD44046D11F3EEC91434E090E0308BE649A78C27A3B3F82B6A14161A
2BBBBDCB98E7B2B53B18DF7CFDBD34DED9049C7EC8E6901FDAD30F836F2272D2
A2EE87BBFD24ECD2CE93CE7D08EDCC65DB4E15891A5794F8D4E5B487EDC7DB4E
3B9539F5AC4A8CCE6E44A4AC7A72044502A480248F5F7C4DDA71038ADF3C605E
13D297914BC1BBF8D940871F43249D4A6D08FA184DE53F0F11354EAEB2413D1D
C2AC8F11E53E39854B8696DC04C8997BBFB6AB9E002F7AE6E91146AC59D717AB
CDAD9841B170856637F2CFDE6259FEF86B9163FEB5AEF69BF85062FB1E1F8012
761C3C4AEB59E0F4577FF5816D46A9F411CF9FF433F53312CB10A75314AEA30A
E6B7970427BE89D485A5FE63F1FF384018C2D56A3990EEBC4C7D84BE773119AB
244320C7B204597577BFF510AC2AAFAC4FD5FEB99C380C11B0D3D8C2200FA06C
B1368F56B10F6FCE73C4B7BE0D5FB5D71466FB6E1384B061824E7B833E8AB201
95285622E8664EBFA44D54979C5CDB69B496C896EA124FDD1D4A9AF4E20CD5C6
F848B3680FD2726E5F8C4DA03A85ECEC2B646C5EC012E3D57E08E8EDF429DE13
6CB028B3D59049B95DA04FFEA2884D315F5652BA0950E3B9ED16596CAABB2CB8
CA3E598ACF5AFC9F6CB1D05B7DC8E54E39C0092C59FBEC971C24F344C25D09CE
C6E1BD11ED4AAC51517F3A5822F5E3B876E2B431CA70822AA36CA45AD99C6F56
9B1840457B886316F1ACEADC89E061D6F15764162C8A789B7C698D2BF0BF8B10
A3A41650C7A87BF1B8E93483BA14F433A68726E199AE43740CE4C68607425BD8
1578D8021C9DD9C4208BDE984D81ED742FD3A5A753AD7B5638D7653722E10C54
BADC841298616EB93949028A6B7FB82409C3537A1E38519F5EF4AAD6612EB2D0
F70AC68E7C2F44BCEDE581DD1A51008E03CC345E4A8DA3C2CABF7DE3E8A90951
9DFD4C760AEC9D937F510757C374B0F396792B9F76ACBD965F4A93D6C4C21C1E
6F27E0C094FAA6A1C76238C4D8192B7963829012E58BDF6A14F87CFBDD2A83FE
EFAA0C2F8A116381F274337D31D04CEB52B02DCA88DBF9BF243154FDDA115624
E8ED50CF8D75CC0A654C2DB9F41469FA0DE739AD3BCADC8FD625E4E73AD17C60
343A0D6983DF61299B4D51F876D2BCA16F55A7BF27EA0B646834C57A8F4E3D0B
78CBD11BD3F3D0D13EE0E22D53724722ED4642734B710BAD4BE963856588A23C
6D04241EC830E1FBAEC50F70CDA6050A5E5462CA5AB28EF440B1BFDD84BC215B
5EAB6B05A74F5E0EA477924D5DB46901AB14BE6CB518B59E217CE5F72FF6A8AB
1DF84742F16AEBD2430F31253B978E02090C9C72BE23C90B01825D38901FDEB3
C6B2B4FC5C0B93BE899240AC391A38AD6FA6A386F5B6F7C61A19AF5F46FE2E11
BFFA2ECB567BC872FFC1DC9775C83BB0334995C151954589C0B48D3D01908624
6C1B91B6657C4EC609A9236ED1026EE9673F067CC1DF9BF702F66EAD3C52BE11
536F24E19FABCDAB7DC635EA3C1D5B0DACC1788B9E62CC54509515229D5B4BEB
894DAC343737B9E9E6D483D812E30B96DB62E90026C231610AB97E4A7258C6E4
E3A0827F708E16F2EED84DCBE662AD804CBDF5DB951054DF1E8A68FD33F9DD89
2CF379FD8E3F1F9C639D860F9B40A290377BCBC846355E9AE763B98D4A88FC1E
D5CB25682D2BC5865B762597372D77AAD987862A716C42F071140254B72AC91B
974670C2622573D457E19E42A648A6E95484AD4A9A6DF1101A87DA2FA5258642
8602BA8B30FA9BB22DC1F9CC8C18ABCA492B04D317657DD5B8D2A2CB03332545
FEAC295D10D0048A616251A86BFD4705006E4AF46A80B6F148EEBD0BA1A11E39
3C3A59C0057183D9CB928AEF040293E5CACE1B21F8F364F7AFE0307CD212DC5D
24899DAADE9680499F7C5A26B0EF465F82645EDA600EFA1E7D0E545526FE7A91
37CFBA6BAAB5078DB3DE95B6541DF0DDA89F04A1AA4DFFD3E15BA20D25CBFFB4
F8D1E819ACAC16BD36AF87384F0926E742D3EC21A464E65B1A3374FD4E55D2C4
89F69D3F39C6442A9DC9D571BBF37538F21C5A329BA471CD860DEC002434DEF3
4F3A2293ECE3F54990E0EE66E7E119A2C693BC33E6410694CE7F3A03CA4D8A20
BD9199DE539A6046DDDB512666DCD6594737F94B3665367228B7B90926272365
178CE4FE5FD1F7822A8B47E423ACEC79E8DA15A08BF24B18D615EFFD0E5CE054
0305ACEAABA38769948276D785EC5E73A7DAEF59F579B27931ADDCCDDA23E8B3
D8DA9F8227A5EB400FB950A8C9E9055C696E6BC9DB8E4802CF4360B9D7F917F8
F45A650F43FF3340E344714BC34C88198806820C640EACA609E4C1AA196300E4
A14A784DE5277A027A91E51840F57F07D1E393449D509579650E646A021FCBA4
6D300EED52D7EE14948F3C1F7E3DAD197BAEF2EE57874A7345705B70BD7728E7
9E3ADB4EA8D2897B62AB2782F4D0CE7F4662CBD0FE4F0C41168731A27DD7DA80
FA7AB23F6ACB6DDC5C3F0E5EC0F6AC2DA72A297A111961D1CD6FF60941A61EE9
97A91C5A08CA5E99CFE691D71BD29A6DDE8802B8B4BBD7B3FD0EFCA2E7AE77AE
BD18239DAD5B0EE1D71DC16F79A527CEC0A3F39996598E96C83B3CBDBE51D9A0
9F7E911AE0E168F15E18DC0910564973464AAC5DEC8FF6C557052921654FF33B
E61CA7707EDED071FF4795A6FD5E42D9D3CB5B6609169D3B1D389DBCD4D5E853
9C03BBFC0DFE6CDAFEE3D78F7C5C2060A6B15FCCA56E15D6E646EC35D84F9F00
CD4FB0930F5F8F9C48091E7216598EA53B687ECBB2B1157A745C6FAA1075067B
E23D1B45920926BAD7DE51BFA04C72DD8C627DA409E3A18C35CBDD9DCA76378F
9FFE5E8E5B9278ECEB87E87F9FA03C6C4E4CC7FA33688B8A07A856417C03535C
3E499B6EF8DB22C3F1483B482FB1B444BFD0A63FA834AE97439830B13045567B
7E0DACCF72E3F1876BCC699E5ED6328693DA446E9CB8C12EE16033D479F581DE
DCE2E5A2C5F2C45FBA38BAC41205402A9F4299F3DABA4DB920A1225323B52F9C
586FD4F08000C6F444D59BA7DEA188BBE105A3B3334814C8AF6333D549E7B8B8
1276C1972DC8F8D2F0BF1DBC14D6191D511982A5D8EBED7726AEF847F542DF64
BC8EA74A6FB7BBDF2C41181B9E4E3D48D7550F2B4E0F32924E1C6F28DA55987D
CC90A9E6ADD673D3BE317C761094586B523D068F8577644643AABB489BF46A99
4BA63862399C265011A5EE53295494C70A3F84CB34901D3C1D592A48505BE430
D7BC9C997F145A961CD52BB4FFFE101EDBBCBE8B9D54D73227C4298F0B6A19C4
97B4C6704570ACCF4AEED79BC91278D8E158C2AB99DEE6C6AC093048AE73DA5F
A01E47A500890EB1563A50936FB3EDE47AB7CCA4EDCF8944F705C5C4FA63BEEC
03A321C96B32DB7A8D2483BFD0298F37EEA57F01D7B319FF50AC8A130CC0964A
D14295C3C178662265CB7D4EC4B319959677CB943985B96CA9DF4DE1671BF03C
E58821A380C6FA3F605EEF9EFAB311CBFD630BC9A51E72C05FB96EEFAC44B8B2
193D971A5154952995156DF7F6775849B737B9277F022E48F07B9C73FA6E31D8
0B453AF73B7EBF741BC17C9B26166806F5714F5B2B48DE7033639D38159C8471
CD1DAA3169EE243EC6890E0AAAD7E22765D7FD6A132A088F02C5F80DFD461641
C4F9ADA7B41DF10185FD54A98660543F3470BF865366752AF7E34861A6C04F49
A5E5277869A654309EC197F3ED7CD9936C49BFBB705047E475C32121BCFD0E1B
13DA22475982D6F04E11180CC1AFA2FA3EF0AD378B858DED982D7B1E5BB66882
C130407C638571B9CC454DC18655D0E86938D93A74E2D3C6B4AF33535540689F
97C2EE6E8F76E7AB578B4A87F9E70470253B261DCCAACDAD46C9607B9C2F10B4
9F1B1D08332141EBEA85F769B50315EB7321A03103E675D45103580B04734B35
CE3A724DB416965C10531EC3868A8F5820A155400F8D446CFB8AD19704B6CAB5
21299EFF96F2E1B0E6477059BBB61BC9468F3916138748F82E612674D4F563FE
44A8DD6AE417B2244BA942EF6E95B907FF9945C67DF4025329F67D7C58AB25B3
3CD03F873DD6A1E895B337B6698005DD3217C87DF329CA3AC791B3E711F632DC
A511240C99E8FC9E010260C4AC72B98CF7B87BAC9C346D102E1E6C5812D6AA3A
EA7CBFAA34A112D006B438BE88C899E5B87A9580B22876B1B320A9BA7472925C
F6AA8F487600CB5DCFAFA58A421B17DA6E3EC8A3402E9602317FE9685EC0A0D8
71A620BA85A30BD85817536656FD2FBB2285040A2D17A6E9FCD200A403CE3C07
A6B211D0695CB87D33A75FD9A02665133D99ECE3401886F9B7FA9B5BD670E10B
9ECCF218A96C1A6F7F53DBAAFC70954DC8D2FD6B15B6ADC4529EF67221876315
764192B4576BD854473142B5E5579BED32840C05A6BA3316CAD5D793CDADF56B
75CB0071FC7CC341BDCF00ACA500491428174140BC3C57F343E143BF2476BCA2
6796BB66DDAE14BE6CB518B59E217CE5F72FF6A8A8F289898C796A1032AD7C90
F0613EDEB93A5EE294EC1013EC7DB9B756218A8FBCAF549C33EE19F39EDCD908
D55EB4042D30D14C2E297ED5B7CE1F251CCE67E213E7DDC525CC476066128D5C
E30D05991852D4DA802B3F825FE01CEBB8AFAE97BA61587C8EA6D673B3D32D01
F48C4ADDAD53E859EBDFE7627FD2BE7061280CCF4F8A74B712615F447639445B
6988ADD81180F5CF28ACFEE7F58062EC1DA1C4DF97A1B435BC1AE23B20461865
95B749837278893FAFA4E6ACBF73F696DAC1C8FC3E26F5F8E241A37F77D5075D
EB96B321824D87D8B4CDE4650B11631704A7CBE0ECBE0E8E0F4DEBA482090FAF
C229BDADC19E0E782986C2914C57EE9AF55A2EB8F6042BD9ADC9353BFA3BBF55
3C2DE2CEDB74752D4B750D3807662AE5F13EC903E8829B9DCAD88307A980645F
BD42F195F758566EEDF764FDEF7746DFB35F0C15BE7C487E00C2A5F8AE65C30A
5CE2D1F66C28E1A2617D3829CE4FD48771904ADA553610240BA2EFC8CB2A9A15
EA0D9853F770366AD98D5AE969C656B2BBC0806CCE9A67D4504FC1BD0058AE1D
02B0B455373151885BC7418CEE65E53E5671740DEF45A15736561BBE62923340
FDF8238CF01555A01B277FC53686C6295A2CF203C50A96EBBE3339D7CF54F8EC
99F77330281523A25D2661BF5A2C79B9B60BA426D502AF7AB508F5A3FA7DC977
146B9D9578144941369F39084CB266753A0AFA96771380D9432CE973A97EF11C
588936C3795187F05F00CD4163AD65481CE38557F209C8798343D1652E28FF38
B111D8A8FE8317FCF9B58A4BD5AE89182C03A1C9315A19F3783AFAD713AD906B
31EBEEA862D9DF37ADF0F4CC09B581D263E0454C53BEEBDD16F4FAA19ABCD1A4
4D0B881A7F8CE68790E02BF90760CA556A2ADCC9AB61F3B973F45E72936FA3E2
5A5C40C7697389C79593177F77E13F10CF1358C9520D105217BD25477066F12B
2D09B0B8FFDEA90804AEC20DE7724037345A8EE0B0EF986FF1816A2AB41856D8
0DEBA481CD267B46A847B5E077D703D445206A04C03C8852F57C84D8EA2256CF
0D2F9AE8232FC21550FE6E9C1B3C370E48F3C7502C54E0F2E5C5A13DEA2D839B
35D997865E8506F81EBCE8D1F420CBBAA33C6B69C7BC73C57A428D972D2BE61F
9C67869C3FCCD58F6E08B280A5DE35B6D2A517E03613178523A83CE875FF3489
FADDFFBC47882E996AB2D9428CCC53F77E4C73D4F6665C676B255FC54F60B368
8DABE52AA7C03A7F886BD774E7BC3D775CE87CDB14A33E4F65F77783282D58BF
100A9A5818D5A1793EB144BAC3CC08586790CDE3CEC3BCCA32CB4A81C902C75F
A9D37FB26EB5EE5DD2EFAFC07ACF66EBAAB3206897F12A19716D2678A1518E5C
E0BC6BE69BF565E12DA071501004D5B4BF8742AAE46166336348B09A6B156DA9
19894803C2BA33A438CA1A996D29B4A70B7C7ADE155696C3D4E8F5546BB41A5A
210982E97B0224A05ECE391A2BA92AD544D201DE9DAC3F458A51932D7AA774B2
812D6094316E6CEB7D96CB43B0822F722DF8F19F182B9BBBD7AB4C8E56B08EFB
A820D03FFBB9B113434BEC3351C00DFD29F397413DF96E114A0C509A8C0E723B
7D58AA416C667FCBA3CEE03E60A6668BA9EE1C5004426EFCAEBEE2155A369298
F71F31B506F4B5E57FE1131C23F4DBD3FCEF77D4529210A89F4D2E027E8A6B1E
FC1874B51663414484DCCDBC22B33A04EF8F4967562E3F2F40F2ABEB46BFE115
2B75D38846A1D607CE8C297E4E0E1780254F43C08B7EC7B79464F66CE61D12F6
74461EE27BD032740886423055761A67AA5AC878F260DF0DFBD65171980C9059
C668901C844158BA2018A393416A86F976D2FD93513D07930F5457D0C01F0469
2076ED97E5E5B0354D85CC21CE57B66BFE8F5AF4BC7D47AA549D061FBF70D06E
9D36A82FD48515FB4CDAE4E7320FD0816287644374DDF9D4DE6659461CCD6E9B
B42759C289C8FCB27F2AE621EB7B3A41FEA633AE6C255C3B0713700286BB68AA
BE1491F5BF10AADB61424C531E3E57206DEA6C7ADF134CA24FD213AC62A56FC5
AB99A90A9500ECE26C5AFE8B3D61C697C9D191C38137E2ED884CAFD6BD85B017
0EFEF25CD19CD4E37363330571871F04E5268DC2F1B733F70000CDA74E1BFD0A
0BB88C60420E3118FC8746E18A701590228B84C0C7F3CF111A7DC0B91D4BB0CA
10E2BC238F596D899ABF906ED76DBCB40EEB8102138611FA2A5E2FCD56FC8A6C
B88A9C127F3686AFA1863BF5F6390B4641F27391D1698B13F0EE51ABE6972BC1
A5B1352D08424F4422ECC5F69C4B6E1D0B583CE26BD277010A9E87C5ECC37A15
81CC10BA07650CDC0457A1F423303A5199200DCFCEA6121FDC45DEE09FB4A089
AF241A0C911F1EEBDB23C2A14F575FDED8A21BD43EC2C275E888705C80323269
0D458768EF740B9C892CDF77DD9D5E944A4B5023060F377820DA5F4A9AA95DB4
E7FE64D8CB2208172728FB0B436E3C99591FAD26B901D283A3B8E481D6DAAAB4
4A88180F813753B419289DE843C32DDB9C6F276C5A3ED6A7969DFE34921F43BC
8355134BDF0F155C4E8426E4A1D3745FDAD8CE532597BF1C71234D2B6AE5D6AA
EEDC05FA5ACF8980A23E89A62142CFD0DA1829C538FD91A29C5DB7BCD2B9D794
CDEF1F9D995F1337EC6C84B1AFD133D3C4D429D68EFB1DD50FFDF5483993F6C6
B0F3E4A5903362722AACA64E30DB40C4929D7014098082036AAD54821B1F5151
3558A2844855CF6035DB56BCBF639EBF5781375F74F86A84E3B6356CE3FF8E60
C82F48A11C10C9CAA10F97672651AB181BC5C0316C45B3E65764E6AB552BE11D
CFB672D8450F834C207BC9D5C19D162DEF616B1BF16448A2E37BAB230EAE6C72
200177A3862D93DB9BE58DD24FAAAB1599EFFD658CD428542E66F4D60ECD0255
7603F69FAF43A947172AD55F57D785A4209479650C1444E480E8CD320B25BC0F
8F670F9C7B0ED504E74A5FA95B1DDBDEA024B90225298068B44F16D7BE33FBE5
BC937119B859A1A77426B4CC5DFC5A672F5C8FD7F01C5A329BA471CD860DEC00
2434DEF1E934B522EC61099BD30C5656748D8DE398DA8B05F087180FCEF26B8C
3F9BC4CEF9E1787CB1F2D9E561675FDEBA8CB89756E1BACDC0FD63A9D5FFE08D
24D1BF1576BC1C20D9C619EC7408700F2E25DB51F220ECCC22EA8100ACFED587
72BDD4978BC0A27D0FD085BBA29CF3A4B43C3F2BF12A015EAB86172D0DE35E75
58603835C9897C287DAAF60BF6B706FA8224540313DE75E1537EF69FE9897850
1F8206DE7CFB28FEB8E7897EDDAB3A59C4BCDFD6C81095D2D0F8635703C7ED11
43DEEBB357ABCCC9EAD49833AD1FC0B6C5E7D7DD1DC5B6E4A0B8E70B28F80FBB
480CF90B3D2BA9BCFC6E40DC39A24FD0F31C58AA9B48F5D366082E77405CB38C
7A634BCAFD30930908D61E8215D0576024A49016713C60D104247CBDC724B568
EAF96E73411CC459C7D77E8CC2C54BFB8F5BC45BA81DE17A40BAD1BC57B7E5C3
D80FD1CDEE64FD1254E5863F3047D0B4B449979D77A4C7CAA09E5ACC965ABE96
1C05F527AB6AA16C67CC32145048214F727E265DF78908BDA22437552AEE59DC
6B715F8BB4D84BAC4D6490A3BDC551016F9AC6F5F8B0275FD32BD38F36B33C88
4735A73386AF7F196EEB9D5A81C6DF26C9DFE4E452611228A8E64D8F9408EDF5
4D55442C55FED27EB5DC8F7DC87CDD4EB071F1A9E92B08E938B7F8DA87335281
68EF42C2DE9C02A7CEC86BFB905A29621EC81FE74A9725CF1209168E68C0A6B5
EFE19814EF77E6448E040D68CD6D383B9D93FE41C1CD968F8873D65B5BE4A329
939DB53C86B8E558330DA51C6F72AD03F99E12BDC972D8687F4AC71EB8C23809
F39215694893BF7104EA58F548CBC7EDD44E0F33A2EDCB2BA58356071C2EB290
03554CB8008AB9138099CE78A1F937D82F59CAD640181B76D76BC3FBFB9EF2E7
3CD8A742E6FFA12DAA87B1048092FC5DA01140478958D7CAEED31A08DAD2E11A
6F9256E19F2580801A463969FF739E68B130781E1660F125AFFDE220CC0A3CEE
E2A9FD82ED4624932E27A0174B368B24B94D30F49EED4C518F30D02BF4218B9F
03EC3194131B54F4FA7FD45DD080DB58FFDC037DED0B93FA18F0D1AC01C613D9
9E02F8C5F91247BA7407CC920ACE6D50AFE391082EBB8C61C308D947BA5D1C9B
09EB68AC98476CA989A18969417749E053944FCAB0450A1CEEA62CEF40650786
3C1EC7346A0AFFCA911F25F42C60B292811A5BDDE43AD25E0471B9A02F00D169
7E844D9A5F91C6DA00C8B8602ED0BA6DE1294A53A585C8F6D3EA61A7F4B692CB
DB8C264657478652D4176689DC86561EEC79D3CFD3B7FD4F9494129C5B595C35
9AA32CE755D9DF7B56F5014DD955A04F01AB0414163E6740D421676B57D85B44
408DFC7D5CF2322FAB047819DE6DDD7AF688617314A6039036132D39A44C010E
19C5733E89AC3DF461AE57D209909698F7D17E524C96C5CBF2A8053108EEA89F
E339306D67D26AFF97FF7A0DB12A7687A61B98AB95AAF7B997CF5BB6FD87E637
29843B593C52C4F27C1ABA91511835465DB7C5FA3FBFF172C4281B98F0FA3134
58E50D0EE6D75A3DF43B350C4B8A2B647427475D1BE8B9A26976AAA0A75D95BF
4AD2E4DF3C24708FF6E44D728A2D780C24E489571C79B85F277C3BB84964E373
FA07B7970D1766793DCD964682687D561D1A2C02385E5E728EFADEC1F2E14170
B75CAFF1FD4C23F90B6CFA283BB3B2B169751ADD8EA94A2BDF2E5CD69CFBCE2E
543520C013A368FCDB345046C3643689CCE33C388F5C051F926FCC512A0D3782
26C5CE066E09CEBB4DED573B688725B7EF5A64974CCB30B949907BB3E7B2CC5F
7B69EB8C39D367DFFB753C5356214C558637CF00DE4085B6C927C18DFC145797
7B23A66631FFAFE78A6B352FFE3558E431C5755D3408FC8DD4102B5D09C6AE3E
80A85588249583A9363A8F986B635CB63D98FF41A3953C5EEA16DB4958E1EFDE
BB3E382BCB48FA5E8FDDAA1BFB8CA91D07EA60C6A28400E2FE8788DF52C64E5C
C330C1AD484DB8F2B36FBAB70C9DED4C9ECC72DE0A84250326738BF69CDA7D7F
BF73371514C2799C5B816C985F0A52B32BD3D4DC6FD36679106A7676598F207B
66BEA904D529E005007E3FDD5D20D3CFFC32061617226DF3BBF81A109815DCBB
72F6F95E4F0DB6255D18B359D38C7321A48F66570FF7D428ED1ED365E74BB773
876D57CED1DFAAE72FD4653F41FCCB285516349EC7A6B72D81C1624D48749B72
00C06D1021CD015D979E0E011CA35D5294821FA81A9B82FE1D0286F38F5E3971
566CA1591B0D5E16A1AB1A2A134EC9DBEC406A30BC3A00334F4DB2CEB4E5C7FC
BF815D3F95090BEE0FF9F9F09F607A207B8E2CF3FA08AE36E284C2E67C2908F7
68B6866A9645C68C5454FE14070FAF36A4CB63B6620D679A05F1E85A73A98F1E
0C9BF26E913A517182E7046C4CE762415EF2334BC06848F7F18656CAE02B5437
A469DB44E2540408A71E105898F9F20B901936014F57BD27079480BE5E43A525
E6038A71F00234920B956EABB5C22052FE17FD87D3F3F3EF5D2616577A0DE846
811C3C1B4144A157E5CCF00A362341811553000BC9DBB8D363EAF332C19BBC7D
6D6E6E26088A2281D7529CF8704FFCA4852D6F8A8DEB3E817305D008ED709502
0C94C9FE5A804F7EB664F3557489236880A4C1E7AF21ECB1F931B95F0AEC70B3
9B888BDA854759501F581FFB23D7AFE03DA1901BDE0DA2A529AB3BB927B9ECDA
178687006F47A38CC91E4F9D187D5EE2D03A7785D885FE12DCBAF16254AC2E57
4D979894557920753861C5204ED80CDFF48794794AAD16096C175045156B453C
B90B208F4F0C823FE1DBA203B556063CABCEC6EF30F5492511BEC55EE5800B2B
623E0488BECDD26DBB0B35DDEF668BA1B38D365C9785A54D2224EE05B153B8EB
54474D1F91B2367B425686367C68FBBE09C26B0FDB236C5E88F7AF12B05A0006
1CD84A3A3ADF88149D2F66F5579ADBAB813E619E9826D9E2EA712E9E878FB83D
1A7327085F8BCAD09068502C98C0799EA24EF6B238CDD35FF405301400D471BB
00CD34849AF63844C5413D53665C46A1425D4B51CC7682C48A283DDF59963114
0569566579FB0BF1F7B314ADA53644A8187484FD9800DC081374BDFD3EE818C3
16B7D3FA7B56FD43092416DCD0607120A2E0DD954ABFE90D994A6CA81640BE7C
3CC839B6E14230F8FBCBC84B810A2656D261F7600746F71F38EF7F4A0B787924
720290F7E375E2D3B8AAB9CC0FEA03DD5DD3E1BAF1A82429A2F79299CF97D281
DBB4C9CDA8CF01803D8541DA3A0D271D6DCDE96FFCC3E6BB39F621AF01596344
93CED62566FECB6F530354AEBABFD8D878717B7BF1A60F4BE92B4AF020059A43
6A90C724FD544489F57A51DE0F5DDFE1AAC383E9BBDE2CBFC03164F724A5D21C
5EFA4766DD2684B2737A6A325BF051784EB36BE1F9EE48CB671B6DBE5853A54E
1F2190FB7DA72508AB37C12D9A431DE6749FF3CD971DFD510637DAB73CDFA0B9
777BECA400040E49F56EF0E4EBA269D46791B443AD96A0AAA6F4A5951947BAE4
2B7FE909AEE0616094BDF9384546CD1455E98A7696168BF2862B5AFBBBBA9BE6
E31C57D9DED0B958475D04C35205D1D0BE29B470F140514D7DE5F9B71A1B0677
B49D099AF79F4809CB581815195FCC45612BDDAD707963C88D594B99BA6ACDF2
3E81DCDEF0D1C8DB91E197AE38DA07D364B668DF5F6E1B445F9C0A123D18557A
EE732C4D3004CC32F829B64C360D5680821F51B5A5F29227CE558F7F062708CB
D9BDE7C0B95AC12560C3B0D3EA733EB517D0AF0492939C1AF5BE6C9334A46C86
4A4C4BE8987962E3780830752458B10DC043C40A138F2D234A96C10FB17EA265
49517E0646736AA998F195D3203B449591F1B5267DF127148B083F689451BE6D
0131B866B5576260A2AA5ADDEB0E853436435C79BA92C077E9D9E1C83616CD3A
9C108698F3884E16C9A10EAFD22AA2C65B000D1BBE23CFA1747B6A15DE8F2132
C49C352027D93395AE3B96EA6D2F396538ABC80783A7BEF609DC694EFCB9529F
07A74D15F0259D7E11B99F70CF45746426543291AE4D20A92F06C6868283AFEA
AB359861CD4C07AA01FC4D79B52B408EC83E84864CAF98B45C6EA676E3B32BF1
85720C265DF0045885A91DD6902315A99A6A85ECF5FCE8F7277436BC5777E258
87E9BFA9868F60476F684CA9068A365DD2B04A547889773ED9A0316BD6A9702E
5BE4E4567D7009EC2D510894E39EC9D5C2056F473B8B30A8E7D0C5B2B2968325
2C2D470BE2CC86C0A791E27D68BD676B1FB73047F2CADBE8C46B8EED083BED57
BFD8E46639488FDB2D502B32C21B8C83A35C00F1073FEBD4D3800E69B133C1B0
393624EF49D8CDE06DFD0BC11B90C8010C7B39CF8672FC59BF4E8A7291363F1F
2013A3C82366A40C5371D6C0078095C2EB2CAB65884F3B9866031EE3B9D1D211
2F66E7CAC5380EC67D7C3AF71D03A2F255A33F46560972CCA137ECC98C6683DA
5A3A3C6F9533E2007432A6D797182C31A73C459E44397D91B75D7569ECED5213
47E065C45D9A595D0D9CBC916924BEAA05155336F4274D33E5B615CB84755194
5062B94195E79EA70AB138B4CC1C808604D0548883BC9A83427780247E8A0768
758642C40C3840E126C275620F222D6EB778060F3D30415B6BFFDB4A073BDCF2
EA07D80E16374E3BA486208A279875C885CA303EB4FFFC8FA28A45D4F12406A1
1BDEBD75F2F1319DE6584C4A651C75DB73B98D132703A2FE3F4092EC1F34E110
15506394FC1B13507874AFEA8534AA6784E649A8A08C578549FF799439E97CF7
F973288F012D11D50FF06B197335F1494197951E4F5222DD5CFA2D4E3BD84F52
4493B37E26A8E16DCA39AA6DDE2DFE794C5EFF2C7981B722FCC6117262B7CC80
6C3D4550BDFBCA9EE6AA91733BF48664E71A01B0A8C31E68D20ED239474EE13A
E6577F761D430AE3A03528370D5A1802C402B8EEDEC971A1C610911617561890
36954F7CE4CE89A883887194534A5A46AD1155620C28DE55C4F3FD1421296E49
561CBC7B1E26AE98E61A1393C237FE069504D47D4E03A2E391BD5199B8163247
986823AD649CF87DF0D4C08C461346FF5026D7A9A7D9B6856C52A6811F9C96DA
8D547D8240DD39B827898398D03CF2BC22C2C7D09E1D0D4D02CE44D9351C5645
D04DB49D76906E068C3FBF46118077955B8B126695FF0208448C931C677BD2A2
EE87BBFD24ECD2CE93CE7D08E04A951178CC62530769A9D2ACD58AA7A9F7073E
ED89F2E6C08EFA6DBBB2819F3B1BEF8245BCDEA069B137E72C38C460BB788A04
6DC3A85DC22AAD8339028CD8F7D7A4E3720879761B0C619AB2A66679B71CCA5E
A454C8CAC032E373925D12D1C65A9CBA58CCA0A7AF1BACC4B1A7C9347658F8E4
6362D3A7F957B081BE1D837AD5E333EFA90A3DD11D07B28CADC24B14EE538859
2BD478B2CDAFBA58848E0DCB2272D32FF4B0A6B2D3D7E3496F17F49CD5EFB435
331F1D522494F1284EB9648E9D483630D24F446E1ABF47D5B195BEE528F1FEB2
9551BD89557FB4E93AB4A049A96A27BDCB21D8A1820F4E426160B2433AA15652
474F572910CA7CF66198F1F89BB2EDD543214B6D978C379E33FFEBB1B033B021
8200C0F06D193B05F821A015135CDCB398E15B37612E2AB4711D16340FF2349B
A9B74BFAF8F7BCE3FACC38DD8EF9243AA725A3C602A3A3F6F0ADE983DA5729C5
771B43CC51EF9B11D949B80275E43898FCE8E8EB1E821AE28B5C9FA48583DFAD
A9448F18ABE54EF0E75720728B13A5580E10DE65574A93754E3AB9F3F8A2A75E
17611E029C1B5EAB7B3E4B4CE3BB682ECB8809B51F6EE897A83CCCAB47C7EBAA
B72AD7DFE63F002E5CEDD40FAAF340609A1003DD1F1397F151EB8F2B985F1A56
9969CDF85BD701402C1450A455A4BF834FDA88521D4937B828D2E24B3E28E823
EE0FD7830CF6CFC02EF5580AF2F277B9241F2B941FCD55BC73DC6ECD4B3CBE21
C54C87637B73EDB3E6C0AE87E06232F71C037F947F9CC09B718A603BBE637F40
8744BD7CC5D1DF71C76C80F01E20124F804FC1368BC2778AB577C5B9F4072362
3E38AE5AAAA939501E74E5D54E58ADF4EF7BB25D172313ACB05A3E95CFE230D2
263509A426C0212301588726973BDA75735F681E2E0A8D93948AA1168A9121E4
FD09D99EE12D5CD806BE955CECB254257BB4BF8EECC5B6FCC49AB049F324F887
732D21C4BF9C536D5923D5F18FE2F530BDBD2CFC21D684AF84A8C85151B693DE
C73B9965281C13A69E651128AF0721861E0EACD0553DEBF68C0901C0933C6F29
5A07011FA7E06D460B3C819388782A2CC631CD855DBA274E183601FC8944C585
5E11A3CF1CBD71E3374BD716F714415EFA2C253D69447040BF0EDC82F0E602F6
40B773C7627C32712EA2EF066CA11AF63E720FE1F28D656752668523A9BD9391
A41A2E05424B735BDFEB75BBE90A918C7AAF1DFB71FF3F56B50160CA43E3C498
CD84B25907DD03E509284A4D43B0C3B03F72CEA83B03E27769ED2EB5696A397A
2B9F11D379912B8F4BC49D67DD7EA54C5BD9689553BDCF0211D3D97400FE03E3
7C6624E57FBB03DE5CFB6BB9A5A38F838B9931BEC0C3695D5EE1C9B59A512E97
1F8174EF10629CF23E97CBB7AC2A629B8CA46BA7281D8EA05D609E9F6542413D
E6FB8889601F21C9D354EDF3D93D0DA39E774B9835D4F8691B029ED37E264B7D
12CFDAF8E39BF35DED0B12D4145F5C6816616A63A43ABDBFFAF55A142CDD254C
8392EA65172DF3768EAA14E530CD5126B33BF5AF4D6E786F2C32C04C8D597F6C
89318C9557587AD6F2ABCD64C38473DF19B57A5608992A57F715B20585AC9736
F5843E846F49F2F83F3B191E02080D045160343EFDCD4130A409334D0B34AA05
5A290E9F234767CD62AF33323B02A7F142AF91EB9944A0454CB691DDBF843D65
4B89EC632D16B225A64FACEB04194D72A79D34AB9B4CD7598D47E8EEC5523654
42CFEA7E3D3875226C972E5A91189A53498FA3DA42D7FC2AB533172566931F05
FF461339D47F8525D0C1958650C5D143A28BAFDACF01CDF9B9975AA14BAFAC7C
CE887E303595F54FD6F36E40A175617B9ED351776A911DBB57D9D3424A001846
A9CB9D04D794FCC21481D93E7E4BF05DCC8BDE93FAF8487F909BEE2C33218463
7C6FD4FCDA5271423B6611D3879FD381D5677019C8D3F42D90520A343E2E8B10
751759BA48EDAA9417F990437978DE17270715E6DAC8C7C7F3D2B99E220FCEEF
A978756B7B00A3527AB24E590186D45E5A7F2A758F9BC5C946EFF7D623255113
874D76D2B42EF765509C5BA8971C6182B02820E40EB93E46EC19CA46D6A6DA0C
A023B6A3F62B37E3020300719140740EDCCE2237C0AC1710754083B85E2514D5
0D391A8A9387295C303F1BD91512F7C4CEC0813D3F7F37FB626732C21AC9283B
65C148361530BFB10136EA8BC6A6C9E054B4984E7B7A8FAEC8F496CB703CCFDC
0B7D9F13FEBBE645E902D650CAEDF46D5EFB687013B820E070C91B876A4ECE78
763FAE3548BCF8A2D3553FDA280740AEB14984EDC79C24532C1CBC137C1360DD
9CDEB3FDD76FCDF497186B0020B49CAD1A5E9DD53851C233C5801B01628BF65F
7AC2C6BE8BAAED737BED15459D627A9E65A1323BA915C10F70E511FB1C98234F
24963217A389CCAC65621693FB130405B134B804F296BA6D1482E9C73C19CF1A
97673AEE0F118733EACD30A472C56B93E3D9E0467E137DF774FDA48580F7F0B2
C83B6607B29B5C8EF175D00DF564E3B93CE7A0CEC390140BAC87F86C8D20578B
53C31C3E2C6120ACEE71A95596C2EF523885B8EBDC35B1A6444138AFFF98C387
DE4733894EF46C0B63AEE18EDA3E3D9FD637C98BA46A6161F9ADC6E5C30B10BA
DFF899F759E0AF12CBC1C7796436512613BFE454963C96A6DC21BA304ABFBD6F
0B142C794757C64CE7ED4696AA3E108D9FDB02526B12B3559D2E1B03230C9996
15F3385CD109BC4911B6AA97485D153FF97E5F754B5A17F277E52D0399EB6F26
22FD2F44F7281A9B6627A20768AB0C9D91087BB3C6E242EC5A6A7DFE0105C040
A7713BEB9BAAA38108E34F99D6F12024FA0F5BB3C1D4963D45A7BAE85DCF3E39
90F0A6322BB9F0F689A837887299B72757CBDC7F661FF60B57B7693FDCF8F40F
D3CE30378ACE7D3CD045170F95D6191F3282F701E488C9AD12FD762C94821FAF
BB39DE44B4858480FB202CC050B1A18A7F79A9DD91E975B078302C855CE770E4
67F0CB8B33D8D65FD5B4B2B11F77A3DC66E4C806F4206253C2DF5B4C00C8BD10
5A913C910B28AD3DAE54AE8C63E31E619A0F3FBEB7FBE5516096E31DD043E9BB
D9C90C16785E0F24B3E70E8959857A5EB43DFE4EFCD3AC4730760CCBEB865478
51EC22D60182E8481AF6828631D639413858E8AAD2AB5E4FF6202FBD0052CEFB
055A6E255B9247FAF9C375BBEFE38CBF3DF0552F7F63440B9B85CB76503D0C78
CE7119296670EEA02CD228B83DE7FA112D321954DC91F8178303A63F8737D3CE
532597BF1C71234D2B6AE5D6AAE8235B00FBE97A440D58126268CC7065084547
3EEBDF9C6A371FD36C80FCBE83B62DCCC0A9D8A12C39CA2FB5D4A3602B7E2BCA
16C510BC26EBA88042FC738A2DAA04D63516D012A2C6417F2FC4494DC0DF2934
2C28FA232E4AE96F527E09BC014C95736F44FAB37523E4941D0AF5DF531A4556
AE3635BB5F0B081FBCF0407AB213FF58FD013D9EAD2D88B01654F4C983FD078F
DB64D735AD5950DC2806BF073E5071C02E149296CF0A9E18BC8F2564580C77D1
10B3ADB231CA81407069C89F69E5BF7D75231D8BE4879FBBA0F4B3C42681D5D5
1A18B8B8E0313888680ED36FD339FBF90D3174374DD0F5524AAAA459E6A016F2
BBC1B4EAAAC60817D68780E2A8611A73F944A3E679CFF3002874511CD8F396EB
54748050669F4DE4F500795C3711F21D2E0A8D93948AA1168A9121E4FD09D99E
E07FC7597D63CA4867567B7C6EDBFE9AA18172E10E31EBBF8381DD595447B9E0
D14D166433402D64C6958033AE0406D28CB7B7F400EB79C4F85141E7B426D3A2
8DB4895F1F95D5F37C1A27CEF503CA4D3AA63B737B0D57E5EE9981949129D3BC
960D1EC08135BBF2B974D09314B192AAED6F622C32E6AF5A3F69F5F53EC1A12A
985CB3943B9D00568942AB2D85E12248C0B02408B88EFFE7526246EDD6DBC323
F68473370D04016187EC0A2FA93CF65FE0F14DAB95D5AC18CC6A008C105135DC
111D389D94D4EBB846D63DDDB367F34D81081C111B9BC5FE95C0F5F7CA831A87
E00B4D60B2CE8882889E8DE254452C4AF42A44BEA21E708B5E11CEECDF592501
1ABDDCB651746C9E402D0FC042A562DAD20C02D215294D22681A0F9F7F3BD270
3695F80F4AA976C8806796E308BB2A1599075417A310E4106EBC50BC0A427058
108DB19AC6E7C1DAC4374D8B089A59B12FCDDA6DCCDFF86A9E1AEF2C1227C8F6
775DCEA57FFDEECAC7FBA315CDED73E6084027EC970817BC40527F4445F4A2E9
FE5CF2F2B1E344FEAF613BE4E99F5139508E4396B02D86E99B79E13B57B847F7
9D7B12C327308E0DED1AD1DED572771D53F52CFCD6E2114202B2CC0E61131FD1
6E47341E2F37F5A71031F94286356A0E97DA2C4C6993F6F8584C5BA169154A02
15E5335915D1F7CB7F49E194F29351CEFE78899CE46B900DC80B68CC9947219B
62445DA840880CF5031CE2989868D0704585B969251F67BEBCD43245237E91EB
52EF994980B921C47EF74592B6F8AAD76DEAB16503D08FB97D8010B505F83646
F41C15AFB7E9057FD562AAB9E5ECE5A08EDD152AF6CDA2F1671CA4665B28B641
A6EE6B143D39614240CA03F9B165840BBEF2BCF74FB1E2453B8249225FBA2293
F8868A81AB02413A2584FA1F5A305334C12365BAE5E374EE8BB8B4228A055EE4
6A4617A43ED2D2DFCBBDCF48A6692261648D8AE9B0A53398967291D8F4C502D3
02F6CFC02EF5580AF2F277B9241F2B941E199A515B7487E0244766EA80C49B5A
FA3CF392E55EF8C06F500A0FD9ECF90E60731B8A64E12BFFBEA7029F8D317F7B
40CAB36919BF4D8557BFD571194D1220F623191992BADF582F289E162F3045F1
B37F8689B42857AD100F67824C10FCA6AC127441BD7F65D06BE9AC82950C0293
05113331F586009E3CE1ED3A79FA55E260783F8481090B52B946F79180E3C9F9
D2991154B2F2278DC479DC3AFD69B176E7FB83D6C050564536EE0D9E11985E73
93AFD882435E464E6BA2649C34AEFBD15BD299DFB1A555226E89DA4F8DA0621A
8348D70CA13D96BD5FFE360CA2AC2975BAF2A510C75C455193E844EADD05B0A6
4742140716E3D1A202580A265D5D15B5FA013C1CE63875D761518F444645E76A
4D0AEB88749B78957505BAE86B985D6BEF4DF07692E3C3AE247164C738014D8A
FD7FD9C08CBFC87FDB21B10048D8D6AFB7F965EB9F7672139FE3B42024EB475A
8E668485BD00DBFDD0B56D4AB9AF8C7DDA0ECD8B8115CAE03AA9D6AD07234207
CFA9182FA38053780083695FA64E8A44E85FE91C5E0625163FDF224F54058342
70A6D0E698C0EB0D939E55E20F3BB58583F22D4A0AE63BB39E0BB6BDB6C1C499
8B9D3E1ACC69E996737C23FC740605CCC91AEC932FD1F481DF4F6B1140AE8B8E
5DDE1176848626235D2CEF17B3B44F4DE5338B95073D3E32EE7CAEF18A34641D
FDD109C0DA1E332C923DB49CBEF298CE23501322606773B9BA4D3EEF9014DC59
6000C278EAA0F87CD55676460307D567B78FC23A6DF3D0E77D9071466ADD35E0
2FC67D30E55B2FE202F05680292E5A05F03A0BA37E85AC594FB7D21F6BE904EC
D3122028AB59E5EA772826DCCC56A87B0624F57ACF3E5023B5E0C970E31077A5
43DE555534E3141E882E21D4251364A3D5D27E83C2F379B88C0D918013ED3CE6
31E200296EE741F16B11B6A40D9DA12ADCE4F6CAD515667BC689CB2FC5B1C6CE
3E72D2BE1D9D2BD275F52D2032CCA557A1DD131F038104DA17EF456E2E0FAC9D
32FDC247E4CF5E443430DD29A58D195FFA8C5B2E695EA27389628F04FCE5ED87
4D51401961AFCB41D5B657F4A9A37FF60CEBF7927D5871DBE1F91E1D792D0B8E
7477EC215FD698B44137021FB89748327960892DA8E03F79D06018F5A1CDB2DD
3A05D5EFE70C8B1FD63B002DB3754AD99EF12FD3CD91EB213A92541054C23949
2BAFEAB357F6E08968A6032F336C94C6B245EB62CE0D7ECDE6F146722A5A006C
3338F4C6BA4E5006349233EDE98FA51EEF5326873E6EAC4394D299968B4F6089
E7F8BDC7A646A25EAA3D03EAE12FFA6B5432BE5777AFDE94E368D34746ACD37D
7AD7E5A98A1B998037520766621572D747754C1E2F38C7B1D4F806FA67ACDD5C
DEEA4C23B832A805B55A27E737DF4B31E5188BF82663CA731F3585C9B36A75CF
88CE4247CF42873A113116359FA58D44489D7F0FF5251B457235662700BCB697
0DC51AB83A70998E089DBDE2133F3540E1232B745020D0ECE8862E2DEA4D91B4
0737B4A7E6344A0F26EF3B78C52A3F73E313FA242D1D829E2B4EA30B487F414C
09344DC0202727D9E1AA2D9A13ECA0D59BB9712825456388C53332359B877385
1C25CB177FA2DD90858CA3A619BAF5F4A8C87BC4E66F7F9B8A21A3D319F5A2C3
54896F3A4975111084019DE1FAD264E2B59878BC49EDE89EB679AAF16A793C79
5088A101B9AFF25C8D1553000BC9DBB8D363EAF332C19BB59494C2BCF7B574A7
5F2F6ED58F26AE6BE9680F2C9675E230B0127A819A6E27C71C390C32E9732C3C
ACC0CC3AD132DDD8079DF50A479D7C2CC338495C5EC01900D337A5940ECA3076
CD6FB069A7A1C71764A16068CC051BAFED695CA82F5CCF4D5858D6836EB69CAD
543DA0594B1A7697C89586F7CCA1EB12675CCAB1279E1F3B6728CC184145A28F
6B05098787D96D8A9D73425F541CD490F800A3848E8BFF0D46BFEF02243116A6
DBBEB0C9784A4348C7A8ADB8FF51D22FBDC3F4FDA429AC9EBC065A56AB2AA52B
73756E944F71742C964995273E193C85EDD33F9C550C26992BC9A2BF3A718F0E
6D96E0D9D3130BB9BC156B0C58E975ED942B90C7366053087B650DE011F5D0EB
243F926513AF90C694F9FFE80B3CAE6D36622682F728CC9A59F7331F49C05611
1CBC3C5D5F8A297A9257361591140DEF7D4088D3F2082D570A1DC7EF7482381B
2AF098CF4C5A55240233266EB52DCEA6807036DDC3A1540090F5BB2B6DDD4DCA
E12EDE06AEE4749144CE14835DE044750BFA60F188537877B9BBF26FA22D3764
27AC06A1E86E3F18FA8F74E9E873AA62A2DEE42F8442BEE418DE233D741E3735
CA6D2931A309E28C52BE12D84F980FE0109EC357546996C65203BD496FC57BFA
5BD6253964DD43C9DEA2CCE4F73343101370ABD3E4AF6708A85CB82ED743B46F
18529F5E9516ECD852A141D1A114387957DE395FA52AC2C5166693821F7D563C
43EC5BE230E804286AD8535A03BF0799BDAA3C0020F4174EA359F717BC5972BD
E2D2BB4E21A9AD44E9628075CD3FE42F4A9F6190D2CE0DAB0A824D5DBC0EDFCB
0326CBF528015F2C12ACD8EC314266BA9F1FD4D5835F6BB7657CF2A0A1E8B7B5
D687CA7BF16378BEB8940C458A60F34350A80877148F5B9A1F2D2ACDC7705AF2
91F51599FB2855B2624CCDBB9FFF2B0CCAEA8B51E942C7CEED52F61A0246DB7C
E834363CB24806ACA28FB7C0BE961F806908D0C344F8EB0025FEF0ABD644C822
514057E210657C6CEC3F3A014A0C4CFD2CD60E22B004DDC927339B9EA9C0A3D6
3AB7D27CC05C7690741C8333BAAF7EC106B509850FC71815DD87A8CB6D24DB46
7F431CACC8B58B851DAFE348376C2356A5011F0D89D583BC1FA56D6F762E81FB
AD43848472111DDE5DEDA97EE65C2DDECD3D907D62D441D05E950B9A0D50B501
6F672352A15EDBDD18D51AA807678569442271699CD9BFAC85D4BCB44FB8CD1C
47E9A5659E22B8CBD28EC528A4CEDE663827A5F25BA96256A53561842351E1C8
2926277D98E1FD32DB476C67E8BC74C8AF950AD04C6DBDF2A47F6D473F9756CE
0F93B903EBDAC05B554BE4EC38665ECA680F6DE4C07A2E6246DCB24F189E3555
24440AF09128F379955A7DB9114AF97532A5F34BD9735F899B5DAF283BDAB9B7
746931E1E0E926D3D967C3A16CB1E3B1BCAA86C28A11486C27E7B7AF83A55191
EFD63D205E400235F3CD2DC38868BC95BE053DA38E53D23F15A776E257924BD2
DEE6C475674491455DA96CC30555FC799BFC982486FA693D8EA3E5017C451B03
9206041B449671EC721B575A000CFC63A71799051FDCF1F77D947B7ECCFCE240
2E3E6AD4A892E16010447460B4F933C2627EEABBDC2EB1FC9A46C55386785020
6BA1CE2D01A6FBC1F58C8921F9C16C216246C583D4F3919897ADE3C9A7E24F73
A811C217D4349511F04F81A4AB368899C0C1F0A9EE6D9E5C61CFFADC53835443
CFE8BC1B0EA10AD850BA51704D965AD7A4A945B12FD37A955F8005C5F6459792
9BD1F88472D8F8C49FDAF4F610635C0F03483314B5B48CBC7A11E8BE6B75267A
14F8D23CA5874C9AA17A713AF9D48DCDFC0215AF317E848D429AD5799AAC517E
D725DA0E460C5413CA5F80972A878A5AC8D9FB87BDC4EDD96E2FCC3EEAE33F02
0BC683C76A925341734F671F3FDAFDB62338245FC3178918604B9642F4B1C765
063352C40496B21D3504F8843C0FEC7288B07A51AF2B4049B37BEC07959F1920
EB0B6ADF80FDB62ADC8197389E76CE02B03431F143105EDEFB4D1774730FD83A
69378FB5974FF7B247225F35365C76ED5B305B583B996C664F7FF5D3BEAC9CD2
551A5869D10C24FA4195B170A79CE35C4372B13AA894419ED36676220272D54B
7FEEDD10DDDCE662403168762A25D5A813D3CDDDE32DCD4925E1B19C6FF6A18A
A6AEA3B812692AA6A954D20B08B33C5D022E0D5A8E50A083B50E72DB0B3327FD
DD44ECC29592EEF157F4595BCA10DB82A08487FC064D626BA54D3645A8EC2E9F
EDB3E59DB2E6E02BA2398BF40BD634563711901BBB6DE04668680D1F9DAC8FFE
3B6B94BC2D60CBC86AB70824B87C47EEADBF36BDBFBD3F3E9A863A421570F08B
3082FA0CF4021D7411C3EDB94244B0CA3175A514F90829E9CA665ED2BDD3072F
45FA57D34BFB7347F1ABCAAB94EE2B109FC8CA5383C6EB8FF59EEB5F04CFBAD0
EC3673AE2E597FC6F6E7159FFE91BE547F31C49301DA4CD3298D11219A040A0D
2057E7B69F536C0141F6C7D9C00FBDEFDD22DE801471D171CAB2B4FED0636318
293EF8B89617A1CF9B98D6C762131E1DFBA2F77E415CF04A4B413B2D58E5CD62
22EFAB776E42BD3DB46738727915E53D8D4690A28A1E189A0660AF6C6C3DDDB7
555A24F5E48CF6C0C634D485237C72E0CBE24E9DEEF3318B83B5AE793BA9EC3B
3E94C5CB3F5838E6CF63BB80FA0BA97A9ED4B5921A5C4B2B0B8786052C5E8F8D
CC9DE3900F93FC9C4729C67763358A9D8B8D7DB783F12CD54F2E522685DFD13A
979A6EA51554B7E234B19551CB995E72BF691738498EC949399EB698038549EB
507B2C2269BB2FD9329A1E19B5249C30A773FB23788271A10FEBE616B7755319
8A789E72E8E3238959C8C90831A4362C8E0C3A310D141AA7D2DDD0EF968CE0DE
C66BB795A8A4C51152DB586338B0E8789A6088EDDE1CE02BDE116B88F6A384DE
1D19F47EFA4152F22500C4B969C83F1DF93E7B601348637CE63EBE78403A13DF
5E22169DB9953B487B92FE6BB9312618680A5C213BBE70FB24D3AE2197BA3C3E
F8F0FF4F82A8D7AD9DC3F9E20479ED81767ADBA230CEA0F5B50B890F6C613CB4
8B72AC3545211BE59FAD51F9844AE8F0C8504B9086609FFC1EEC83BB5677613C
82A4C00E3FBF92504B2976672A693BE1AE5083E6A60957C760DD0B6C7E6DD0E2
25280E047F8DC9AAB261C46DFAAB577C1A3423FADD400C99E3928A38DC5AD62C
976400117529E7C11C2BDD699A1F846AC5D91556C3BFE5E2EF334F5B644ACBB0
F7E0400919B09B49B3AEA21725F5D0F49EDC8C4C9C50A8B45C55E1BF6310FAF7
C84BA385DEB552F9A5C90863C06D0613D0993FE671C99B2F2BE6692EEB2A093A
660A2D80AA5FEAD234BE9AC28611EE83825F1262356911F3288CEC83CC64406D
E5D90A0D10B9D09D4BAD3A8729BE2E79F4AC51BA4EFE4BC827063109BA16438F
B4068CA1EDC755E37BD10A204F94345FFB6121289BD5D224B6773BC36A81432F
3C28BFC2E503F0E1AF77CCD529C784C3B8645F4DCD7989EAA128BC1F16839CFB
70A9ADC1D305CD666B0C5D66E40AE25E669D6C523CD2FEFF2DFC58FF93374B1C
7F4210789A077CDCC3A2AFA6684042162729D744BA55B569D968B34FA59E86D6
1C514380107BC03CDC575B231CE230951B3CEC622EBE16E4ED787B86C3BC3BA4
5477A010174D514A9C457E88E9B34A897C2AB13BEBF2C55C94E4D9879C4417F5
0801F3424203AD8A159DAF45EC3000CBD209A2AF7A67981A3D830A3681F6951E
B9408498D1BDF5E625DCCC0BC477617E266F1342585D0014ED36A34C8552C571
ADC7C211874264CA49491CC1CA5DF75A45EE4D2FC29A8DF8CD24FC049D199A4A
8CF21262199758B2B07C2A37F5A71031F94286356A0E97DA2C4C6B7BA704614D
A48B1D8E40D824DD8B76A51578111A66E69EA4C25ABEAC6DB8DDA112B42F07D2
B169AD55E6360FB823932F3A12464B7AD2D5428661B2A15A177CDE5123C54075
0977BA3BC7107695EFDBD03424A0BAC81570931315FD643EEF251D6213506478
A9EC0D95BEC184DA2141A8AEC7B57A1557B12DC3C33A31D47E14F4FC1765940B
9F9886D775840E61D84772425912C7FC18FDD73E045941ABA3802CA8FA0E856C
7D10901464A7DF71EF0634548E83E86772E4A5542CF83545BE60C3D0954E2ED6
E0CD9EF00B0A5C0D066F685ED8C783F4104D75A5DAE979BCF7629C76464EA039
A19FE0549C7CB6FDE346285FA3BEA661D6922E038504604B38115CCBB705EC77
D5EBD40F53AC32B19986FACFF9FF58DD7A472A9FF0C168479B6B7FEC27CFD3B4
6959218B4A2A939764FEC56D06C0F8FF435DCDDB876051DB23A8F721B06441A0
E248B9BB0197603E1EBF1E965594E0364F1D54FBD6E37A5651889291D3F692A5
DC44B2893C9C57908F020BEDF2FA30838F6E008AA8D9654F5A01C3383732909A
B8C0EFF6D4045E327988141158140A98E34B39934FC130D6E553CEC48F3B7151
6DFB7F927680679B5270D59A8D2E8EDDF908066829ADA91DA1D968D5BA9E31B6
4E35828AF5C2F3966893386573F84AAF8E436D7B71E52E4114AA63290F10C989
EC6F39C1F8941CA9BC0A19E8A3348F9E29766599BE30B54AD5032BA85036B115
11FC5462B1D9322BB888F23F33757CAE8E59584BF2C14CB2BB031FF8AB496025
4F1ABD3099FE129C3F02057DEC9BB54C16ECDD39D13634B978B88B8E82969D43
2D227A24D54A22570A504018E6DB377F9018D447A9F592D1ABA356F58CADD6B4
11568DEB404B9D8AEB24C1D87CA715566E0D5A087AE4BE33F428F3231E449125
4E65BBA44B8A5B3229A323B7048692004E8D5B1CA16A05AA6E55705C785648C8
F77B93A92502B99826FC0CF8CF2D402149BF7F3E93E768E65B704A5C41057421
9353816B83F3F1233327D047D048A269D832ADAC241FB11DA950F2D8AEB7E388
681A3A94B5475966580222B273320B6527BC4CAD3B5349031BBA489B78A82148
C694F0ECB45F5DCB6BFB8E3B400D051B27DDAD29EAC30F1FCA4BC7053CE7D319
5CDDE8408F587C20E675BF7899DD76280312AA0240DE25F71CFFD7D488047C65
B6D48EBEA6F5C4A24531EE696D73C9F08003DBB967CA5876B77A76DE4733FF19
05B3B54FC8437DE57D9852BE33CCE396251BE474E1CD0421AFDF8EF8BBEF1A55
A9285C1A42479754F7AF1CFC91F03AB4A129E306A079CB0E9C28EAB7220005CB
EDC334B11333342A40D9D4223CDE0ABBD8D6B0FA45F5F767FCAF398AD41B7B95
11F7C941789649F903947E235AF0F3C861440E1BB64E758099F331BF238C0C45
49DFB0AC519DE36B7F9D94DB260D6E71730EC8ECC634BB80A6425EBE51188224
52FBCA6AA9271EB162B5F3E69CD7B9A6AD611A80DB004C9942FE2DEA69DF8232
61E751C345DFDE5F09E5445375D36F7194C1F5D9A8E070D741B15B07718F8E96
EBE70EAFC66D91E18292DD2A4E4FA4636B473B5F02ABED40A86C7417468813F3
C80D58B99A15CD405A32F9C85CA4F76A0B3E138581B9D885A0C30302E1AB64E5
841DE3CB3CAE1DD1B07F793CDE49AECD01145EDEE320296EFC860D2A57D5D9C2
31B884A7B8249EABFC662FA55862DD7CAD0801EBD7C9A01412E0F4C69DED9CA2
889A35B33A34FB5CAA3D39B46543E0BF2F9D3143EFA34CD71B9B9DE91E5A426A
B9B5EA106E3A8E0593101F15F0EC1ACE3FA8D3EDD40001AFA11762564A845799
AA5D9426F0B6A0995FA0FA6E45E7A7897A5E0D1CBFBDF51E17583FD619C192BF
90856AFFA8F6C779460A557DB6EC4D73F8016E85F1F3B25D41D5D5849EBD6FC2
90A9D08E7731183FAAA37E13B1B3B900A38CC74F0D240A265C77BEB8EE794EBA
DBDDBD275D06871ABA1FD39631DAFED73431A9C936B9E10F25E5C13B41FCBB65
23F5726CF2A49D41A54CCD6F36DE272F69929FA04CA15E8E1CEB36825421C922
B5371BCD6FDCD23A25B9940076AE595DB74FE36BCAA1ECABB9724E973A66B402
614240BC1322E8B257D01C820D7A4BD8482AE7AFF0E3DF94C22A124742A4B0CB
64B3C1B74C01767AC5FF37F848981ECC4C92B1950D2E1008D380F1EFAE206818
C7BCC1532ED120A22A0BE2DB85DF80747E74F9F242AE84AB85E597874FD118F0
483AC7BB931494D07E570B1DF6FF243CC3E8FD348BC23A7C7BE83587811740BA
871EDA5B019F28731D15AD5AF11C3F6DC57AFE0088A65B6233002EA38F173D2C
7B5F0782B7023D9D528FD05F2040F1A77F70E1E9721B19CEFD61D47EB54B2BD9
9C91405F813E72B73638FB7CADF6C418A79E0D131D27737B77D5034577FE5964
3BDE0B9F2C9BFA63EC078917A98CDB5B02BBFCC356903E2328CE445F934E2AB2
E13B227A16748590785C3635BE2673845AC278D513D4FD901529147F19D399E0
304013332B6952B84D332B77AECBBC38AD1808848C8AF58B7309BD4AB80818F6
C1C2E3B4D9DC119B7CD32381D79D60BE6CC01F806211B8897CF34B70C9E80A74
EE2DDDDF061E61D1037610DCA0082B4EC2827FAEA04B2F63AD03C6299695C850
25E1D5B039BE2C981AA8E89A3E266ECC742DFA6951866BD920710443D3B17C25
9F9091BEF388004A801966E9C1CE3FC3472B64CDE5BCD9D1C5B080C962D5D7BD
EE0D626D73139CF18C511E554444D7299E53C73F49F9584C05A2BBB9729800BD
F8C5B29D9B76A4FE7A8B5BE48CED8A9FDD6A5FE918CF37BA438960E221269D5D
560CB3BCDCC053DD53EC5ACF9BBD35E7FBBD5A32BA13F01AD5A9757EDD6EBFA7
1D8A8D98B98BEC882C325566C6BC3F4596FB29631B6F7391BCA4E76473FB0234
43C31193F41312B267B4BBD96830A117E7892FDF4F46A0ED60AA130149651F57
44A27EFCC64CCDADDDDF28DD4CE68FFD0BB013E8A98C9B7D684F40B9CAEF3B60
FB957757B3A3EB778B484E22408BA5D2BDB31A8646DEB0484199BE8A247B6CE1
6FFA09A3BC00863EA9CAB8FFC5F488DE6C57A348CA0BDA0FBC55BD73CE9C88B7
E2E9128CAAE91A8414EBFEA809D73BDCF6AD1E062483D5D248A0DAEE658222AD
6FFF90975F0BB6CEDBE9245CE99910FFE6B3F9A5E67273C2DF900A411A6A454B
745938BABFF0F58AE0BEB5560A0E58EAE230DAD77D9A03FE58D44AEB2C86C4D9
DC15103594EC513E1E4DA476A3506A092B4F43F7D8A513A8E3CAA2CC5B2DECD3
A23016E5E1564AB11EE10C5B0D3C02F5A5EE8472AAEC545F08D2A3984290DCF5
1F90D93A7B5D32F15D2409BBDE922D69EEF1365F755B649959BBBF8CA607EB12
F341DDD56247790EA44094B60814194E9447DF06782FFD8EDEFA7D9B8BB80BD5
DBF2BA76527614BE39877FFBA23FDDB0A222389786A0EFB0F461B396AD626B98
7F848451BF2FB8C7A3E618B2B718C57402A81456227362582DFB8EB276CB90BB
D573952966F36222CC4983276CE891540A54BD22E4EA8E353AC31DCD70EC04AE
F06149752FE7FE13167E2181C9DC66783428D2CAF1466970B965D0B7381EA1EF
0C659555FE7BBC3B612D08DF3666DC839270C53B5EA63A6589865DB9C3C04340
57987A88AAEF32F43C05EC766C0FD124FD68CF79F069B7326466D7DFB034758C
1C54A745478E78F74769287027461EA36335636803B4D1393A89FBB6EE8865EB
46A74662CC14D7055754FA57CAB556A654F0CB6EAA99DBF849C7D569C08D5374
91AAECC0BBAC64E5760DEEEEC10EB5F5B1AD9F6563B695D3112E02C4A789AAFC
59C53F7E34F970154192025AFE2459719FA4F4D1C99603AD3A6173C71B40A5B2
BD64A19D367CCC4E89D34DC1E4F8F46BA7864A3E811F47986CC3B29C4EDECADC
165A58FD441DC0CD4332239978716EEE43A02D847BDB02DD538A12B34B33A9AD
1BFDE01CF44CB66222E6A1C7E4A424C61E753AA4081A20F5CCE620BAD35C824C
A29486FC359481E9B99E5911AECD423A1D54A462A9BA6139B42464D1FF796153
04A65FB7C4DADB75C49A785EA52B26532BF06EF31A4368603D6B8E71A0E61EC4
FD0D695AE00574D0BD03064528B80E649A0E8403D5B865E965837DCB8FCCF635
7112A758917F06EE76CFF1063E50BE9FA452A26A20102DE05AF4F63A98520F27
F654CA9DC887C23A2C6C313C0A6B57B6311BD322C4ABCE992987D4C6DEE81478
42D767AA1529E51354D8BDAB17C7A633909BC4F51848BFE3CD1C0E85199D18B6
FCCFC1C00CC46D04779836C5F24A5593DBA9FE1F9F7A5B4FCDBB28465D30A2E2
44E89F0AD558650EEA39978F1D73ED86CE7A108C505EB38E048D94DA5864148B
1D34D90ACD02139B72551848051DD7BE711B1AFD8AA9F9E02DACFA57E13CB0CC
B196A462A61DB552134D5A2787782D4DC7AC66134A730C1EC50D94C467C6E560
5602C340616C830B22B810759A1BD490068547239ECB8F2E788BE91094472197
C141D07B7DED25AC401A0E0F6D1048FAB7C1DE17D1C0F72B8BA4F1C73CFB1FA2
ED8EA9F87881A803D24EE88A958CBF275DD5C11D79EB1292E6BD02BB5C388195
E801FB33EA4FD49ECBEE3E805C54AAB2DF1A89C7632544B415877BD9CB4220FF
67EB26AD61D5EABB04DE5A76CD3E89891FD0035CEA0FD5C118BE053CC3366BFE
4D826711710DBB5880C9D574FC0CE8CE250FAD72B8A85B7F11B88344F1455361
8A71FD43019637F35AF2DF8DDA93E41DC6FE8DC8226C4D07D41A3532DFE1B965
967CBF7451809AA6A878764E455181F1B1B0662C434E69DD9B03BF2075C8AE72
E7FB4BF025216A057C6AD831515C0A6752C8EB0BA715C90E925468582DCA44D3
498593E505B0F76196793E5276011790B2771897E11BCF65003FD02D3D6F51D0
3964DBDFE38C6ACC76A99D5C1407E52D9F7EEF4D945406C3C998E63FA1B384C2
4F4ACDFCC96EB0815A8D68969D01842A67460BE96E0FD6BAA8434094A5AAAEEF
34780111F8711A8E4C2539A3C17FD3FFBD1A8EFC9B5187D863B02AC1A79413B4
536501922114C6447441C8D173328A42B4C22C4BEB23ED13D59F71AD38D0B3C1
973D171BCC4C30DF26DC2C5661F74EEF409B918D7B6647869A64E63A064E9A1A
1E40A8782F5E9E2B730606CFA7718F86F5321BE28AE3867F209E387345C9FC48
BE0AB9FB7CC4A5D8FF15BAE46A5657A6F5126F9A06854BA4A945AA17AB68D5CB
662BE0B1D3AE61F1A0B45065C702C23EA20A3068D843B0EB23AB8E05429F3ABD
15749A54893931D730846D6DC57E064B720D7A590105FEB6F0C1F2A79B2AC6D7
7EDF093F9655CC08B086858ED5BC7CA5BFB45363451A7835400C21CE4724C4A5
B329E81AC264678FAE469597B5C69D894220AD8CC9AB96B6443B97E9E16C770D
FF9AF6361E24EC66436686C09EFBF7DAEBF8092F501E16AB2B38026B2D02B42D
9D08C66149225D2A75B09962DC2BA9B31EE74B0A01DF4504DEC97479FD4A3CBB
DBE6A50BF421F5E272B827729D936E0637DAB73CDFA0B9777BECA408918EA4E2
49980B99E4D965E5BD0087BFA2F560A74FE776B80D1D1D7F10BA9D83194164CC
9EFA1AE0116C342F852AE4F0E096C8A45D7EC00D5977ACBD405937690E9735BA
8A48F2C3CB2269A696B0E62D77EE488D0330C6CA3C4B87887BE629716E0A0909
1B6BBDE8B927C968934676F026D77A9782DBB30F18098C4BE32CB8E363B06455
9D0503D4A2B82CBA82B08B0FB6FB7916CEA20E26E66FF7FAE3068468A096D757
5725887E0C5F1C963EE2BD777E6FB6064BAEB249BCF608988975AC2DE0528548
5625B68448897E7872E31F12A3970976CEB7DDB3BAC5FC0F4AA976C8806796E3
08BB2A1599075365DA799C5063FB5F7488AB463FEA43F72BD5D1C6B889E44CCC
2713D86BF55ACA000644DFFC5AD8DA17DA574A2D612568A755A2475F5524711D
5035DABF8BF4C7CA56235F280A19A2EEF8714B518561B17A9860DA936CC61220
114FF85B2C54A55AA658E6167FFD5603B9AC3EE7DE4FDFCE3F2A0300BC063E0E
F740120DE745B8D8DD1CE033B296B5E70EFB065D71AA5F91781805286596FDE8
EB0520FFFABB84BF7D334EE8817D8B7DB8AC8F315F3441B03AC32E5F76FBBEF7
12E604BBFB2A1C147FB5FC15F77E40B69AD4C51F95603B8D35E9C9F21A4886AD
1D380A31A4F8BC51B5028A6D3A83F79CA12BEDF24EF220FDB31E5318E97E0E6C
E2CCE693E6DDEF6F606499052925A92942B5CF2982F022D76AA70CFA232D50A8
E4ACBC3A4A0B6E7787B3F8CB21775F5D28DDD31D9470ACE0D0C0DF6349FEBFF6
363312F2E4C99F4FF66DE097080DF0751606E4E8E37EB2945D2D70755FD31301
E26F8F20910AB094CA9DC3606B93D3CC26E1D16A05A03743C36497901FBAF7CC
EC5165C8AE75FE8ED2D7879C8C8004101CCD4AF2E66A4AB04796C0B05D90A5A8
23129906078AEFB59E909601EAFEE241876108A668740C405FE19973D1C2649B
9380D4EFFD55C415595B4142166DC9ECC9D22BB79FFDAC29EB7D3C3F92FF3F0B
0655D40A8E253A9C6CC536E921DE1D32A858400E64721286FFCECC01B36F951D
73949988BBB9BA65711E637AEC878C2BB74BA88FC6A3BC238983A5246948CCE7
C86D0717EEC2154F81C84772C66E84E04B0D6FEEA31F19617EA7EFE85B461EFE
CA43728C2380D16D9FE3A910F87F0E7745B6E7E377278A37C59C2D27124AF871
F01022D80008454099162630E15BFA39AF25EEF7F1C2E81647141D24B844040D
228F5EB02D553CD0A893CCF96BFCBA3E9B52E0FF0F7DE1334DA432D462D39FD2
78C7260B19659456B35804A1881306BAA47DD9857F9825CC6C6389300DC9562C
CC2014464A0BD02E41851B0635A9BE9DFFC634AE239D4C3510815015C0EB11EA
679E90C2630834A9CE0F2C23887E435E17AD2E2315AD800EBEE3CF25689B210E
E71FDD7AA6C8BF44B567263A96CB7D3A4655484C073F981D15ACAF54AFE9A6FD
EF858649B214ACB9D60E1DF6D624C68AA6222FE1D0E9B6F306626E6F71916BC8
467A07207082B34610E4CE877C4DE85FAFD0906E11A57DE8AF00B974939869E6
DA7BF32FD8BDEF83477469D677CAF816001D373F368AA904AD2A08D3CE3720E2
7DE553C9CE9750886C848A2C922B25DFFD56C9E3D03F67B2EFE63589DA530315
B9AC75D391CC683881910C957105269834BC407A66CFBCB2356D8F77DB1E4218
E75CA35B6E3999324EBD8D12BF6194A28C85562F3BC1FA187691437706B9C59C
DC1729429ABA9013E2893E1788C1D1DB4507591F8506EE149371F4E4932E3671
BEBB75FDBA752960049077C1B8B34BDCC20DFC902AEDC874B4C837DCF96BD8E6
DB52B7B4009321558D70B5547064F57CA7FB84C5EDE850CA254A979DC5B17B95
0CEA4CCD54EF4DBDDB3B1EAE1348D1FD7AA9EACB882833958CA66E537F4DECD4
92A52C7F90C3032C28D3CC3A9DFB4194DD4AB3AF24431DE98546605EA1748712
0DC1BCE6086E62437873BA673CB9E41076C1971B846D7702301A77D39F7666CA
5C352AAC8CECB597CFFC2F1B8D3DD50B382998A4D6042910DA2DF650754ECBA4
6A2A1C303300612F0312588A121F0206F3BDE06114E0A7974AD94901E7D1914B
D76B7135927725ECBCEF72D69515D92BCFCD52439DCF5324B234B7AD11899B24
774D879A780BA21F684ABB249E78366D8E93741A4C1984EDCCFCD59F7D9DFF65
4EC4FF5B5A012DEA5803A44EF0E1433FB5D4DE363457A3B4444365CB7BCAFB47
5E1810DDF08C00E06E0195E9C3D8CD82284920CD8A6252BF281412E033B55F75
41C3E1FE2AAF08013A1AF888C3C39EE484634D017A3696E07E739A33324E3295
6174BA01233039695C5461E74F86BAD5DEF2C0EBB88DF89DF177ED829F4C3453
BDF12A3CF27AC9EBB6490AF8CE6120DC1D4A49FD15D7B593C971D32D373436B7
D0F896C1CAF3E4DB41F8EC90244284E72EFDC72D49BA5F1F340A8D3F2C3CD3BA
060D3E3FF5EAF38E35BDEFE3E247B7946EB5BB14CAF071A4F8C642FE5E996348
6A77A492D8C4993C3122F5EEC98D02ACF9EA6904D884750D90158DA9ED3976CC
7CBCCB3AAE909C75B1EB9C13A19D55BC8A10A1898130E55A9EB8736B9EB0E742
B9E93E14B766CA8AB94E2CAA65677C4837D578FAC846D77AEEE7F14BBF11A759
F59A36F28F6C40CD614F18E9FA16F73F1743553D9D26389FAE433B5CA20613A9
639AC60FF0E8A338CBFDD4042E32532E7D04D1E6783D348800422F754CBC5818
69A2A54A9896CE890A74C6B8C95F76977E198F06B2808CCE3149285DDE0A8736
716631BA515EB9856F528EF173E483782FCACA8DB225952E5F1C0E82E48C490D
5BB1FFC234CB4317FA4D4B8A383FD14E0BB7BC7F81B30458912B40D72C6B8B55
B06D8912281ECE15B7FC1A6DA067173755C341D64E84A1170B0547375222A669
3167913167747CA2DEBD0E86FD9133D41A1FD65F70C41AC048CD00F5B65AE9C8
560FED07898D2BFA831CEF0158AE8E4FEA94F930201F13D9F9E9A3BF6AFBF184
009EE2DD94C933D90CAED51AA80955F86226CF381C72291EBB156239AE1BACC4
B1A7C9347658F8E46362D3AF023BD2BDB6840929342A62B9DF6F39D245E91A58
48FE708E9507296470859B94B170F45B425B80030CD43125DC82E9FD230281E2
EE9B03077AF02B15A90D1197D498923EEE9B65CD1F3BB0A3F57514891FD61D4E
F00A7EE36053FB1EC991C1E3296AAF354359B2334B6D01149EFAA3BF7614E76E
A86B408D51CB492A289C9E63D26ED51C0D93FEA47CE5CB2855D5D04C6530908E
BD5314D156957A2CB416B920AEE0AF5044A8A5973D6E84B1628C82ADB3A32F05
92C58E521E3FBB4391106BDA51F30439ACDA8148F6D4C39270A75DB4462C63A0
B6D795D4EE9A40017DEEA2E49527BFACBD40CFD211ACDC52D3901B80DBB525C3
467D21EFD5D365D36F7CCDF061D45906A25569A5E7F2FDA0209EB721BEDA12E0
5917EA91441A017EAA8F1F489ABDBD2DA5AE17C56E64998CBEA5DA5691605836
D77C7AA5A37C53AFA0FA794945B39D2717AE76CA2B1CCD46451C7E4B6B4F66F4
1591604A1548637CE63EBE78403A13DF5E22169DBDED52DA8F05424CF37B84C3
E066B665ED573C54C422AD7A80A7649E1A0BEF55A97594DF3D81D19BA2E1760F
73F58522EC6FD339BA67ED92F656724239EA5AE88B7C73FAF13FF8DE0A7C0EFA
5A82CA24A5F74B981853C84DAB15CDBE3C40E126C275620F222D6EB778060F35
A5CC0D32957F1FB5E29FB62B1FEA0094A55ED02A0D8D61613EE70CD2563B3452
C0642744069FBC09FD2CC88C3537CEB2B12338ADB31A519315EC98101D4F993E
9654A0D5DABB7B196033C6E508332259D3ECB1878B9BBDA8C46B99ABE9757189
CD7B02F27AB87F6998826D133021FF3CE62E38E0F209E58D71248D2CF5C85A74
533C8388D80DDCB95422DC7897E3FD01EE40A187E3797F3A9CCA1B21F6246BA0
12FA37BAFEC375C8CE04EAF338634C54961BA2C3DF6A49C65FAA3705D3A64803
8303F58AD760EF9DF97C727B7E6DD384F6035F04FDB35F1A395A7FA33864B449
BAE643BBC8EA891CD41F4F9C0BB4862E3F711FCD6D60BE476655495DE9CE96F8
8555F9928901D24CA03B7E47417F45D0E6B65FE23DC114ED5F4718CACF57593D
E2E95566752AF7E34861A6C04F49A5E5277FC90012C7458FCE101E307F7BF6AE
29273EEF329AF95096A631A68842B689BBB4F12FD99925C17F1D3BC1E7E5ADD5
F25E5D8F5B0A803AF98348FAE7036CA28365DEFF6415EE850756C9BC5E413EF0
273CF43FD10F89A0081A6846E29948E61B8A881C8AA86EFF3D193BD3ECFC5301
238CE13E25AE2C8FF135C80384B8076259B640028732316D14A777BF16E7B987
9BDC37C44F198088D8C3446E158464898EE9F836E6D07793BE53C4768FDDD73E
B87322DC2D7B09B092AAE77C8FC61B4FE27524BC50D349A2CCE13AAA7AC5DFE1
197F5F7B0AD6FAA5A61E4F6414EC96D9EF6D9F7836B85251D4DB9CC0DA49527C
173FC43847F0E1AC665A358233C597FA1CDD622BB3B9DAF843C3758FE7062522
7C31D322733B1E5706429E1E3DA321910FE29B4698BC9FB3375A9AFFC80FDC10
ED8071EEA3A879332A3F1001D0D6072CA4B5D7338A9CB39427D60E37548AE774
3053B02ADC5A9E7E873137DA91BAE681225C8C9E67D05506A96F734DDA2FBEC6
5AAFD32B2D13FE6E9271771CD6567504E629DD665E9D57390C4220A12DCF9757
9E92C2E678DF07F6E5F7F9DEDD098FA3D2B1602C8DDBB2E6B432F8F51FF93DA9
079C9AA154B1F94D996862DB0396724F69FEB1EFB54BFFE20479ED81767ADBA2
30CEA0F5B50B8D4DF6C1538800689BBE65EFA1FF1DA06BD970FD3993B09B5E55
7C739CFA3A3C33B647F2A06D2EFD3722D899201C1E703D35EDF9B5DA219014B5
289F3C429FDF271C136B8BBA28491603F404813E7FAA4D0A0711CFC3E1A07E49
A0B03F9003DC184BDE0016E3237A957ED79B72EBC8EEF888D3C6DB49B71ED83A
216241D9698EFC29756E29E7F095EE86D9CDEEC4F306D37D6840D73B5F679F14
435D7ACC2B56CA52EBCCEF96F008ED91156A4782410EAD0B667DB91BEF0E8AD8
D2321954DC91F8178303A63F8E9CA11171D67C102BBC2A346F2650B1FAC11EC6
55BD8169D6B1DD2B9A3F6A0A5EF8DA17C57B075C6806469B92AADE39D1600D7F
62213B27EEA52204E1B4A7F6150C47C28A0906139B737D5F357A5368A2359955
7D1C23EE030444CDD8438D9FB3D1B58512749BFD5C15D966F294F2243FFEEEF5
9E6818E5507A855F91819A6C75DBE6781EE58B973EE3D87D706A3086BCABC9EB
1902B231DAACF1CCD842308DFA9D2E86075F9B3F92EDBE30A2447AD54A7FA487
0CE4D5AF5FE7C52CD3410CD75F1762444C565FCB6F851CD74D3CB86AA7045DD4
BB32D03E6A0F3B5BBB0C9016E84FD89D639CA2A26D5A54ABCAB6E72797084CCF
43188D40DD39B82F0962F4E73A12FBC669BCE513D30E78D7EE33D211A66EFBA7
C1A2FEAA317FE1ECE72587561D35FC03762C22B889AC2A2A7C0BEBB0C9186092
BF215107AF7F4880B539B756E125867AD4461EA45C907DF9D9410893D24365A1
D19CA7C1AA0DD5A7D940A289AD5CBD888FBEE73A0A50313A6C53F47F0BD7462A
E367580D62A1ABDD33A8F71C3653466C5E848D31807317CEF7340DF5751FBB8A
EC8F365ECB446B6A381E9303380C068DDD25BBD71183536A3AD35E681CBC3F8D
A00E8FDB1AC48D504CE91F8896F9EB2F379DB1C94389DF02CAC58C1BEF50462D
A5087B7162F1BDD5D152FB9C4DBAD95818B0AA19CC1B8FB274A16300BF66BD59
49AE733BD3DE9D2AC758F24EF6A9C3F0AB7508430357F7164B0D1C5FD6A72DB1
7F526D5C64DA4CD03C133314218766016C978D1B4AF59FF5CD16E93AC1CF19F5
1A76E58BDAA87993D2CDE42062FD33A517A2A5FEF902A5022F851AF557C8C4FC
2967D7320098776F786DFAB8C427C2CCBEDEE5DC416BE814D1C5E71A26648DD1
F19711A2F3578572A1105BE14F807E9993541A3994DCE4E8E4319A2BEB80962A
BA415230C05E620BFE11CEF3625AE8F2C5ACD84E0135EED01D4A22FB10A43D7E
F0B6C040232F8973C6C2ECAD256DE883E2D93634978C08979407171FDC1F0388
28381D562D6820F7BB659C3C785024981BF75AD1F61ECFB1883B4441730ED96E
79220B0D218B2ABF7405C9E6A7DE351875F6C12A74AE111CA21A00CDB6613D3A
0124F41EB6BA00B3AEB114CEFA8FE043CC12B42AB03317C9D5E36861ED89E64F
677FF348E8ED022BC4B0666E6F1AEBBAE7467514794D9D414DB464B5324B0C2E
C51766EABEE7BA2473F5869BBBE05DB39C0DA0F9952B72C904E621B5887FE22C
56F264C0EAAC3B72EF1FA79FE1E56B1AC74ACCC39622FCDBB945543ED13027D1
65D2EFA4FC5397266D27BAAB09FE62DDCE224AD9C6CDBC50A8C9E9055C696E6B
C9DB8E4802CB05DEE334884C13832466823DD8CCB8AC705A25410F9DA361E1FC
9E08180AC11099E200063B4A450ED82E0F6F47C1A56CED39E51F5869916B173E
FC0CF728FF5CD76670E3F30CBA547BCBE809D5F7295D6C03A386B6D57C09F26F
6665AAEE694D1BC7F57292ABA161F72C8753D2701DF383AEDF5B51FAFF017401
2508F26EE4CE913DBD1FD04EADE6259B99859A65C1470F3E35B2F28BC2E9D857
E66B36BDE8A66BD5B31568EEAAB289A4D78729FD9C05287689E72B4CEACAAFA8
8A9E9D01DD34B03254F3561A59CBE67B0224A05ECE391A2BA92AD544D206D73E
D82E13BADCB015A043D59A68AD7AAE8410BEB43473557A68F01C0C99CA2CAC35
CEE744BDFAAD1CCEE0FA1DD122449D004933ABE5EF0227DE8507D664D35668C3
206034708F56EAA65E5539494B42176BBAC6D0078BFFD5CCE71EE51305795931
B9F172372AC98EAF239D15361B6F263FA05467F4E6D963587F748B6A84F85D42
4834BA1C6DF455ED32F1F0507C8A33D48E6AF436C8E0E0F7077B37838DE90770
F05303C9654B2FEC800ED24F41481153D908EDE9721B19CEFD61D47EB54B2BD9
9C91405F8D8BA6EFF247E85DB144650433CDCF08803C3DA50383748D61C22C92
234963DA6A0785D446528F2906D96939D655E5D21C81292D7ECA400C531D222A
E43890F66B92298A3999D91C85B344A66DE1B69E322BE58AD4B8224C70EAE05E
387BA2BE0759DA1DE3206C18E482FA30A8F4DFD6EA44568BC2967CAAC68827F3
A7E0D1CE5F0EBC3886D0F75EDEB96045B16131173FE56BDCDA147B55766EF8DD
7038D2ACCA7BB187D7FA64AEE3B225CE30329E31266FDE2325C63616A5D11228
209CEE30FA83953E0F9190627997C6106B406964290717E1E5A321F880AB36EE
163A3CCE56250F39E62D7D5AC2AD9B54C02CA7331E027FD6D3FD81D4A95C25CB
0FE62C32C1C6B7B5B21FD5054AFAB3CEC3067EB3C135EBBD0411E336869B65C9
65D6911B6A7F25F5D17512BE8ACF3EC5428C47AE870B2C8F11D141BFF2EA9831
2A5C98E09AD2608F7A6FE17E1438A34F0AD945F2F42A610E752FFE6FCF211B47
C9EBF1E1C557057D019BB4C0B04A9E8A4A921CAA97603AF46CF4415C5B713696
25E714151D4C394EAC35534343E3827B5686685EC318ED34DF8996D55CC0009E
14367C71A89FD9E37BD74A474513BD66C1490324BEA17CB6AB27D3574545933B
F01C0E31E1A4CD09C52667D67649FF581B543EC76D0124CBBC6272691D263893
5F2489E87EBB5D3F92FEDB617602601A44126CF80AD111B254DA5A7D7A1670ED
47FF824A9F0C86A27F05D2FCB11CA6CF1127E2686BEEAF4C2359420DCB24BFE8
5380886BEEC50E0704F27927A854234631EBA6B4597C110C8D0D1880A446F9C2
FE922A89B7012366FA78AAA7B20AFAC4C8572A5A86D8038E26EEE0710AEEAAD6
759A354B2CDD077D446353873ECA772B865162FC33328E19749A05B9BE7A6516
861F668A71C7D6B094B14FBA7499E029C1A61B0AED92B67AE4BDF333D06DA8BC
025E0C4710EB66498F516A07A1EE6BE91F8A7324A7387548E5BD50E3EC120210
CA10149FF71C2B2344D2D031E97F899CAA8CCD62899187CB85EE4DEC32720277
DD16F3039A9FA1579DF133C8556B061B4C24A3F74A2746EA09A8F9957D20F446
4AC49E4B8E3821635D8DFF8C9F409C4B5B57B1A5E6E94DA233359CE388CEF0E5
164D0BB064C7AFC151C4A9A1C13A034672913905A4F3ED8B8843010C92022EC7
1123D10FB3CAFBE398912A3F22F4B3113BDB543D678722067D837D7554E118AB
6DA3F543273E098CE8E79A42DED1B447602A97D3DED896864A31C7074BAF6C19
3CE906E54F4678678593F868AB1E13917E2BFD73BFF0300C0F82B983D29E0742
47A41AEB55EC17EBF96D1736CC0635FB44F00401B7DE02020F6746130014930B
E9CACD957127801C3B0ACFC5613463DCED8AAEE139A06121769FE82767486D36
57BD8A56DE2A56666CEF8E2A03C9F6674DA84350FE249A95A5EB24F77E155406
88334556AA31C57F804A362455615F8487B132609EF1C4A6D968D9BE7061280C
CF4F8A74B712615F44713CEAC50CBAC2216C9D37589111F5425FEB0604ED6181
F52D7E87E618E5E99FBC80AA5CD321A3B62E337865CD47A38A540A0C4E8BD605
D07DEAB0EA658C8BB454022D10F1B8A03CE3EACEA56D8399D29D37137311D234
79A3581BD838DF6BC184D93E218ED142B1A2B45114262010433C203D7766BB44
D102F9745D6349200D239A95A5EB24F77E15540688334556AA31C5782B877846
52421FFCA871B30E22B0EE3B58F2F65A8B71EF2D509F6F1B3D88BBA9D7ABA925
1D77C62BFD5B8238E742D458ED8CC0A7D51605F2475589A87A1F1874AC9EB575
FE95EB0EBAA430BAC007CE40DC2E7C7BD3611AE5C96585C950D878A52A037FA1
EA429241BBB4B2CF22246A9F1C0E84716D18CA2986F81259F8DDEC3DB211B084
092934786614ECB5D6E18703D73787916DAC079A8992131E87B5047CBC39A08D
4A2940147BBF0E47E5CE54F19EC59748E12612E93F8E6BCDEA983A0B550CA986
E90B35C618A7879559D6319347332DE97E3537D680D5F6B09717920825C24108
24AE511A077DCFAC287A99816C080F7829EC8D6D5C57748C5E358DCE3DFE0CCD
7E559A144A7D9BB39802B57D2FD36250A5A2105353D19FD21D6BF93C50EADC40
52D4E048AD4809EDACF0487CC8ECA27A61AC2FA0CD91A203B3F72C834B8F214C
E87D09B2D4F1B5189AF63DEB0CF132A9AC94532867A274A8D1B0CB8B8032C2C3
7644B2AFF05020C26B3165D4816466B543A41DDC2AB804E2BAF9254EEC07C39A
6F71655274A80FB6B3F732FD9469ADFB2527E23F79E4F413152B97F9086CF59C
8A0E8844802657B3AEA3626A3BFEC1A3D681A79E1B775BA1F13A05E1832E8927
35027B96BCE191575C60F0EE4CEC385315D495F6A1679797B809E11E529DD3FB
EF707B918C88CA2F2287819088754CF6A2CD5D6112CB2BBD20BE1BF14D46F84B
505A90A1683843F1A6D6B3E786912186E86AA03FF5F4DD2EEE793C240A80EC01
94E3305DD4986891938CEFB5D27FCAC5C90DD229178BDEFF659DA7D91A03A015
2ECE2E8CA8B114A727F75DD24EEA5262D4265831616FFAB1D53C9220013168A3
88B72C55AB25652CCBADC2ADDC3CA59A7367696F986E1F24940BEB7E50A652A1
F86529C6ED4E2E2CCCF5DEEF40A3991DD53A4232E0E105D01B91A7E4D8F38D8B
6A21D6EB13A695A6E9F73EF920C9536D38FA87B219EB1AACDA97B46E0054CC4D
F740769FF65FC384A6E7056E9DCDE51B4C3572ED81154F4280157C8FDBA012F9
6DFA85E849708FA8FC7CF57033DB03C2E8DEE414F8A463C5F625625C366435D7
5C3A960EFCA7EB130904EE8F9E0B74D074524EA69DE64C8257C7F249861E1A36
D36D7C8A94C8D3ECB6BFDFFBCE378E42B97BE2704A662BF400BD3BC340616C1C
BAB2611209D39D38384AF424D69A724D43776F5AEABB6133D42B780D0891929A
1D45FBA86FE7DEC8F02D57373A3F45BD25A5D100A2DBA3EFB704D723916C117F
2DDCDB725BDE8FEC10908FC67CA68A4CB2D37834E4190525C4A9B51E74F0B78C
69BF57E1807952E3879B8A6C79FE22DC8971DB1F02C33F4E4D1589963543E02F
542ED39303AEF1A93BC08D63292FC027E75E22FB74246A0914A2F3A209EC712B
374325C75399AF825C4C750A8910C9907E10D2035683CC60D316CBC52EF97A6B
2D0C027B719415E9054DD033FD3D7DB448FAFD6FB94E546D14C8A1E95C74E54C
2E7E6B13F333AAB96AE3DAEE9AC762B128211497A26AF52CA95995E5167F82EE
005226EDF97A90DF7A5E7B75BF8700A965F9970D7BCD1708A333F21F39BDE306
35301D76B7450F213D28CD6B7B87EB33292FD989E393DA2AC817359A5545128B
E3879BF4EDA2E7250CAD26B4AB70B0C833AE603C6B75189304D03514D4D59683
35BAD705E5B321F59A482F5D61C1EBF6E2C672B5C6BF4069828118650E0ED6F4
77F19916243D1D618762AF96282DD3A2D6BCB4ABF5F8A74C0A541256F3C08108
C12E632F86ABB82CD94B90304E4451F7274ABE70D6037B1712A085D78C291191
0A9CCF307F6FD82C98C16C4F553E216BFC0FCFF8C848BBAD68A6B8D2AC29457F
91BD195D4404AFDD94AC00C5D42465A248E3F93310E319921DF021EF96DF278C
71A486A27F05D2FCB11CA6C97E6DA2F3E3DDCCA99DDE83B2C210A118F8B56F64
0A0D907B522A332F4FDBA9DBA37A5262635B590713DCC0A56B267C41492D6673
D4315E2DD5B0F44441955796B7888FF0D78EAB67E94FC9AF7FB6AEDF7AE53181
BB77268F9BF9F84EBA61BB0B4A836438F946863D494425DC82CB608C1FF5C24F
F2579B60444EAF95D16A592E1C1E5E7DF646B51A9F52BFDF56E14397AEA9679F
7A278399DE5E5A1E6BCCF1FC99360F5AADA6953F5E948F86A91621647BFAA97B
5780B54EBAE48AE20371302C1ACBACF2968348ABB1BF55E68FA67B517D6DF04D
AE97A8CFCF59E8FB79F79B6F4838E1875EC81BBEDAB5AC0DEB1FB3CD7F5F327B
A932D1758DD831B7E429AD40F314912EDF4315EB6AFDECC9063AC8FB92886BF9
DB58865992C0E9387F7C46887E3E999612DFEADD54D885454A5525C6D23E69E2
7025CB65559C84B77D47A0999FA22700CF64F9F5564ADA4518DE6430FE12B917
07C13301CECC94C6EE748D7A2D2BFDF8B9CD0D36FD228CFBA9C9A44B3294E722
7FD2C08E8FB1A81D6663AC4B0288339261A011BB3F2EF8E750EFD11D21CAB7A1
FA7A94981AAFB849830E8B9392368922EC0C816AEEBFFC0B045017A43EF606CC
13530B392DF2D60376552EB0F2C1FE4B443A74823CC4ED4592C38D5CFA972272
34C6A7ADB9EC549E12A42EE7A4B860A200C1754EEBA4E44A1B3DF4482634F1F1
7C2239CD7A2C41905E4310818007A090D7057247CF5745020FAB1C51A8B75DE8
88506746B7B4EB56F9DC57D4527A0E61A2A246E72CD9BB1B25A94E2C218554DD
84BF9A0821401AB95A5A32C5B3EAC7F8077024B33DE798ED96601471AB897A49
D7E7B04C728A7EBA3EFA41081C34362732EE54274DD0DF794523989508388BB2
E68F009F65ED6A882434B807D3CE4F478E134BB128FB4D3E2BB6E78C49586F8D
AE7F9AF7F764A25AAD1DA19385F5EFB3573827F9EA00298A166FC574070C66E7
313E5C886A01CA59085594D17FB0F8D4370BC778754AF72576B1B52572EB007F
B1E5A4D275AEA7A0B4F7C796EE7CF2A1E4CC162FD01232435130296CE91C3B17
FB4F21E5C064691CA309680F81A13B0298E03F93C42E68A0BC70B6070DE5E142
EFFC07DA12BED494332A3EAE6614AFF14ED5A8DA7D9888DEB0C7D793F0BE17BB
7F01DE18C4C0C1D9321AB46B0D0CFFDB351DD1158FA95469CFEDADF49E81D93A
565AE6C4DB3B8BDE027411920056915037A3082A6AE0836B782746255BD79E8D
28C3973C260F0BA33C4ABE9E55193FA13FC4AC0051EEDB27447B64DEE9EB35F9
551867A0B64B2926992D8617A07E64AF1543DAAD63DEFA44F616DF2BF5E42021
D20099B0E2E6686C6B38BD0E918B6F4761AC765ECA3CAF41A310A68701FEFA7C
23151CE39D61605D2FA28153EEA352D8A3FE542A731FCB6D958A175C5844179C
AABEF940AFFE10FB5F88E50CBA3A255F20B85966611C51D2B3B197A881436C27
204FE7DE396C245951F5DDF2E554F23FAB5DD37EE73E1628041A20E670020D1D
EEE236825F3A256B1FA8353826DEA6EB344CAF6151EFE0327A33483C6723CE87
ACB510D1BEC64CE9B6C59C178E71F52ECAB2B4FED0636318230E4365030E5203
B2F7355291BD78559AD4B0F63B8E9B08385E014F298DF9B3214B5E84D29B8796
5F42F6D0444D2F0946CE656D6C6771CEFF570AE40E8598C07E3A2FF759C12892
CBC085BC9881278F631DF7EA523D69C161839669E1886CBBAF31B7767112B506
1EECB06ACE21F49165CDA12FA2C54F31C63D5AD3EC978C950C494B978254B89C
B1C39F4F3DADF8A5679E2218075267CBA4A87C573F5736C1F11BE4C3D268A6C8
1F4E4A954F3C86CBF8BC385C7EC7F26092F25BA4A438C7BF7B206A6C6ABED458
41F68279C9499193FF7C9D5DA39BDD9A64861064DBAD4F53B9901E964FD44001
ACFDF132F2E7834A686A89E3C4C1EB0A91AEA7CBD01066EA71A2F40078DBAB95
B325EECB542ABD1410D8C03AFB3029ADCFE5CE93E306A2EBCC74F203950D1BAC
244C022C2541B232240E0CA08C16D1295CB007EC90162CD46DBB6D699EBB21FF
9FC8DAA41D2F8D84E485CA68FF16307CC3A8D53B0FCF87C9732FA79BCA14991B
ECC5B07C29E57ACE71FD147257521782EDFD02C98E55DDE837381FBEA34C16DC
83A399EB1F4146A5EF3CECA86FAA64981A7432D87606895508AEBB2733C2D593
D992DA21910B61A4DF79C654EBCB1DFE2FFB44BC097992C7F8D380D4F4CE6B8B
497241933CDEE92F5072AE054BCAD1B8EF800A649B725535408DD027B0E3F75F
ACB85C696E42988EF7BA0FAE10F4DC350BE10ADDF625EFED09A484B1334CEED1
B02E3B9961D050F5B51E2F72A94D499E8CF499ADB65DFFFA90C65952D3518EF0
0B95E225AFD50020504C16616EA91DC7260D9D2AEEC6333802E819636D19F876
751D988F45568E3931F22AA92C1A0EAD3A0625866BD919E67AD95F4A877DFB14
CEE34274D3973BD6E1BDBA49B4A5285EC67AE2EAFD1F23F2BCE9B5CC97899EBF
4C5595504DD49821692B91952BB30D64931F7F4387626862B899DEE257174AF9
51A5BC81CF670426EA2E279913469322B535003C364CFD67A1C291BBCE819BC7
7ED67C25717C9E43F9C8F417E3EE3A845A1C100A186A50A5FFA30440E957F5B2
D19D585038DD00834B17FFA6900581715A2A0CDE8BA098C325F066224664F194
CD38BFBCFDB5282C9F4234BFA77FAD37E6A5F60AD6ECA0BFC327D5E9A9EFFB64
1A2F45EC8617C4EC35DDBAB8E5EB2E5FD14AFFA1A4584A8DA3C24A4596E3D821
6829B0E6BD37C4B6F00B1D20BEB94DA21E8CCF7B87C4AD7975A5C8A2B0E19EBC
3AAA8BFE09D2C4693A0B7B1E978646C49B3E8AB11EB493282C87923A27B3C715
D10AD54B1B6A284584A72774908BC362C8220C5671DC32DD521CD021F90E42BC
0B675948B5E4FE2FB592E22599C787AE64F32A98835B2CE17700661C758E30A8
323509AA56DB182D0A6B933DC2EB1D9A948035928EF101F00D60EE0A38677E3E
72091640153EBFFD17ABD7F52961F6C9D53E61910C5B0DF5CAB028C6AD3420A0
A282546EE01452CDA5062208E1541B091BCE87038A698EF834155FB5BC9DE661
6FDD4ED67C5DD26BB21165F8CA365B82486E5D36C580B123DFFE30E3DE4F1874
A81F7F2690CC3F6B83D477D524A65BE40076883E34990C553493C693C005B72F
0EB3C5EE29A39A7418CEF146A92D35C89362E5D47AC8AD419353E45476ACD17E
83C4DE0FA60650D3C49EE821C50D14F32A7239A3DFD1BF240E5EFC5544F72116
F758DD87C77BA91EEC2E5C2885810CE9C76866252E7529DCA2648B79A9D875BC
EADE40759C768C1A47BAC134F0F1111CC489EB3439041BFA2FCFC8CB1AA1648D
8BC3F41B304E6693ED6876EB08CE2A424B75411723E9CAD01141B4DFB4142ED3
67E456E39D6019AC59B2EC0FE16F82597D70515AC98D1128BC5669B949A18DCC
A4217CD626D71F74CCD49BC9AB2D5FA4529D70807FC985EA387F32FCCA0C87B5
DB3D0C2F80DB1CF0D053F863AC2B08A8CE79F6436A5D1FDA223B6D2EAA6F873C
9D0A2FDD398F08D7443E4386C125AB3A5F99C99A122830A94AD64C1B3AD3B29E
49EB3B1C1D613F765004BBD1B03FE16B6747555673B862EF087742BB80F84B04
90B7D078844B8623292EDE09C7C9BC5BF584111B544F76B483DB11515165CCC1
7AB10E0BAB91F352500D94442A8305EF3CBCDE3C4DC7FF359E68F815303D8544
40DE50FF755A94C91C74BA4BB899DCF6D216296CC1EA9CC01563ADE425FF6EF5
ADB1D2C3E9D73B27E5F489CCCC18676A92E000D10B886340867F2EDF60ADF447
69763D38D7DF2970D1B394AB81DBC3A783CADC6D97985A403C8F5C413A7D3FE4
D6B2CB8EC6A70AAB632282A22FC8AA21910682539DE4DA48B08E6352866DFE9E
270B6C593900D8A967CD12BD005F7BCA4B1B854845BC404CC3127217BAEA8BB5
6049C1ABF8C79E1059BA3B9576A6C517C87CCC4A8CBE5296EC5ECC40D465F93F
7F4096F11851CBEC127CE8B21D37B1D16C6E2BFB489D90A5CE774B1E052FDB31
D272A7D73C86C4A6
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: DejaVuSansMono
%!PS-AdobeFont-1.0: DejaVuSansMono 2.34
%%Title: DejaVuSansMono
%Version: 2.34
%%CreationDate: Sun Sep 22 16:29:44 2013
%%Creator: Pavel Farar,,,
%Copyright: Copyright (c) 2003 by Bitstream, Inc. All Rights Reserved.
%Copyright: DejaVu changes are in public domain
% Generated by FontForge 20110222 (http://fontforge.sf.net/)
%%EndComments
10 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /DejaVuSansMono def
/FontBBox {-558 -375 718 1042 }readonly def
/PaintType 0 def
/FontInfo 11 dict dup begin
/version (2.34) readonly def
/Notice (Copyright \050c\051 2003 by Bitstream, Inc. All Rights Reserved.\012DejaVu changes are in public domain\012) readonly def
% Copyright (c) 2003 by Bitstream, Inc. All Rights Reserved.
% DejaVu changes are in public domain
/FullName (DejaVu Sans Mono) readonly def
/FamilyName (DejaVu Sans Mono) readonly def
/Weight (Book) readonly def
/FSType 0 def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -41.5039 def
/UnderlineThickness 43.9453 def
/ascent 760 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3491FF0D04EF446AD8769DE20E54
1720D75F2AB6757C7C228E5EE51BF64BAADDFEF9C0FA3301C525103D2280F773
8054F4509B3D63122FFAB5125CE8FC73ACAD3B1E153EF78ABBEA64B3FD2705F0
2BFE68AD5670233C9DDF7A6CE741D2B7A0784D86FAC2D73CDCEB858F21BCC366
D652A738C3854826F97E3364293843EEE50CFF386594860051FBA702E2CDE29F
5179930151E7B1CD87E1FEEB31CE2B1AA4A07D4EDE7695FBEC4E22181A9B5380
DF93E4926154A2AB32BEC0C2A071AF63071F895A4F714E6CE31293BF4647BC0B
DCC0934D4C1CAFE035ABF6E73CD2ED60A4C6416F04EBBA6343EC39911CA2F25A
843EC16EA40A688C64AC31B4CAAC75D92EB7B73C2F7F0055D23F297C2A582606
642CF5382E260B9495139D3F40217BE6FF7A594F01C8B0438AC58AF9B82D9B32
2F6546A015D07A6E66CE71B43103D1B1C2EB9D1E2941CD1558234D6AEEB13CD8
5AB1D608421DB33F26F0ECE68BB808CE15EC5F2A2B7E125B46F622AE0EC3A7A6
EAEE618246BCCDFEBB4C84B9AA023E4C2E1D0F278AC3BA7A4888DC6E90ECCB04
BD972EF8A717D2A57905BCD23614AF3A7C94025CE06E6C68570E50A33E3A8707
00FB4FFBFB1EC7F4F50C03D122AD4B63E9E65F0A0AF43EFCC9FC546FD13DA42A
1C391CD5A39D75F1A4968FCF34270917DD0B7DC8AC08BAE392C6082E3A035A03
4CCC595BA01DEF0482A83E02EE1F0367F4A80E193F4610960393427B7A117FB7
D49657AE7D2B294E3534EEEAE97DA3239259BD2B5F063F81FB03F68D22853258
3F8387F0BC65DF02E020E4DA80F0CE2DAD5F5A4E8D1246C83DE4788F5CE3875E
4C412F8B4F1AF941EBF9C39BB17B310D911D21F05FB674AE8409213346B08413
FC160E9D7D5C5AA2F9E12963F9F03B33330E14914C09A5983F0DF27193BFBC25
32C24DC6432B4BCADF6CF9304554841290962D4C077BC1D5C7DDBBE50EB6A0A3
1BB786F87431AC95740C7E138AD3FD3761A27F6A8D89F3EE3D32D0AD34C3EF1C
144DDFD1350FB0135F96EC20FDFF8A181BF1B21CE49B7ABC4746155A560F417F
E3A60697CDAD47578430FE93F3ACB45B1698577870AC0E23CC8F65A5FE9ABD00
4BD9EECF04868480C689D1F4C59CC5BFA61A362B2250FA41EC78F302F14A6935
B8FCBC6E5AE0AC63AB55EBE80AA594F1C27E2610D9D94E1A283040E40D34A48F
F1C91A449B9D325DA9CD5407CDECFF1403FCF5D9F07E12FB96D6CA50DB5024A0
25A937A4538869768A32E17F36E9FB3494FFAAD76DFC3A0C9D91CB040B39F12D
BC1AD883FB04E174C2644CD820C75C576A4DF008C77250754831F18F80C0AF10
61A36E88E633D54094CFDB643D8B069E28FE49A6C0851167D085437E0BF759A1
C65AD058FAE6BBF34DFD0E3057645517D525EFCC1E560043A423B7991035F80D
E5D867CE3DFD17CF04FECF64B5121874A33863199B08FB5AB83759A0D6ECCE6F
F1D1B6ADF2CF0E2E0E886B546C5F02FBDEB13097E00732C3853253C322C17D0B
51359FB565BBD5278357D7C02DD8E6DDC6D2B50677B05E07BA4D9FA1D2FE87F4
697D41DC422DBBF6C424AFD2E59F946E4482EC9909331CDEC781082E29CDE9E3
E5F6DE759736748872CCE46B9FD23FEDB3C172507E4FCE859DA567B65952C989
27540E57CE2E202348A293CA5C0DAD34ED900ED29D79063A88F8E2E793CEBEB5
29D60D1D746A9E502A4389E2822C594AB050B8F483C8E056328E6C98235B490E
41026091FA933A917E5A149A2B1635545ED0D3622E814D2E9082BC0CCD31BC29
2DDC7310CF328508BC4C925ADF507F168CEE0F4BD0DEA9A841EEFF06E7D3C90C
ABD9E113DCB2A86999A55CAA164A742FD031A65C15E93FE9982B3E788FA7B44D
CF7DA72999BD022DE5C2F3A2F7F7312A451728393B9D4623F68CB0A1DC33DF44
56055C250095B58DEC55C0A7B4988219F96AAD547189BB7028E32AC1902F0C8A
902E77143D190387235991874BE44FBAC7AED2240680D8C27E2EC2E938F262A9
3B105022AB69BA15DAFBC55E8A2863C69EFB65C9806DFDD60F8C1A8F40CD205B
C537BAF664D258C37075CB5695725956E9A16FC60D9129F882FCD021BF33CEEA
429F69820C5E004705D06D23B43DD0D9A8BB3CDA7C65164CE424273D435645D1
53DC2CF66C68C921A358521925BF1A4B3CC7F495F94C8C0031B24A8ED1D3849C
2FBD979890415923BBCEB51E6110166D3F91C17C38207E7C79FEE9B30A9D8F22
6F8D1F0A76C1D48A7B83C3E22C2AACCD5597A4669D9BB2F7D5087F3BF41175DB
11B211771A5F2B664F0AC483AA933B9976A1884111930AD5C08EF49BB60447EA
52FEF05799368B9CCDDFD4EAD1187DEDA7CA6B5A3EFD4A6DCDBE982153C5C7C7
7EB9805C5446CB532816806CCEFA571F2F7E74518A2CC6EBF5E7A65736C4142D
8652C1D7DAB43FF111CF51A064E1F58BA6A661A632271713AC176EE47B6310AC
5A4015272B802D6878DDA99AF85E946E565E9B2FB5771E2B069B4C5F9153F221
DBABA9E16BE2D5A3B927D0C83A8905332531D80C85F6B665825D669CA4C45245
C44A672D62A4008620F3B8EC735B400966844B1BA21E850C777E257370E2D27D
299827C4FF12D85D3A3C9333835032F10C7F0357470D43E3F45BBE84B16402EE
8AEEA198C5B19D143B96535C17B44C190333A8DEDA8EA1DEE63749A93E147907
3A0F0380B4C0BB0CBBBDEB38123007BA2991309A88F5BEE68EC4310726C16AE0
0EB4B81B20B3BC6D5CD913DC9839AE7E96CAB92B286D1807E3197FDC78936F24
49C69B85859CDC1B57E6092198DFA93998522E2E0CBE1D200A34FD4654282F52
DBB81C0BADED6F2889AC1F16E7C858C28B675DE63B3C4B2DE886080146DB4064
C38E0A2B56388F003A44C45C966DB1793F67FA31B9B8342F3A019A7D047FF801
F776AC884A9C729771F1CA1C271B0BA9663E88DC153D74F37A4EE8DACDBC577D
5DAED49CFB7A03C9B7C4615E33F8B45C69F24123ACB99F2C72AD8F3769036C4F
163503E155581E1C5B28026378393E5FDDC3E1B8AE667001A443CE1E32DBF4CC
DDD0C3DB8C3954632B94E72166037E8D888FC24DED012E5E72E3AC2BA7EF1E0E
F2F862919EF17811F3692E144EAB031342FA4EE2856B8D514AEBB83F6F2AD9B5
98BDB5BB859F3A512A65FA3ADBABD25E3282ADA8CDA9210C77928617446677A7
3DEBE6F91D704A74A301061E38E57953724D460BBDB54D7947BBF11CA27EA6DD
E0D083B19BFB4E9231075E868156AA4C8C2D4E72651234ADF6EB0FED816262D8
34E7633D278A65AA50C371C2C28B348B3426E2FC6F8ECEC7FF88823E417007A1
822AC7FA0DE4FF5597C8133832876E131630152745BDB3D29C242BCA6A560961
01DE58D42ABEFC3096B946CB14044B3C2E535BC03B3FE103DDE9DAB8F8A6B322
18795458FF7C6634813B4B4AD421D71D8EB69C9D8BBAE6CAF0E17E1701E547C9
4C4DA341ED39954D446F45B108597056326BAD581A486470FD93E1F0EB429363
5563B71BC179DDFE80D8D2FDF6DAB97F3BB2266C20F3EA5572831B1087C654AB
242C29CBC648C3109C51DEC8AF5C45D91A988D1F3C2AE319D938031067A18DAC
E942F1E08A035CAAA4C7765C842C2F1264332F3A54250075514A01F69AA52BC4
ABAC6C2E8FCEFC87ACA7616C121AE1AB73A4F16AB67EE1564D71BC20257B66AF
FE62C8148C4AB925D81F6DF2EF9EAA6D268B1E43B3156CCAC87BE30CEF59859D
02F779FBE8C7206C92F8E55C830CB5521D60F8533FCC3262A7A2D7716D14AAF2
C1061D9C72FD61F6F0578F46132FB6A9656010B6C353F90C4CFFA5FD928EE3D1
215DEF64BD2A28239E2AB147C3470FD69B5428E39088F9A0C33C2C35E1376C05
A10F44E6576EC7399D156088389E70429F646F57F74820FBC651B24E80FC72A8
27F19D07752575DB47F866DBF0D6DF3BCF3921E9BDC7A2F4EB7D367138B86265
EC1D7C3FE2F845A067A1B0A794C9F55AF7C375CB186D7F93ADDD0F6FBCCB84BC
A26FC4F6CD12E0BC35B7F269CE0E766C762F81AF137DF9CC16ABD4CD0D30FD17
46739E44B7B8C280AF33ACC841BFB85F09672B49E88D7A7EF01DE52B6270973E
38C739C9BD317EE8FA5574F1734A66338C56F96F5D601C0661853C491830615E
195CC00CAA96F4CFD105A1ED7F442E22D9E0ED6D0A06CEB26778ADED62ACD882
7859A339F8BD67B22B83B1805220B5A8988F25E87A1B5E782F16EEF97E5933EC
C49FBF643EBAE76DD4B1E4C31108473C7168C10241B0FAE83890B4746F64BFF6
A20854FAA0A98BC9F9FD42D29C2E34E4F941458D9561FA42A3C6A9C7A8CB09DC
DD1A24E4B6CF2F98431410CA470ECFD2C2A17993F3ED0B3BEB475890F2E170C4
004B1CF57522E284AC2CA5573215BE5C6910F523459602EC6A180AA2C7E1BC54
7C16967C6797094B9EA55E7317AD4A70F81DB59580C1A565D77B5A97D261E430
8126B647BC83CFF08746FE7515F6A96527D59C2154254C1FE3904364B021F150
D553B9A75564A3924D8B0E557FB32A4A280A1E262B8E9EB19EBF27DD02940868
2A7F06ECD8BEE9487AFFC8BBADA3BDF47DE8FC623CF8511755DE6E323ABE0B9E
DD1ABD92D2A7EBD109E7F61C0690CDA203A011E2D4721D3ACFB4EB373C12A5B6
2BA341363C7E82D9666FD695466ECACADA25FC5396D2F7CEEA4F6B03609DB7B3
046EDDBE9A4FDB1D31A447D3C063D976FD42FE49DED69453ADF12072F08EB432
BFFC4B5DB530603FF445F5B3E278846094774B6E343182C5B6AF73E5C0CB90B8
EBD9F6A1979D8DDFF57BA056F5AE58D8472C2CDC859189300667B2B9151F5F19
6A32652B92425976F729BDA158DC72F33E3F9A8AAEFF90713153014E340456A0
BE9A812AC053112CA9D00AD0C953AE63BF6D11D3C187C2106C77559288E7D9D4
364A5B461A7821296BC8EDB9D5E54078C71455A3C17A03048779C863A60B1926
CD8C91F3AFC2B4BD48437C1FB9A50C46B170B76B25EB949FC9BDAB780289611A
0F21E1B61FBF03B21911E3663BB1C0D1A076B5F1DBFAF8CD841D8F40DCF23DF3
82C501E3ED2F791E49BFE0D6CAD21A4EBB7796A679D44FB2CB1DCA4FFC5A9898
26102CB37094F2494AA75C4FC4D9A25B45A9208FEE3A783915A8627D57EEC7D4
181C2CB0FAB9475DAA6920A7A01E00E2FE442B373D42A1C5234A148563688D8E
93011D0A54E436C4C3D2A8473F1C1AD2F0B9D485BF0A2D3B18AAA136718DF94F
53FE07C9F39155082DA1770A37AE06B34FB9DBD6A34C68B3AD6DA0DFCFE49DE9
66FBD607F6005CF7EED9DFC1CFAE79817C9B20A2DC6A1C07BB21CB0FBD0D141F
E150A2E9949666AA65952830564FFD40C88F85B512F9B16E5F9A1376FD893927
561F57F631DB84C599022C0D6F443098737E100271867EE8DC54EEE6F9D35BDA
459761233B6B87DBD5E95824DAC0BC9AA912320FEF1CD6CEAE764FC664029C17
D565C440512A2B2803EA4B0DE48A2C5F5F42BD0134C040ACE2264FC63227BDB5
22EF0B1BF3987874BFF7AD2A5CD7B12BC5DEE2BF2067910F770C8A9C9CF91614
299A84F46CC6DD0F3A16E04282E4B77FD328D453DCB8C87EC68E69881A0FB99A
E11A38CBCA99E9F9540B94997774F2B1924B43276241BB099259974A7D82A553
3631521A20553981E819BBF030B95438EA76084B6663EA1D4FC6C862C87D80A4
57A5302A798C4D97D60D6380EB3A4EFFFB3A14A35B57E5D0B5D6FD014CC62BF4
CEFE81B15D1D5C6DF6386DFE17956F9A8A89F52A982C0CFCA7E4D4D5933FEA77
51BA9B4490F7215276C26CF53A95652858DDE917E1F263CDB1D71907BBA17F2C
C3E0F5D61914FF16B6464513632A5539EF383273F0477A9FF401A6B34F8E079C
5FF03BC855E58267C8E8822812E31EBF9A857F191B2A8262B8CCF459B4DC3677
22450CA073CBAD7FE9751D6FEA25AE759C82A608C4BF891B59AD64452C43940D
10AD9A15D74EABF9B6959A432386246860ED61B98FBB76FFB97FA1B530965471
D606DED9E0F31E885EB8633AB42C34A7932A77E6C4F539B8BCC60B1853E7020D
38D3F819DD2A9C794710115EED4C787D87797DF0788FE5290E011A949189F391
F6276E2CABE08743C6B8F6B26D5CE350021394716612115829AAF36F9FB97D8B
9B93059BF9C25E63653FBC52C3073BC2B5DD0502A05776E52BFB239647B76893
DC14B03DCCEC89B5C3103B05418635BBBE93042BE39F7F4BB351AD774360CFF5
B5D3ABC190B186BB7DC7F8AA3302052E433EF0216C0DBCD9523AC233DE427517
10CEAC3E2785D93570358B730530D1CFF8B244CE8BA2139572504940C75F5BFF
2E458263E9DD186275361993455959D0B0BFE5A4BB1DEA5A877CCC6254511BE7
56693591AC7A768187B315CD6EA548BE7D2720EAA92DCCE264D55418065B7ACA
FCA0CB7AC6DF64D10AC5CC5BB32CBA67C75E0326F87228B470C41CF6524A1E13
593F751AA6FCF270FFE0BB2F0684373ECB135061361930D6253771986DE521F6
2BF9DEE488D3544C5746704676DE2516FD681B7A9EA2DBD59B519522C3092561
2F862AB6508651E9CCEF824B5FADEC3DAFE5C14F92E8097A99296C4B74951437
DE19324D1B542DD22A06754D9F9AE066A7801464BFBC770B346D97D799644421
3972D169E59D19B3B7A618ED0BF6D0BFF6B96583DC430D6AF65E904A3D59DF13
D29D8BE394F8CC4B50A2418C44357DF43810BAA50B05BF92A46152A52798A7CA
34CEBC7D4C2E1F85618EC5B78FD6C64C8FD5A5B6F6D666DA60E80BC4BAE50EC8
ED8EAB95F83FA51DF621C6693677DE32BB23BB6ECB72E1246A0F6F09C8F38A1C
8BB180F8001650513790815A6085C6BD91B9C8B4ECE3CAD238C231BFC3B4433D
A17840E676ED2EA92C61FDA5FD4BC9C8E6E1531A94D44ED16B916F3FAF3D3C9F
FEAF66629E9B931DC380AF180427178E74D3AA5FFD70265235C289534AD65E20
9ACEE4D4B772F49558BFE675D7198AA28EDE0D9C92E39DA2299E12C69431AC2C
42A737EE0F4784B14FD544C70F4520E5CE6BBECECB5CB3CC4F85C8A7F259198C
40F8686E98953A2AF1A7E6B48A40513F9A9583B5504518448053F35CAF8BFAA9
EA20DDD8A0E49FA5B084AF43B318FAF385F34D685151939FD2784DCF97994476
D85DE98CBBA0D7F6FAAED2A6ABE14AAA2AB954E2A223DC22F3D268DB1B85D7F1
69575F3513CA99951A18614BCD54A8AA1AF324D723870087B92E05EAEE2081C6
97F00B590361056DE780C33D0290CF66F257E223C416138FE974C66A267A6C85
49E0584019749B81C5DFB8E0B6947F1A81B02AFAEFEEBD02273E6072C22F581E
1D9A10B55628ED03736FAA03854784C252A50085F1C008D56527B4C2E2FAA0A4
2C9E9871368E653A0B16356CE0FBFED150EEBDC2CC0E26953789F92F15AE9C19
B29AF6EC0A4593782A599B1207F7EFA824D8E5C2C5DDA6C0E18DD3A2A6A0ED9E
F3EE7FAA86EF319435FFC8189C5C3E15A6D3F668B023E631D146CC8D5C9E6041
AD6B07C7533F6AB848E296D83A2B530C44B73A5D2B48A554C5351714C28B6615
915C568F3A5CCA67ADF530C8EFAEA9E2209449D2B2747D0AC3B46F44C36B0FF2
73FF3E2BD4C9161EC444D8FD38DCFA35DF7D956CE18CED82532C40EFA25C2EC1
F658A0DEDDC8EA3AE9CF3B12889AB6CD0BDE7D23097A973B643F3DE8E9725842
0F9BA2C650759CE027D8E3E07134EE02FF87238476CBCB7BB8E568B093E9E0C4
5B84EE3BF7D64BD77EB18C29DB3630B72D10290111534A63B8AFCD34DD1A2AB3
080707BE82827500CCB8A9966F74030983EBB9B32FF25394230536A434FAC6E7
7F6A0925915ACFCE1366893F7019AEC49715FEBDC8CF59332849ECE66F810238
3F02F7401C3481B529E3E18927B24CA1AA56B0847081BBCDAC4DF36D640994DF
66D6F8D2701298CC9FDA7928F99CA135B6980B2924DDC9E79640EEFC4B9852F5
0C93C6BA15171A759EE22D9F51DAEDF5873816653E5215E436CFC8508A1E1B82
FD879C7FACDA5A32D850AC4211F0B50F608CE934B42EB8D32B5C20AEBCF9039D
FAA268D83B462FC0BD10BBBB8DB7B12BB1011EEA4E5FF4820F0D260B7DEBA72F
E89B64C4CCBA115B7FF44056889486E4F54158490141BDE1A648F04D9BC61CD7
2431D070C2157450F5CFCC099FF92E8FF1268F8B3FF1B1590A5A199DB0F61AEC
1F051B1A6604FBEC4BE86812CF347E09F1BC98641688D99E6A269CDCE787DEF4
2A610E752FF292CE5721CBA24721E4DF7EF63891D98E4EA24E4DCA5D507108EC
02D50C0D87C31A11E0231DDCFD8B1EEA2B11BAF18374DEE98D644FAEBEF32264
8F56EA1012FC7012142611205589FA4C2263FAF831B150E96700F41CA70C6034
C319BEB9D85084AA21B81AF837A1565F8CE28E3035136C15642D6C4CBE8F3AFF
39B375392937C26AC08DA98886993EEC7A8FFEEC357A8C41592305E5A491A4E8
663AFD3492B955E7936A451695C9566DC51D99516B2F8353F69FFFB5D736F85D
789B598B1E89DBFB2B7C07EDDFCC655BC55C28705A1143C2AF422389CECF1E55
321FBBD725BB08927B936A146CC93F75F11A545243D50635FD722C452AAE0884
490282EC823434BFCFE218A4B5FF0264F1EC9818FC80F71DD6435FC6A7C2B91B
672FA23D9F875C001E76ED4CD4EEBFFFE810F076D00710C302B4E5E8AD40D6C5
B27D7078E026DF89D3535C22C001CAE1DC020E5778C184C1C89C0B70F7654DB9
EDF8305228BA8CC82095DE659BC38E6DA6E587C23E70241F9C323674E061FFCD
B7A8F0DF69981E9492DEA2B5C5C11F9AE7F2F8CEF7EFE3AC73D46A704D6B2871
12FF32A7984902A63CADA2313DAE81643E32E096D75A6DAAAAA6CA373D5434BA
0E02AA42C71D9E27302A88E52BB8B1924F057B9A58F443D728556B3380456B8A
D594CA4953489DFB00D6D22895AE449D1919AB625EFE0E2EA6E2FD72EA05150A
1BD6A54680062580CB689BB7FDCF8BE62EE13360878BF71637233FE721DB7A97
205A58E941484F6329EBE4A424C61E77929A8FC9282C13741A755DC615794571
972FD93DBD3A0A6A393542472014F905534424CD98C82E2A9F49E7DF213AEA97
259581392B9BC171B1AE1279F582DA9A153541E6298B3BC2F7512D012142412E
2EA8000874DE2AB420A3BCEB481BDF9CF84193B36278E442446B41B6AEB440DA
475E13240445D46726A6D451891BEC6795729C8D6F0483F604EE345E522AFD19
F8C25547C73B4C28293307F22EB28C915A6423433A1802B3A041849901838D0A
12D47F8BCF5CC5768C0AB33F1B8E556DBD5F54C609517FC0AB69CD2260364701
EB2FC2A589FAC56B303CD63E243AE47A34544330A9AA6403FC79A00837C7DFC6
CBAD470825AA8979C2394FDC6701E4C577857F07791910DAD565553DB0184CBA
406DA973EC4DA544AF9FD58FAACC74BD62D0B702E894290BA473BD7FF64796F1
EDCB77605E078C5A1964A93D318E01885394CFE84B60BA7750A8B9AD41D2C630
217F49993A4F71986593056283E80D664084907BBBA88BCA31C7865CF3ACB4B6
C00AAF205A92CE7448549966C4D7696C50904CBE3DD72104534108B983F8683A
835B98A1D4AE5D9CA434A535EEA888124936E44DD04F6367E04C3CBB3400BA3C
1943B874CFB386C2455D7C0DD3BB0AB14C9FC65A584CBD3C657629602DE0CCF8
296D4435658BF330D684DE08AAF46D2CE580CB637C49625FD1F996F2CE14EF16
4607D2F6E527C0545744710431EC8FD789BDEB93E45BC33ED9222E754D6E27E3
0849322602D6075DB9ABF5908E8371C60B1A88C6E57BCDCEF0C27886DF17BA80
6522D1A4C1F0752CB0FB7DB6B3A20060C0403F4820A70C7D0709DC6EFB19FCBD
EE3F51C492422C1591ADDC5CC87F19C56F4864FDFE7201635AA332AD85F72102
56CE75870033FF52BAA30128CD8D7A859813E4D580A293F7486D74966095DB20
4488F485CB9091D8A83D8940180A134028A544D8BE72E8BE64B481F2A89AFCBF
166B5E882B6B231568DC196FA90B83FB7B003351ABFF00980D8260348C4AB304
5928C40BC5CF9B2479B4E7C3B07611E21E77DCA0CCAA8C8C23966B984646E124
484E823A4503F98A00404FFA351DD0AE5F0B4467E903DDA48CECF0D62A07D25C
C5747406946C22AC7DCB7DF6688E3873FBC7A3E9AC2A39A813FC4891B49E7775
375100F55E9F16BDCB2C70B197770BCE78D444F6EDF9840A8B741F645C3D8E6F
08BDF26AD5A9DF5CEB562F68C8689D5B67D8ABC25A867FDE02717A6646E0C945
369BC8E5E424C64C270D340FCD7AC1FD1BB6D84C444D6F9528BB2F8DB988718E
CBC2E50973D8D1ECA575E33F950C56F48C0A5A380CDF2D774225E83D3E036A9E
D4DADD995E6E2033E6CC70BC0E96636EAAB676E721B9ABDE837B551650E88928
5442AAB9A29D15BB66547EF4B77256725A45EFAC1151E3B51DE81D6C980AC09A
48FBE67B0D1487BC2EB7C387C88EBF47DAE1BB6E31B59341E4DB2F5D3E8D3640
E5C051EC25E2CDAB7E3E2BD29D6E460691CBD49F4CA398DF77469E8F01FAC3EE
8172973DCF1AE774B49B9461B7F05CD57C9F8E30A8CB9F2B9D7832C2C916C2AC
17548CD1CF5B7B0A9D9FBABBAFAB2406191DDF2DE8630CFC5F2963B0357E5D2B
FCE8289FE4CA06F7EE6A6201729329DF6A63C24651F9088C646A3F1A5DC51969
74F284BA9BAF4130F642645B6108A27AC40DEEE3A93E9FF6E94AA10A80DFC0F7
A6E624CAB5F7ED923F8CC5BF4B17DFA0BCA3AF3598494A2CECBF779BBEFEEAC6
120C942E2C1E9F8F9A9F1E88B19E924B05ECFFAEE2E84B59F858D9FA0FB741F7
9F761137AB9941C7BC515C7EACB6AE4251286889AA387FD216C1E67003A22251
C0C1E695CBE8DAEC14B74A7F3DC2424B2FC62C225EEBE9CB4296D053F7607BEB
04BCE94265C16CF806A05EECC29427E7FE85E9D7942297B39816B1F577698565
D5C47C57E4A425897623B52692B023C21341C7817E3C3908ECF1507098FC81A8
3E0D0E203ABBE60C473D7480A37C3085A6447CD7E9474CF5F8289383CB8A831E
D3A6EDADBB86BC79197AFC2F97E36F3B4820E02DAF7C12EF47D801DBC67D95FC
6E9D36A82FD4829577BE062ED1020E4D11068F7F178ECCB98E957EAF47C6AE7C
F58A17913FC34E9AC47248950C853D24B31082F71680B36C95B7A54D5E8E60FF
AB5AEF7F7C44D65932A5F34BD9753D5BBED5651F4644B011B62623946A720BC9
BA69D7DB8D4633BC4D455A4A680088241B7B6C16D190586A697BD52B9EDC8F21
5F20A43A8A057916932436449276139D992751F715CBE9A6FABB6D8FEA1C75BA
6993810D9B398C16186775B6E4233B2AEA9E7557C32283C75D87A686A05A3A28
4BC64C19A3A8EE15E3C68AA6EAC5FE5C491F8257A200F29A976E24E81EE91751
CB1C7A794504D3B22AC905F550F6E866BEEF8FF32F4E728DE987F80F12C1992E
CBA7FAC150387E3AA1F3BAF841FC0B474D55378AA2C3EBB6034B73A829464012
6D5F3281441686B239E766CE2A282A2F458FF072ADD48D5A7AF408C6F3CB6AE8
A03AFAE387A4AD16F7FB49799322EDF7A034012D17F46F3F746018B4CD752896
2C797675FF248ABA3C240A989CC2A77D04282738C655943BD00C9CF2C71DAB6C
B4B31815F1CAFD9278C2DDA054EF7CC4C356F1D1C31AD2D076B1F74CFFB09752
157F767EB5D31A00FA71A14A43F04FA2D9EF64F29AD11587B9B20DF316B68812
AF9D7A520ACE282FDF7E73C0B5891A3065066D379A68D790BFFC0E90D86387FD
34D613433D6E4FB32C1D38EA72413E2557C6B09DF95A28842643467952035A44
363CD4B9E7977AA0D174C5FEB2F2B00B6FDC2A5F4092C44A6C9CAD4CFDDF93BF
551B83A450460CE0B4251DF7C766DC94684F1EA4738842E68810ECAA5669F59D
623335D044BD35725B30CC4160C0FE4761C2DFADEC82530669731D673A353FFC
950743CA5406D3756901289100C3DAE279DCECB803E19C908868BC203A89968E
D8BD5E138BDFBFA27DD03C3AE89C5E46610E9FD268E8A508D45A4E0CA602BAC1
01D357246010A1EAFDFF9B8CE049463E0871C9960FC92E5710310F79D97E761F
733D4DF8B0AC5A5D0EA3562DFDBB297A515F80D9DE26015B905B01C7C47A548C
E394DA2885B85957FD5AB66C7A799E211BE46378C02BCAEB99601768C3BE9E9D
6E2BB67DA88B01B504F857BA8CA679B3005E774E62EEBA0B8B4909C30FCFB7F2
70163FA4817C521F9B8EF5B98D5B3879B10E01D876B2B7A527F58D77128EB9F4
7ABFA4FFB195712BAE2B1E2BBB74E0AF3E42FF33BEF890245CDF4733D9B6A18C
B2FC34A881E91EE5D3B8153BE036F6B0A581FBF069C64F4EEAA2F320E3E08C52
2CFE35DA8D082E06CDAE4FE62A9E7D12E1FBCD2DF1B8082198EA920769DA206C
77F8B48B4A218FB73262F4AF026057649E73551541F22FEE5F5B5C28C6CE8BAF
27A03E20850C811FB2EFC02DCB333E472545E31BE3EEF674D37BD8E740367F89
53A160E6C4E907A00007CAB7C2390CD88CEB1FF55B9C40F4E65A8DC127DAA816
589DFE400A7E2E5754F7BB13662BBE1063F91E6BF249A632D6B04D8415DFAF20
6A9C12FF14D3F8C40BCF64CE4126112E4D537478DF1B31BBB1BFCE10A323E3F9
A3CDA31037A7C40C45FD348EFEA486BCB3960D8998CC8C4AE46E1C38EC2F8D47
2FD0F463FDBBC72930FC4DC2F26A0EAB1560FCE42A5EDEB8C18A04423447A8F6
494D63C7175B628094E2A26A69EBD00126E901DEFEB04EDFE16DBD55825E286A
5CDFC2719B745E64BC6A300AB3B133D681B21DB7F16EF6083B1C7EBA7C51A563
4FAB1EE4EB340E7488F7D7BCD8C0B3C08AAC9842A3194179F2AAC68A331673D2
F62D4932381866BB0F74BD694F25927E2E8B8DD11F5A6863FEC060849BB20D7B
D3B32DF6FC81987595B4E29EFA2AAE8CFDE7E2B69D62188D25A057C07E79B6D6
D03D8B0722797A825FB323997C25D21BFE933C06D74DB7CE178C52C8E4FAC20D
5FFAC7AD1714BE3EFE1D0947AC99CF2FB85568AFB82DD42E4E6060AFF7B977B0
E2CC2C4C3D0CE4E128843822257CEBAF07EECE0CCEA72A9133A7CE0605F882D1
CD37936EFFE5405BEEC7D30FCD30EE4F106B710FD69E60F61C02DC0CB3CF838A
F741E79EA34325CF5AD8B62AEC2502018DE4CD83735A90442405A9632F8CC3FE
7D624F88135E2E5E81B1D276D027A374BFCE5ABA0848D73B063FEDBF36BD79E7
2309A615CC1EA697AA8D6720EC2D0E132752F440BCDD78CD68DDAE535B515C6B
42CE8B086C47EA797F22FBACCECC4A0B02FAE44921F299F1BFEFA68BACC39034
62B5CFBD71E4C43F065B25C28AC6C3692EE81A21A36D282D231E21F1C007FCA9
54992E20461F672A01341CD5CF0D53F19C1A0D5D64D91F7FAA8B7B7F51539DA1
E3D3AB687DC2FDAE8AE8CEAB621EC48C2AAE58A14CB8C5D20FB101D875B096C9
211A48AD87CE730986B340143C1329DB1BC66DB3711C749924422DA10FAA0D8E
09FEBA808802E014B09212FAB6A853B53C06E4A99876EF0B2EF9CF6E5055C8B4
07DF6D53722D7A3413938609E8ABF7A3
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
TeXDict begin 40258437 52099154 1000 600 600 (definefunc2.dvi)
@start /Fa 134[418 1[571 1[433 255 293 296 1[406 1[430
650 3[229 3[333 406 323 397 403 55[260 254 40[{
 AutoEnc_7grukw4ftfgbx23ssythacmksg ReEncodeFont }17
830.22 /LinLibertineTI rf /Fb 130[400 1[400 5[400 400
1[400 400 400 400 400 1[400 2[400 2[400 400 400 2[400
12[400 3[400 18[400 1[400 9[400 400 400 5[400 400 40[{
 AutoEnc_ai7sfw4ev2rw3jfdy46mgxdj6f ReEncodeFont }24
664.176 /DejaVuSansMono rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
 end
%%EndSetup
TeXDict begin 1 0 bop 0 TeXcolorgray 0 11700 a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 0 11700
a 0 11700 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 0 11700 a 0 11700 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 0 11700 a 0 11700 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 0
11700 a 0 11700 a
tx@Dict begin gsave CM STV CP newpath moveto 3.0 neg 0 rmoveto clip
setmatrix end
 0 11700 a 0 11700 18066 11700 v 18066
11700 a
currentpoint grestore moveto
 18066 11700 a 450 11250 a
tx@Dict begin { 0.0 0.0 } PutCoor PutBegin  end
 450 11250 a -5868 x
Fb(float)399 b(fToP)h(\(int)f(freq\))p 0 TeXcolorgray
400 w({)p 0 TeXcolorgray 0 TeXcolorgray 1631 7082 a(float)h(period)f(=)
h(1000000/freq;)p 0 TeXcolorgray 0 TeXcolorgray 1631
8783 a(return)f(period;)p 0 TeXcolorgray 0 TeXcolorgray
450 10483 a(})p 0 TeXcolorgray 450 11250 a
tx@Dict begin  PutEnd  end
 450 11250
a 450 11250 a
tx@Dict begin { 119.24615 1192.45499 } PutCoor PutBegin  end
 450 11250 a 0 0 1 TeXcolorrgb -1381 11054
a Fa(r)-7 b(eturn)208 b(typ)6 b(e)p 0 TeXcolorgray 450
11250 a
tx@Dict begin  PutEnd  end
 450 11250 a 450 11250 a
tx@Dict begin { 390.25865 1084.04999 } PutCoor PutBegin  end
 450 11250 a 0 0 1 TeXcolorrgb
-458 11245 a Fa(name)p 0 TeXcolorgray 450 11250 a
tx@Dict begin  PutEnd  end
 450
11250 a 450 11250 a
tx@Dict begin { 802.19632 975.64499 } PutCoor PutBegin  end
 450 11250 a 0 0 1 TeXcolorrgb -1637
11054 a Fa(parameter\()-10 b(s\))p 0 TeXcolorgray 450
11250 a
tx@Dict begin  PutEnd  end
 450 11250 a 450 11250 a
tx@Dict begin { 1344.22131 216.81 } PutCoor PutBegin  end
 450 11250 a 0 0 1 TeXcolorrgb
-1242 x Fa(statement\()g(s\))450 11054 y(wrapp)6 b(e)g(d)208
b(in)g(braces)p 0 TeXcolorgray 450 11250 a
tx@Dict begin  PutEnd  end
 450 11250
a 450 11250 a
tx@Dict begin { 0.0 0.0 } PutCoor PutBegin  end
 450 11250 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
2.25  2.25  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow
 EndArrow  } def  4.33546 SLW 0 0 1  setrgbcolor  /ArrowA { moveto
} def /ArrowB { BeginArrow 2.25  2.25  scale  false 0.4 1.4 1.5 2.
  1. .setopacityalpha  Arrow  EndArrow  } def  [ 119.24615 780.51566
119.24615 1192.45499   /Lineto /lineto load def 0  setlinejoin false
Line  gsave 4.33546 SLW 0 0 1  setrgbcolor  1. .setopacityalpha   0
 setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
450 11250 a
tx@Dict begin  PutEnd  end
 450 11250 a 450 11250 a
tx@Dict begin { 0.0 0.0 } PutCoor PutBegin  end
 450 11250 a @beginspecial
@setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
2.25  2.25  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow
 EndArrow  } def  4.33546 SLW 0 0 1  setrgbcolor  /ArrowA { moveto
} def /ArrowB { BeginArrow 2.25  2.25  scale  false 0.4 1.4 1.5 2.
  1. .setopacityalpha  Arrow  EndArrow  } def  [ 390.25865 780.51566
390.25865 1062.36931   /Lineto /lineto load def 0  setlinejoin false
Line  gsave 4.33546 SLW 0 0 1  setrgbcolor  1. .setopacityalpha   0
 setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial 450 11250 a
tx@Dict begin  PutEnd  end
 450 11250 a 450
11250 a
tx@Dict begin { 0.0 0.0 } PutCoor PutBegin  end
 450 11250 a @beginspecial @setspecial
  tx@Dict begin STP newpath /ArrowA { moveto } def /ArrowB { BeginArrow
2.25  2.25  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow
 EndArrow  } def  4.33546 SLW 0 0 1  setrgbcolor  /ArrowA { moveto
} def /ArrowB { BeginArrow 2.25  2.25  scale  false 0.4 1.4 1.5 2.
  1. .setopacityalpha  Arrow  EndArrow  } def  [ 802.19632 780.51566
802.19632 975.64499   /Lineto /lineto load def 0  setlinejoin false
Line  gsave 4.33546 SLW 0 0 1  setrgbcolor  1. .setopacityalpha   0
 setlinejoin 0  setlinecap stroke  grestore end
 
@endspecial
450 11250 a
tx@Dict begin  PutEnd  end
 450 11250 a 450 11250 a
tx@Dict begin  tx@NodeDict begin {1723.63881 455.30066 } false /N@A
10 {InitPnode } /NodeScale {} def NewNode end  end
 450 11250 a 450 11250
a
tx@Dict begin  tx@NodeDict begin {1127.41132 726.31316 } false /N@B
10 {InitPnode } /NodeScale {} def NewNode end  end
 450 11250 a 450 11250 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { BeginArrow
2.25  2.25  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow
 EndArrow  } def  4.33546 SLW 0 0 1  setrgbcolor  /ArrowA { moveto
} def /ArrowB { BeginArrow 2.25  2.25  scale  false 0.4 1.4 1.5 2.
  1. .setopacityalpha  Arrow  EndArrow  } def  /NCLW CLW def tx@NodeDict
begin 0.0 0.0 neg 0.0 0.0 0 0 /N@A /N@B InitNC { /AngleA 90.  def /AngleB
0.  def 0.67  0.67  NCCurve  } if end  gsave 4.33546 SLW 0 0 1  setrgbcolor
 1. .setopacityalpha   0  setlinejoin 0  setlinecap stroke  grestore
 grestore end
 450 11250 a 450 11250 a
tx@Dict begin  tx@NodeDict begin {1723.63881 195.12932 } false /N@A
10 {InitPnode } /NodeScale {} def NewNode end  end
 450
11250 a 450 11250 a
tx@Dict begin  tx@NodeDict begin {65.04366 108.405 } false /N@B 10
{InitPnode } /NodeScale {} def NewNode end  end
 450 11250 a 450 11250 a
tx@Dict begin gsave STV newpath /ArrowA { moveto } def /ArrowB { BeginArrow
2.25  2.25  scale  false 0.4 1.4 1.5 2.   1. .setopacityalpha  Arrow
 EndArrow  } def  4.33546 SLW 0 0 1  setrgbcolor  /ArrowA { moveto
} def /ArrowB { BeginArrow 2.25  2.25  scale  false 0.4 1.4 1.5 2.
  1. .setopacityalpha  Arrow  EndArrow  } def  /NCLW CLW def tx@NodeDict
begin 0.0 0.0 neg 0.0 0.0 0 0 /N@A /N@B InitNC { /AngleA -135.  def
/AngleB 0.  def 0.67  0.67  NCCurve  } if end  gsave 4.33546 SLW 0
0 1  setrgbcolor  1. .setopacityalpha   0  setlinejoin 0  setlinecap
stroke  grestore  grestore end
 450 11250
a eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF

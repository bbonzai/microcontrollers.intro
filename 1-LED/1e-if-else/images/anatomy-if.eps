%!PS-Adobe-2.0 EPSF-2.0
%%Creator: dvips(k) 5.995 Copyright 2015 Radical Eye Software
%%Title: anatomy-if.dvi
%%CreationDate: Sun Jun 19 05:40:15 2016
%%BoundingBox: -45 -470 2451 721
%%DocumentFonts: DejaVuSansMono LinLibertineTI
%%EndComments
%DVIPSWebPage: (www.radicaleye.com)
%DVIPSCommandLine: dvips -E -o anatomy-if.eps anatomy-if.dvi
%DVIPSParameters: dpi=600
%DVIPSSource:  TeX output 2016.06.19:0540
%%BeginProcSet: tex.pro 0 0
%!
/TeXDict 300 dict def TeXDict begin/N{def}def/B{bind def}N/S{exch}N/X{S
N}B/A{dup}B/TR{translate}N/isls false N/vsize 11 72 mul N/hsize 8.5 72
mul N/landplus90{false}def/@rigin{isls{[0 landplus90{1 -1}{-1 1}ifelse 0
0 0]concat}if 72 Resolution div 72 VResolution div neg scale isls{
landplus90{VResolution 72 div vsize mul 0 exch}{Resolution -72 div hsize
mul 0}ifelse TR}if Resolution VResolution vsize -72 div 1 add mul TR[
matrix currentmatrix{A A round sub abs 0.00001 lt{round}if}forall round
exch round exch]setmatrix}N/@landscape{/isls true N}B/@manualfeed{
statusdict/manualfeed true put}B/@copies{/#copies X}B/FMat[1 0 0 -1 0 0]
N/FBB[0 0 0 0]N/nn 0 N/IEn 0 N/ctr 0 N/df-tail{/nn 8 dict N nn begin
/FontType 3 N/FontMatrix fntrx N/FontBBox FBB N string/base X array
/BitMaps X/BuildChar{CharBuilder}N/Encoding IEn N end A{/foo setfont}2
array copy cvx N load 0 nn put/ctr 0 N[}B/sf 0 N/df{/sf 1 N/fntrx FMat N
df-tail}B/dfs{div/sf X/fntrx[sf 0 0 sf neg 0 0]N df-tail}B/E{pop nn A
definefont setfont}B/Cw{Cd A length 5 sub get}B/Ch{Cd A length 4 sub get
}B/Cx{128 Cd A length 3 sub get sub}B/Cy{Cd A length 2 sub get 127 sub}
B/Cdx{Cd A length 1 sub get}B/Ci{Cd A type/stringtype ne{ctr get/ctr ctr
1 add N}if}B/CharBuilder{save 3 1 roll S A/base get 2 index get S
/BitMaps get S get/Cd X pop/ctr 0 N Cdx 0 Cx Cy Ch sub Cx Cw add Cy
setcachedevice Cw Ch true[1 0 0 -1 -.1 Cx sub Cy .1 sub]{Ci}imagemask
restore}B/D{/cc X A type/stringtype ne{]}if nn/base get cc ctr put nn
/BitMaps get S ctr S sf 1 ne{A A length 1 sub A 2 index S get sf div put
}if put/ctr ctr 1 add N}B/I{cc 1 add D}B/bop{userdict/bop-hook known{
bop-hook}if/SI save N @rigin 0 0 moveto/V matrix currentmatrix A 1 get A
mul exch 0 get A mul add .99 lt{/QV}{/RV}ifelse load def pop pop}N/eop{
SI restore userdict/eop-hook known{eop-hook}if showpage}N/@start{
userdict/start-hook known{start-hook}if pop/VResolution X/Resolution X
1000 div/DVImag X/IEn 256 array N 2 string 0 1 255{IEn S A 360 add 36 4
index cvrs cvn put}for pop 65781.76 div/vsize X 65781.76 div/hsize X}N
/dir 0 def/dyy{/dir 0 def}B/dyt{/dir 1 def}B/dty{/dir 2 def}B/dtt{/dir 3
def}B/p{dir 2 eq{-90 rotate show 90 rotate}{dir 3 eq{-90 rotate show 90
rotate}{show}ifelse}ifelse}N/RMat[1 0 0 -1 0 0]N/BDot 260 string N/Rx 0
N/Ry 0 N/V{}B/RV/v{/Ry X/Rx X V}B statusdict begin/product where{pop
false[(Display)(NeXT)(LaserWriter 16/600)]{A length product length le{A
length product exch 0 exch getinterval eq{pop true exit}if}{pop}ifelse}
forall}{false}ifelse end{{gsave TR -.1 .1 TR 1 1 scale Rx Ry false RMat{
BDot}imagemask grestore}}{{gsave TR -.1 .1 TR Rx Ry scale 1 1 false RMat
{BDot}imagemask grestore}}ifelse B/QV{gsave newpath transform round exch
round exch itransform moveto Rx 0 rlineto 0 Ry neg rlineto Rx neg 0
rlineto fill grestore}B/a{moveto}B/delta 0 N/tail{A/delta X 0 rmoveto}B
/M{S p delta add tail}B/b{S p tail}B/c{-4 M}B/d{-3 M}B/e{-2 M}B/f{-1 M}
B/g{0 M}B/h{1 M}B/i{2 M}B/j{3 M}B/k{4 M}B/w{0 rmoveto}B/l{p -4 w}B/m{p
-3 w}B/n{p -2 w}B/o{p -1 w}B/q{p 1 w}B/r{p 2 w}B/s{p 3 w}B/t{p 4 w}B/x{
0 S rmoveto}B/y{3 2 roll p a}B/bos{/SS save N}B/eos{SS restore}B end

%%EndProcSet
%%BeginProcSet: pstricks.pro 0 0
% $Id: pstricks.pro 919 2014-05-19 18:42:47Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 1.23, 2014/07/31
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
% Define the follwing gs-functions if not known, eg when using distiller
%
systemdict /.setopacityalpha known not {/.setopacityalpha { pop } def } if
systemdict /.setblendmode known not {/.setblendmode { pop } def } if
systemdict /.setshapealpha known not {/.setshapealpha { pop } def } if
%
/tx@Dict 200 dict def 				% the main PSTricks dictionary
tx@Dict begin
/ADict 25 dict def				% The arrow dictionary
/CM { matrix currentmatrix } bind def
/SLW /setlinewidth load def
/CLW /currentlinewidth load def
/CP /currentpoint load def
/ED { exch def } bind def
/L /lineto load def
/T /translate load def
/TMatrix { } def
/RAngle { 0 } def
/Sqrt { dup 0 lt { pop 0 } { sqrt } ifelse } def  % return 0 for negative arguments 
/Atan { /atan load stopped { pop pop 0 } if } def % return 0 if atan not known
/ATAN1 {neg -1 atan 180 sub } def		% atan(x) (only one parameter)
/Div { dup 0 eq { pop } { div } ifelse } def  	% control the division
/Log { dup 1e-20 lt { pop -1e30 }{ log } ifelse } def % control the log
/tan { dup cos abs 1.e-10 lt 
  { pop 1.e10 } 				% return 1.e10 as infinit
  { dup sin exch cos div } ifelse 		% default sin/cos
} def
/Tan { dup sin exch cos Div } def 		% sin(x)/cos(x) x in degrees
/Acos {dup dup mul neg 1 add dup 0 lt {		% arc cos, returns 0 when negative root
  pop pop 0 }{ sqrt exch atan} ifelse } def
/Acos2 { 2 dict begin 
  /x ED /y ED
  y abs 1.0e-20 lt { 1.0e30 } if
  x y div 
  dup dup mul neg 1 add dup 0 lt {		% arc cos needs two values x,y
  pop pop 0 }{ sqrt exch atan} ifelse 
  y 0 lt { 180 add } if
} def
/NET { neg exch neg exch T } def	      	% change coordinate system to the negative one		
/Pyth { dup mul exch dup mul add sqrt } def   	% Pythagoras, expects 2 parameter
/Pyth2 {					% Pythagoras, xA yA xB yB
  3 -1 roll 		% xA xB yB yA
  sub			% xA xB yB-yA
  3 1 roll 		% yB-yA xA xB
  sub			% yB-yA xA-xB
  Pyth } def
/PtoC { 2 copy cos mul 3 1 roll sin mul } def % Polar to Cartesian
/PtoCab { dup cos 4 -1 roll mul 3 1 roll sin mul } def % Polar to Cartesian (Ellipse) a b phi-> x y 
%/Rand { rand 4294967295 div } def		% a real random number
/Rand { rand 2147483447 div } def		% a real random number between 0 and 1
%----------------- hv added 20050516 ---------------
/PiDiv2 1.57079632680 def
/Pi 3.14159265359 def 
/TwoPi 6.28318530718 def
/Euler 2.71828182846 def 
%/e Euler bind def
%
/RadtoDeg { 180 mul Pi div } bind def 		% convert from radian to degrees
/DegtoRad { Pi mul 180 div } bind def 		% viceversa
%
/startGlobal { true setglobal globaldict begin } bind def
/endGlobal { end false setglobal } bind def
/pssetRGBcolor /setrgbcolor load def
/pssetCMYKcolor /setcmykcolor load def
/pssetGraycolor /setgray load def
%
%----------------- hv end---------------------------
/PathLength@ { /z z y y1 sub x x1 sub Pyth add def /y1 y def /x1 x def } def
%
/PathLength { 
  flattenpath /z 0 def 
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def }
  { /y ED /x ED PathLength@ } 
  {} 
  { /y y2 def /x x2 def PathLength@ }
  /pathforall load stopped { pop pop pop pop } if 
  z 
} def
%
/STP { .996264 dup scale } def			% BP/PT scaling
/STV { SDict begin normalscale end STP  } def	% 
%
/DashLine {
    dup 0 gt
    { /a .5 def PathLength exch div }
    { pop /a 1 def PathLength } ifelse
    /b ED % pattern should fit evenly in b
    dup /X ED % pattern array
    0 get /y ED % length of first black segment
    /z 0 X {add} forall def % length of the full pattern
    %% Computation of the scaling factor as described by van Zandt:
    b a .5 sub 2 mul y mul sub z Div round
    z mul a .5 sub 2 mul y mul add b exch Div
    %%%% scaling factor on stack.
    /z ED %% now, z is the scaling factor
    false % for the length test below
    X { z mul } forall X astore %% modification TN 04-08-07
    %%% Checking whether at least one dash in X has positive length:
    {0 gt or} forall
    { X 1 a sub y mul }
    { [ 1 0 ] 0 }
    ifelse
    setdash stroke
} def
%
/DotLine { 
  /b PathLength def 
  /a ED /z ED /y CLW def 
  /z y z add def 
  a 0 gt { 
    /b b a div def 
  }{ 
    a 0 eq { 
      /b b y sub def 
    }{ a -3 eq { 
      /b b y add def } if 
    } ifelse 
  } ifelse 
  [ 0 b b z Div round Div dup 0 le { pop 1 } if ] 
  a 0 gt { 0 }{ y 2 div a -2 gt { neg }if } ifelse 
  setdash 1 setlinecap stroke 
} def
%
/SymbolLine {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 div cvi /n ED     				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    %% for negative SymStep we calculate the distance 
    SymStep 0 lt 
      { %XYLength SymStep div abs cvi 
        /nSym SymStep abs cvi def } 
      { /nSym XYLength SymStep div cvi def }
    ifelse
    0.5 setflat
    /Shift Symbol stringwidth pop 2 div def 
    /deltaX XLength nSym div def
    /deltaY YLength nSym div def
    curveticks 
      { XA YA moveto }
      { XA Shift sub YA Shift sub moveto }
    ifelse 
    nSym { 
      gsave 
      curveticks 
        { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
          currentpoint translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
          Symbol show 
        }
      ifelse 
      grestore 
      deltaX deltaY rmoveto
    } repeat
    /YA YB def /XA XB def
  } repeat 
  curveticks 
    { XA YA moveto }
    { XA Shift sub YA Shift sub moveto }
  ifelse 
  gsave 
  curveticks 
    { PAngle 180 sub CorrAngle sub tickAngle add /rotAngle ED  
      XA YA translate rotAngle rotate 
      0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
      SymbolLinewidth setlinewidth stroke
    }
    { 
      rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
    }
  ifelse 
  grestore
  pop 				% delete the mark symbol
} def
%
/LineFill { % hv ------------ patch 7 -------------
  gsave 
  abs /hatchWidthInc ED
  abs /hatchSepInc ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  2 setlinecap 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  x2 x1 sub 1 add { 
    x1 a mul y1 moveto 0 y2 rlineto stroke 
    /x1 x1 1 add 
      hatchWidthInc 0 gt { CLW add } if 
    def 
    hatchSepInc 0 gt hatchWidthInc 0 gt or { 
      /a a hatchSepInc add def
      CLW hatchWidthInc add SLW 
    } if
  } repeat 
  grestore 
  pop pop } def
%
/DotFill {%	 on stack: dot radius
  /dotRadius ED
  abs CLW add /a ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform 
  pathbbox % llx lly urx ury of smallest bounding box
  /y2 ED /x2 ED /y1 ED /x1 ED 
  y2 y1 sub a div 2 add cvi /Ny ED
  x2 x1 sub a div 2 add cvi /Nx ED
  clipType   % must be defined in pstricks.tex: clip -- eoclip 
  newpath 
  /yA y1 dotRadius add CLW add def
  /xA0 x1 dotRadius add CLW add def
  Ny {
     /xA xA0 def
     Nx { 
       newpath 
       xA yA dotRadius 0 360 arc 
       SolidDot { gsave fill grestore } if 
       stroke
       xA a add /xA ED
     } repeat
     yA a add /yA ED
  } repeat
  grestore
} def
%
/PenroseFill {%	 on stack: scaling factor
  /Scale ED
%  1 exch div round /penroseFactor ED 
%  a 0 dtransform round exch round exch
%  2 copy idtransform 
%  exch Atan rotate 
%  idtransform pop /a ED 
%  .25 .25 itransform pathbbox 
%  /y2 ED 
%  a Div ceiling cvi /x2 ED /y1 ED 
%  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
gsave
  220 150 translate
  Scale dup scale
  systemdict /setstrokeadjust known { true setstrokeadjust } if 
  /I/S/L/W/G/+/Z/F/E/D[/def/exch/for{E D}/add{s E get mul}
 { Z -36.2001 1 33 }{25 E S rlineto}{/q Z dup q G E q 1 + G}{Z 2 2}]{cvx def}forall
  [0 72 1008 {dup sin E cos }F ]1 setlinejoin/s W{/a W{/b I 10{/i I 4{/m I moveto
  i m +/j I 10{/l Z b m l + G a l G sub s m get div .2 + floor .3 + 25
  mul j l + S rmoveto}F i L j L stroke }F}F}F}F 
  grestore 
%  pop pop 
} def
%
/PenroseFillA {%  on stack: scaling factor, border color, kite color, dart color
  /Scale ED
  Scale dup scale
  /border_colour ED 
  /kite_colour ED 
  /dart_colour ED
  clip 
  newpath 
  gsave
  100 100 translate
  6 
  Scale 1 lt { 1 Scale dup add div mul cvi } if %%%%   Number of iterations
  10					%%%%   Long side length in millimeters
  /border_width { L 0.06 mul }def		%%%%   Choose the scalefactor for the borders
  /L exch 25.4 div 72 mul def		%%%%   Conversion: mm -> inches -> points
  /f{-1 5 sqrt add 2 div}bind def		%%%%   The reciprocal of the golden ratio
  /l{L f mul}bind def			%%%%   Short side length l = L*f
  /Ll{L l add}bind def			%%%%   Ll =  L + l
  /c{36 cos L mul}bind def		%%%%   c  =  L*cos(36)
  /s{36 sin L mul}bind def		%%%%   s  =  L*sin(36)
  /draw_tile { 0 0 moveto c s lineto 0 lineto gsave closepath gsave fill grestore
	     0 setlinewidth stroke grestore border_colour stroke } bind def
  /half_kite { dup dup 0 gt{ 1 sub gsave f f neg scale -36 rotate half_dart
			   Ll 0 translate 144 rotate kite grestore }
	      		 { kite_colour L draw_tile }ifelse
	     pop } bind def
  /half_dart { dup dup 0 gt{ 1 sub gsave f f scale half_kite
			   -144 rotate Ll neg 0 translate half_dart grestore }
	      		 { dart_colour l draw_tile }ifelse
  	     pop } bind def
  /kite{ gsave half_kite 1 -1 scale half_kite grestore }bind def
  border_width setlinewidth  1 setlinejoin  1 setlinecap
%  450 0 translate  
  dup f exch neg exp dup scale
  5 {kite 72 rotate } repeat stroke 
  grestore
} def
%
%
/TruchetFill { %	 on stack: scaling factor
  10 dict begin
  dup dup scale
  1 exch div round /penroseFactor ED 
  a 0 dtransform round exch round exch
  2 copy idtransform 
  exch Atan rotate 
  idtransform pop /a ED 
  .25 .25 itransform pathbbox 
  /y2 ED 
  a Div ceiling cvi /x2 ED /y1 ED 
  a Div cvi /x1 ED /y2 y2 y1 sub def 
  clip 
  newpath 
  systemdict
  /setstrokeadjust known { true setstrokeadjust } if 
  /ma a neg def
  /ha a 2 div def 
  /mha ha neg def
  /tile { 
    rand dup 2 idiv 2 mul eq { 90 rotate } if
    mha mha moveto ha mha lineto
    ha ha lineto mha ha lineto
%    closepath .1 setlinewidth stroke
    contents
  } def
  /contents{ 
    0 ha moveto ha 0 lineto
    0 mha moveto mha 0 lineto
%    1 setlinewidth stroke
  } def
  /dotiling {
    f ma mul a f a mul { 
      /i exch def
      f ma mul a f a mul { 
        /j exch def
        gsave i j translate
        tile stroke grestore
      } for
    } for
  } def
%
  /f 3 def 
  5 srand dotiling 
  end % local user dict
} def
%
/BeginArrow { 
  ADict begin 			% hold it local, for end see EndArrow
  /@mtrx CM def 
  gsave 
  2 copy T 
  2 index sub neg exch 
  3 index sub exch Atan 
  rotate newpath 
} def
%
/EndArrow { @mtrx setmatrix CP grestore end } def % end the ADict
%
/Arrow { 
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /a ED 
  { 0 h T 1 -1 scale } if 
  w neg h moveto 
  0 0 L w h L w neg a neg rlineto 
  gsave fill grestore 
} def
%
/ArrowD { % the sides are drawn as curves (hv 20071211)
  CLW mul add dup 
  2 div /w ED 
  mul dup /h ED 
  mul /Inset ED 
  { 0 h T 1 -1 scale } if % changes the direction
% we use y=w/h^2 * x^2 as equation for the control points
% for the coordinates the arrow is seen from top to bottom
% the bottom (tip) is (0;0)
  w neg h moveto % lower left of >
  w 9 div 4 mul neg h 3 div 2 mul
  w 9 div neg       h 3 div  
  0 0 curveto    % tip of >
  w 9 div        h 3 div  
  w 9 div 4 mul  h 3 div 2 mul
  w h curveto % upper left of >
  w neg Inset neg rlineto % move to x=0 and inset
  gsave fill grestore 
} def 
%
/Tbar { 
  CLW mul add /z ED 
  z -2 div CLW 2 div moveto 
  z 0 rlineto stroke 
  0 CLW moveto 
} def
%
/Bracket { 
  CLW mul add dup CLW sub 2 div 
  /x ED mul CLW add /y ED /z CLW 2 div def 
  x neg y moveto 
  x neg CLW 2 div L x CLW 2 div L x y L stroke 
  0 CLW moveto 
} def
%
/RoundBracket { 
  CLW mul add dup 2 div 
  /x ED mul /y ED /mtrx CM def 
  0 CLW 2 div T x y mul 0 ne { x y scale } if 
  1 1 moveto 
  .85 .5 .35 0 0 0 curveto 
  -.35 0 -.85 .5 -1 1 curveto 
  mtrx setmatrix stroke 0 CLW moveto 
} def
%
/SD { 0 360 arc fill } def
%
/EndDot { % DS is the dot size 
  { /z DS def } { /z 0 def } ifelse  	% outer or inner dimen 
  /b ED 				% the color definition
  0 z DS SD 
  b { 0 z DS CLW sub SD } if 
  0 DS z add CLW 4 div sub 
  moveto 
} def
%
/Shadow { [ { /moveto load } { /lineto load } { /curveto load } {
  /closepath load } /pathforall load stopped { pop pop pop pop CP /moveto
  load } if ] cvx newpath 3 1 roll T exec } def
%
/NArray { % holds the coordinates and on top of stack the showpoints boolean
  /showpoints ED 
  counttomark 2 div dup cvi /n ED  	% n 2 div on stack 
  n eq not { exch pop } if		% even numbers of points? delete one
  ] aload /Points ED 
  showpoints not { Points aload pop } if
%    { ] aload /Points ED } 
%    { n 2 mul 1 add -1 roll pop } ifelse	% delete the mark symbol 
} def
%
/Line { 
  NArray n 0 eq not 
    { n 1 eq { 0 0 /n 2 def } if ArrowA /n n 2 sub def 
      n { Lineto } repeat 
      CP 4 2 roll ArrowB L pop pop 
    } if 
} def
%
/LineToYAxis {
  /Ox ED		% Save the x origin value 
  NArray            % all x-y pairs on stack
  n { 2 copy moveto % go to current point
    Ox exch Lineto   % line to y-axis
    pop             % delete old x-value
  } repeat
} def
%
/LineToXAxis{
  /Oy ED		% Save the y origin value 
  NArray		% all x-y pairs on stack
  n 0 eq not
    { n 1 eq { 0 0 /n 2 def } if
      ArrowA
      /n n 2 sub def
      CP 2 copy moveto pop Oy Lineto
      n { 2 copy moveto pop Oy Lineto } repeat
      CP
      4 2 roll
      ArrowB
      2 copy moveto pop Oy
      L
      pop pop } if
} def
%
/Arcto { 
  /a [ 6 -2 roll ] cvx def 
  a r 
  /arcto load stopped { 5 } { 4 } ifelse { pop } repeat 
  a 
} def
%
/CheckClosed { 
  dup n 2 mul 1 sub index eq 2 index n 2 mul 1 add index eq
  and { pop pop /n n 1 sub def } if 
} def
%
/Polygon { 
  NArray n 2 eq { 0 0 /n 3 def } if 
  n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      n 2 mul -2 roll 
      /y0 ED /x0 ED /y1 ED /x1 ED  
      x1 y1 
      /x1 x0 x1 add 2 div def 
      /y1 y0 y1 add 2 div def 
      x1 y1 moveto 
      /n n 2 sub def 
      n { Lineto } repeat 
      x1 y1 x0 y0 6 4 roll Lineto
      Lineto pop pop closepath } ifelse 
} def
%
/SymbolPolygon {   % on stack [ x y x y ...
  counttomark 					% number of elements
  2 add /m ED
  2 copy m 2 roll				% copy last two
  m 2 div cvi /n ED    				% n pairs
  /YA ED /XA ED					% the start point
  n 1 sub { 
    /YB ED /XB ED
    /XLength XB XA sub def
    /YLength YB YA sub def
    /PAngle YLength XLength Atan def
    /XYLength XLength YLength Pyth def
    /nSym XYLength SymStep Div cvi def
    /Shift Symbol stringwidth pop 2 Div def 
    /deltaX XLength nSym Div def
    /deltaY YLength nSym Div def
    XA Shift sub YA Shift sub moveto 
    nSym { 
      gsave rotateSymbol { PAngle 180 sub CorrAngle sub rotate } if
      Symbol show 
      grestore 
      deltaX deltaY rmoveto
    } repeat
%    XB Shift sub YB Shift sub moveto Symbol show
    /YA YB def /XA XB def
  } repeat 
  pop	% delete the mark symbol
} def
%
/Diamond { 
  /mtrx CM def 
  T rotate 
  /h ED 
  /w ED 
  dup 0 eq { pop } { CLW mul neg 
    /d ED 
    /a w h Atan def 
    /h d a sin Div h add def 
    /w d a cos Div w add def } ifelse 
  mark w 2 div h 2 div w 0 0 h neg w neg 0 0 h w 2 div h 2 div 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false Line 
  closepath mtrx setmatrix } def
%
/Triangle { 
  /mtrx CM def 
  translate 
  rotate /h ED 2 div /w ED 
  dup CLW mul /d ED 
  /h h d w h Atan sin Div sub def 
  /w w d h w Atan 2 div dup cos exch sin Div mul sub def 
  mark 
  0 d w neg d 0 h w d 0 d 
  /ArrowA { moveto } def 
  /ArrowB { } def 
  false 
  Line 
  closepath 
  mtrx
% DG/SR modification begin - Jun.  1, 1998 - Patch 3 (from Michael Vulis)
% setmatrix } def
  setmatrix pop 
} def
% DG/SR modification end
%
/CCA { 
  /y ED /x ED 
  2 copy y sub /dy1 ED 
  x sub /dx1 ED 
  /l1 dx1 dy1 Pyth def 
} def
%
/CC { 
  /l0 l1 def 
  /x1 x dx sub def 
  /y1 y dy sub def 
  /dx0 dx1 def 
  /dy0 dy1 def 
  CCA 
  /dx dx0 l1 c exp mul dx1 l0 c exp mul add def 
  /dy dy0 l1 c exp mul dy1 l0 c exp mul add def 
  /m dx0 dy0 Atan dx1 dy1 Atan sub 2 div cos abs b exp a mul dx dy Pyth Div 2 div def 
  /x2 x l0 dx mul m mul sub def
  /y2 y l0 dy mul m mul sub def 
  /dx l1 dx mul m mul neg def 
  /dy l1 dy mul m mul neg def 
} def
%
/IC { 
  /c c 1 add def 
  c 0 lt { /c 0 def } { c 3 gt { /c 3 def } if } ifelse 
  /a a 2 mul 3 div 45 cos b exp div def 
  CCA 
  /dx 0 def 
  /dy 0 def 
} def
%
/BOC { IC CC x2 y2 x1 y1 ArrowA CP 4 2 roll x y curveto } def
/NC { CC x1 y1 x2 y2 x y curveto } def
/EOC { x dx sub y dy sub 4 2 roll ArrowB 2 copy curveto } def
/BAC { IC CC x y moveto CC x1 y1 CP ArrowA } def
/NAC { x2 y2 x y curveto CC x1 y1 } def
/EAC { x2 y2 x y ArrowB curveto pop pop } def
%
/OpenCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { BOC /n n 3 sub def n { NC } repeat EOC } ifelse 
} def
%
/CurvePath { 
  %% for negative SymStep we calculate the distance 
  SymStep 0 lt { gsave PathLength SymStep div abs /SymStep ED grestore } if
  0.5 setflat
  flattenpath /z 0 def /z0 0 def
  { /y1 ED /x1 ED /y2 y1 def /x2 x1 def 
    x1 Shift sub y1 Shift sub moveto 
    gsave 
    curveticks 
      { x1 y1 translate startAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke      
      }
      { startAngle rotate Symbol show }
    ifelse 
    grestore /z0 z def }
  { /y ED /x ED PathLength@ z z0 sub SymStep ge {
      x Shift sub y Shift sub moveto 
      gsave 
      curveticks 
        { y yOld sub x xOld sub Atan 180 sub CorrAngle sub /rotAngle ED  
          x y translate rotAngle rotate 
          0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
          SymbolLinewidth setlinewidth stroke
        }
        { 
          rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
          Symbol show 
        }
      ifelse 
      grestore /z0 z def } if 
    /yOld y def /xOld x def } 
  {} %% the lineto part
  { /y y2 def /x x2 def PathLength@ 
    x Shift sub y Shift sub moveto 
    gsave
    curveticks 
      { y yOld sub x xOld sub Atan 180 sub /rotAngle ED  
        x y translate rotAngle rotate 
        0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
        SymbolLinewidth setlinewidth stroke
      }
      { 
        x Shift sub y Shift sub moveto 
        rotateSymbol { y yOld sub x xOld sub Atan 180 sub CorrAngle sub rotate } if        
        Symbol show 
      }
    ifelse 
    grestore
  }
  pathforall 
%  curveticks 
%   { gsave 
%     x y translate rotAngle rotate 
%     0 SymbolWidth 2 div moveto 0 SymbolWidth 2 div neg lineto 
%     SymbolLinewidth setlinewidth stroke grestore
%   } if
  z 
} def
%
/OpenSymbolCurve { 
  OpenCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/AltCurve { 
  { false NArray n 2 mul 2 roll 
    [ n 2 mul 3 sub 1 roll ] aload
    /Points ED 
    n 2 mul -2 roll } 
  { false NArray } ifelse 
  n 4 lt { n { pop pop } repeat } { BAC /n n 4 sub def n { NAC } repeat EAC } ifelse 
} def
%
/AltOpenSymbolCurve { 
  AltCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedCurve { 
  NArray n 3 lt 
    { n { pop pop } repeat } 
    { n 3 gt { CheckClosed } if 
      6 copy n 2 mul 6 add 6 roll 
      IC CC x y moveto n { NC } repeat 
      closepath pop pop 
    } ifelse 
} def
%
/ClosedSymbolCurve { 
  ClosedCurve
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/CalcBezierSpline {%  Christoph Bersch
  10 dict begin
  /getX { Points exch 2 mul get } def
  /getY { Points exch 2 mul 1 add get } def
  /n Points length 1 sub 2 idiv def
  /GetFirstControlPoints {
    /x n array def
    /tmp n array def
    /b 2 def
    x 0 rhs 0 get b div put
    1 1 n 1 sub {
      /i exch def
      tmp i 1 b div dup 4 1 roll put
      i n 1 sub lt { 4 }{ 3.5 } ifelse exch sub /b exch def
      x i rhs i get x i 1 sub get sub b div put
    } for
    1 1 n 1 sub {
      n exch sub
      dup dup x exch 1 sub 2 copy 6 2 roll
      get 3 1 roll tmp exch get
      exch x exch get mul sub
      put	
    } for
    x
  } def
  % 
  n 1 eq {
    0 getX 2 mul 1 getX add 3 div
    0 getY 2 mul 1 getY add 3 div
    exch dup 3 1 roll 2 mul 0 getX sub
    exch dup 3 1 roll 2 mul 0 getY sub
    [ 0 getX 0 getY 7 3 roll 1 getX 1 getY ] /outPoints exch def
  } {
    /outPoints 6 n mul 2 add array def
    0 1 n {
      dup dup 6 mul dup 1 add
      outPoints exch 5 -1 roll getY put
      outPoints exch 3 -1 roll getX put
    } for
    /rhs n array def
    1 1 n 2 sub {
      rhs exch dup dup getX 4 mul exch 1 add getX 2 mul add put
    } for
    rhs 0 0 getX 1 getX 2 mul add put
    rhs n 1 sub dup getX 8 mul n getX add 2 div put
    GetFirstControlPoints
    1 1 n 2 sub {
      rhs exch dup dup getY 4 mul exch 1 add getY 2 mul add put
    } for
    rhs 0 0 getY 1 getY 2 mul add put
    rhs n 1 sub dup getY 8 mul n getY add 2 div put
    GetFirstControlPoints
    0 1 n 1 sub {
      /i exch def
      2 copy
      i get outPoints 6 i mul 3 add 3 -1 roll put
      i get outPoints 6 i mul 2 add 3 -1 roll put
      2 copy
      i n 1 sub lt {
        i 1 add get i 1 add getY 2 mul exch sub outPoints 6 i mul 5 add 3 -1 roll put
        i 1 add get i 1 add getX 2 mul exch sub outPoints 6 i mul 4 add 3 -1 roll put
      }{
        n 1 sub get n getY add 2 div outPoints 6 n 1 sub mul 5 add 3 -1 roll put
        n 1 sub get n getX add 2 div outPoints 6 n 1 sub mul 4 add 3 -1 roll put
      } ifelse
    } for
    pop pop
  } ifelse
  outPoints
  end
} def
/Spline {
  /showpoints ED
  counttomark 2 div dup cvi /n ED
  n eq not { exch pop } if
  ] /Points ED
  n 1 gt {
    CalcBezierSpline
    mark exch aload pop
    ArrowA
    n 2 sub {
      6 2 roll 4 2 roll curveto
    } repeat
    6 2 roll 4 2 roll ArrowB curveto
  } if
} def
/OpenSymbolSpline {
  Spline
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def

%
/SQ { /r ED r r moveto r r neg L r neg r neg L r neg r L fill } def
/ST { /y ED /x ED x y moveto x neg y L 0 x L fill } def
/SP { /r ED gsave 0 r moveto 4 { 72 rotate 0 r L } repeat fill grestore } def
%
/FontDot { 
  DS 2 mul dup 
  matrix scale matrix concatmatrix exch matrix
  rotate matrix concatmatrix exch 
  findfont exch makefont setfont 
} def
%
/Rect { 
  x1 y1 y2 add 2 div moveto 
  x1 y2 lineto 
  x2 y2 lineto 
  x2 y1 lineto
  x1 y1 lineto 
  closepath 
} def
%
/OvalFrame { 
  x1 x2 eq y1 y2 eq or 
    { pop pop x1 y1 moveto x2 y2 L } 
    { y1 y2 sub abs x1 x2 sub abs 2 copy gt 
      { exch pop } { pop } ifelse 
      2 div exch { dup 3 1 roll mul exch } if 
      2 copy lt { pop } { exch pop } ifelse
      /b ED 
      x1 y1 y2 add 2 div moveto 
      x1 y2 x2 y2 b arcto 
      x2 y2 x2 y1 b arcto
      x2 y1 x1 y1 b arcto 
      x1 y1 x1 y2 b arcto 
      16 { pop } repeat 
      closepath 
    } ifelse 
} def
%
/Frame { 
  CLW mul /a ED 
  3 -1 roll 
  2 copy gt { exch } if 
  a sub /y2 ED 
  a add /y1 ED 
  2 copy gt { exch } if 
  a sub /x2 ED 
  a add /x1 ED 
  1 index 0 eq { pop pop Rect } { OvalFrame } ifelse 
} def
%
/BezierNArray { 
  /f ED 
  counttomark 2 div dup cvi /n ED 
  n eq not { exch pop } if 
  n 1 sub neg 3 mod 3 add 3 mod { 0 0 /n n 1 add def } repeat 
  f { ] aload /Points ED } { n 2 mul 1 add -1 roll pop } ifelse 
} def
%
/OpenBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { ArrowA n 4 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      6 2 roll 4 2 roll ArrowB curveto } ifelse 
} def
%
/OpenSymbolBezier { 
  OpenBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
} def
%
/ClosedBezier { 
  BezierNArray 
  n 1 eq 
    { pop pop } 
    { moveto n 1 sub 3 idiv 
      { 6 2 roll 4 2 roll curveto } repeat 
      closepath } ifelse 
} def
%
/ClosedSymbolBezier { 
  /f ED				 % save showpoints value 
  2 copy /yEnd ED /xEnd ED
  counttomark -2 roll 2 copy /yStart ED /xStart ED
  counttomark 2 roll
  f
  ClosedBezier
  0.1 setflat
  /Shift Symbol stringwidth pop 2 div def 
  CurvePath 
  [ xEnd yEnd xStart yStart SymbolLine 
} def
%
/BezierShowPoints { 
  gsave 
  Points aload length 2 div cvi /n ED 
  moveto 
  n 1 sub { lineto } repeat 
  CLW 2 div SLW [ 4 4 ] 0 setdash stroke 
  grestore 
} def
%
/Parab { 
  /y0 ED /x0 ED /y1 ED /x1 ED 
  /dx x0 x1 sub 3 div def 
  /dy y0 y1 sub 3 div def 
  x0 dx sub y0 dy add x1 y1 ArrowA
  x0 dx add y0 dy add x0 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 x0 y0 x0 2 mul x1 sub y1 ] def 
} def
%
/Parab1 { % 1 end  |  0 SP
  /ySP ED /xSP ED /y1 ED /x1 ED 
  /dx xSP x1 sub 3 div def 
  /dy ySP y1 sub 3 div def 
  newpath x1 y1 moveto xSP y1 lineto xSP ySP lineto 
                       x1 ySP lineto closepath clip 
  currentpoint
  newpath moveto
  xSP dx sub ySP dy add x1 y1 ArrowA
  xSP dx add ySP dy add xSP 2 mul x1 sub y1 ArrowB 
  curveto 
  /Points [ x1 y1 xSP ySP xSP 2 mul x1 sub y1 ] def 
} def
%
/Grid { 
  newpath 
  /a 4 string def 
  /b ED % 				psk@gridlabels in pt
  /c ED % 				{ \pst@usecolor\psgridlabelcolor }
  /n ED % 				psk@griddots
  cvi dup 1 lt { pop 1 } if 
  /s ED % 				\psk@subgriddiv
  s div dup 0 eq { pop 1 } if 
  /dy ED s div dup 0 eq { pop 1 } if %	\pst@number\psyunit abs
  /dx ED dy div round dy mul %		\pst@number\psxunit abs
  /y0 ED dx div round dx mul 
  /x0 ED dy div round cvi 
  /y2 ED dx div round cvi 
  /x2 ED dy div round cvi 
  /y1 ED dx div round cvi 
  /x1 ED 
  /h y2 y1 sub 0 gt { 1 } { -1 } ifelse def 
  /w x2 x1 sub 0 gt { 1 } { -1 } ifelse def 
  b 0 gt { 
    /z1 b 4 div CLW 2 div add def
%    /Helvetica findfont b scalefont setfont 
    /b b .95 mul CLW 2 div add def } if 
  systemdict /setstrokeadjust known 
    { true setstrokeadjust /t { } def }
    { /t { transform 0.25 sub round 0.25 add exch 0.25 sub round 0.25 add
       exch itransform } bind def } ifelse 
  gsave n 0 gt { 1 setlinecap [ 0 dy n div ] dy n div 2 div setdash } { 2 setlinecap } ifelse 
  /i x1 def 
  /f y1 dy mul n 0 gt { dy n div 2 div h mul sub } if def 
  /g y2 dy mul n 0 gt { dy n div 2 div h mul add } if def 
  x2 x1 sub w mul 1 add dup 1000 gt { pop 1000 } if 
  { i dx mul dup y0 moveto 
    b 0 gt 
      { gsave c i a cvs dup stringwidth pop 
        /z2 ED w 0 gt {z1} {z1 z2 add neg} ifelse 
	h 0 gt {b neg}{z1} ifelse 
        rmoveto show grestore } if 
    dup t f moveto 
    g t L stroke 
    /i i w add def 
  } repeat 
  grestore 
  gsave 
  n 0 gt
  % DG/SR modification begin - Nov. 7, 1997 - Patch 1
  %{ 1 setlinecap [ 0 dx n div ] dy n div 2 div setdash }
    { 1 setlinecap [ 0 dx n div ] dx n div 2 div setdash }
  % DG/SR modification end
    { 2 setlinecap } ifelse 
  /i y1 def 
  /f x1 dx mul n 0 gt { dx n div 2 div w mul sub } if def 
  /g x2 dx mul n 0 gt { dx n div 2 div w mul add } if def 
  y2 y1 sub h mul 1 add dup 1000 gt { pop 1000 } if 
  { newpath i dy mul dup x0 exch moveto 
    b 0 gt { gsave c i a cvs dup stringwidth pop 
      /z2 ED 
      w 0 gt {z1 z2 add neg} {z1} ifelse 
      h 0 gt {z1} {b neg} ifelse 
      rmoveto show grestore } if 
    dup f exch t moveto 
    g exch t L stroke 
    /i i h add def 
  } repeat 
  grestore 
} def
%
/ArcArrow { 
  /d ED /b ED /a ED 
  gsave 
  newpath 0 -1000 moveto clip 
  newpath 
  0 1 0 0 b 
  grestore 
  c mul 
  /e ED 
  pop pop pop r a e d PtoC y add exch x add
  exch r a PtoC y add exch x add exch b pop pop pop pop a e d CLW 8 div c
  mul neg d 
} def
%
%
/isbool { type (booleantype) cvn eq } def
%
/Ellipse { 
  dup isbool { /MoveToStart ED }{ /MoveToStart false def }ifelse  % false or true
  /rotAngle ED
  /mtrx CM def 
  T 
  rotAngle rotate
  scale 
  MoveToStart { 0 0 moveto 1 0 rmoveto } if  % move to the start position
  0 0 1 5 3 roll arc 
  mtrx setmatrix 
} def
%
/ArcAdjust { %%%% Vincent Guirardel
% given a target length (targetLength) and an initial angle (angle0) [in the stack],
% let  M(angle0)=(rx*cos(angle0),ry*sin(angle0))=(x0,y0).
% This computes an angle t such that (x0,y0) is at distance 
% targetLength from the point M(t)=(rx*cos(t),ry*sin(t)).
% NOTE: this an absolute angle, it does not have to be added or substracted to angle0
% contrary to TvZ's code.
% To achieve, this, one iterates the following process: start with some angle t,
% compute the point M' at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)].
% Now take t' (= new angle) so that (0,0) M(t') and M' are aligned.
%
% Another difference with TvZ's code is that we need d (=add/sub) to be defined.
% the value of d = add/sub is used to know on which side we have to move.
% It is only used in the initialisation of the angle before the iteration.
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% Input stack:  1: target length 2: initial angle
% variables used : rx, ry, d (=add/sub)
%
  /targetLength ED /angle0 ED
  /x0 rx angle0 cos mul def
  /y0 ry angle0 sin mul def
% we are looking for an angle t such that (x0,y0) is at distance targetLength 
% from the point M(t)=(rx*cos(t),ry*sin(t)))
%initialisation of angle (using 1st order approx = TvZ's code)
  targetLength 57.2958 mul
  angle0 sin rx mul dup mul
  angle0 cos ry mul dup mul
  add sqrt div 
% if initialisation angle is two large (more than 90 degrees) set it to 90 degrees
% (if the ellipse is very curved at the point where we draw the arrow, %
% the value can be much more than 360 degrees !)
% this should avoid going on the wrong side (more than 180 degrees) or go near
% a bad attractive point (at 180 degrees)
  dup 90 ge { pop 90 } if 
  angle0 exch d % add or sub
% maximum number of times to iterate the iterative procedure:
% iterative procedure: takes an angle t on top of stack, computes a 
% better angle (and put it on top of stack)
  30 { dup
% compute distance D between (x0,y0) and M(t)
    dup cos rx mul x0 sub dup mul exch sin ry mul y0 sub dup mul add sqrt
% if D almost equals targetLength, we stop
    dup targetLength sub abs 1e-5 le { pop exit } if
% stack now contains D t
% compute the point M(t') at distance targetLength of (x0,y0) on the semi-line [(x0,y0) M(t)]:
% M(t')= ( (x(t)-x0)*targetLength/d+x0 , (y(t)-y0)*targetLength/d+y0 )
    exch dup cos rx mul x0 sub  exch sin ry mul y0 sub
% stack contains:  y(t)-y0, x(t)-x0, d
    2 index Div targetLength mul y0 add ry Div exch
    2 index Div targetLength mul x0 add rx Div
% stack contains x(t')/rx , y(t')/ry , d
% now compute t', and remove D from stack
    atan exch pop
  } repeat
% we don't look at what happened... in particular, if targetLength is greater 
% than the diameter of the ellipse...
% the final angle will be around /angle0 + 180. maybe we should treat this pathological case...
% after iteration, stack contains an angle t such that M(t) is the tail of the arrow
% to give back the result as a an angle relative to angle0 we could add the following line:
% angle0 sub 0 exch d
%
% begin bug fix 2006-01-11
% we want to adjust the new angle t' by a multiple of 360 so that  | t'-angle0 | <= 180
%(we don't want to make the ellipse turn more or less than it should)...
dup angle0 sub dup abs 180 gt { 180 add 360 div floor 360 mul sub } { pop } ifelse
% end bug fix
} def
%
/EllipticArcArrow {
  /d ED      % is add or sub
  /b ED      % arrow procedure
  /a1 ED     % angle
  gsave
  newpath
  0 -1000 moveto
  clip                  % Set clippath far from arrow.
  newpath
  0 1 0 0 b             % Draw arrow to determine length.
  grestore
% Length of arrow is on top of stack. Next 3 numbers are junk.
%
  a1 exch ArcAdjust   % Angular position of base of arrow.
  /a2 ED
  pop pop pop
  a2 cos rx mul xOrig add % hv 2007-08-29   x->xOrig
  a2 sin ry mul yOrig add % hv 2007-08-29   y->yOrig
  a1 cos rx mul xOrig add % 
  a1 sin ry mul yOrig add % 
% Now arrow tip coor and base coor are on stack.
  b pop pop pop pop       % Draw arrow, and discard coordinates.
  a2 CLW 8 div
% change value of d (test it by looking if  `` 1 1 d '' gives 2 or not )
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse
  ArcAdjust
% resets original value of d
  1 1 d 2 eq { /d { sub } def } { /d { add } def } ifelse  % Adjust angle to give overlap.
} def
%%------------------ tvz/DG/hv (2004-05-10) end -------------------%%
%
/Rot { CP CP translate 3 -1 roll neg rotate NET  } def
%
/RotBegin { 
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
  /a ED 
  a Rot /RAngle [ RAngle dup a add ] cvx def 
} def
%
/RotEnd { 
  /TMatrix [ TMatrix setmatrix ] cvx def 
  /RAngle [ RAngle pop ] cvx def 
} def
%
/PutCoor { gsave CP T CM STV exch exec moveto setmatrix CP grestore } def
/PutBegin { /TMatrix [ TMatrix CM ] cvx def CP 4 2 roll T moveto } def
/PutEnd { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/Uput {
  /a ED 
  add 2 div /h ED 2 
  div /w ED 
  /s a sin def 
  /c a cos def 
  /b s abs c abs 2 copy gt dup 
    /q ED 
    { pop } { exch pop } ifelse def 
  /w1 c b div w mul def 
  /h1 s b div h mul def 
  q { w1 abs w sub dup c mul abs }{ h1 abs h sub dup s mul abs } ifelse 
} def
%
/UUput { 
  5 dict begin
  /z ED 
  abs /y ED 
  /x ED 
  q { x s div c mul abs y gt }{ x c div s mul abs y gt } ifelse 
    { x x mul y y mul sub z z mul add sqrt z add } 
    { q { x s div } { x c div } ifelse abs 
    } ifelse 
  a PtoC 
  h1 add exch 
  w1 add exch 
  end
} def
%
end
%-----------------------------------------------------------------------------%
%
% END pstricks.pro

%%EndProcSet
%%BeginProcSet: pst-algparser.pro 0 0
% $Id: pst-algparser.pro 919 2014-05-19 18:42:47Z herbert $
%%
%% PostScript prologue for PSTricks algorithm parser
%% Version 0.07, 2014/08/01
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%%-----------------------------------------------------------------------------%
%
%currentdict /Pi known not { /Pi 3.14159265359 def } if
%
/AlgParser { tx@AlgToPs begin AlgToPs end } def  % Dominique Rodriguez
/I2P { AlgParser cvx exec } def  % Infix to Postfix
%
/tx@CoreAnalyzerDict 100 dict def tx@CoreAnalyzerDict begin
%
% PS ANALYZER FOR ALGEBRAIC EXPRESSION V1.13
%
% 09/2011 DR factorial with ! added
%
% E->T|E+T
% T->FS|T*FS
% FS -> F | +FS | -FS
% F->P|F^SF|P!
% P->(E)|literal
% literal->number|var|var[E]|func(params)
% params->E|E,param
% number->TOBEFINISHED
%
%% E expression, T term, SF signed factor, F factor, P power
%
%% parser
%
%% str
%
%% C->E<condition_operators>E
%% STR index -> STR index+lenExpr
/AnalyzeCond { AnalyzeExpr ReadCondOp AnalyzeExpr EvalCondOp  } def
%
%% analyze Expression List (separator , or | )
%% STR index -> STR index+lenExpr
%% /AnalyzeListOfE {
%%   { NextNonBlankChar pop AnalyzeExpr%%dup Strlen eq { exit } if NextNonBlankChar
%%     NextNonBlankChar dup 0 eq { pop exit } if
%%     dup 44 ne 1 index 124 ne and { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse } if
%%     pop NextNonBlankChar dup 0 eq { exit } if 124 ne { PROBLEMCONTACTBILLOU } if 1 add NextNonBlankChar 0 eq {toto} if } loop
%%   AnalyzeListOfEPostHook
%% } def
/AnalyzeListOfE {
  /NotFirst false def
  { NextNonBlankChar pop AnalyzeExpr
    NotFirst { EvalListOfExpr } { /NotFirst true def } ifelse
    dup Strlen eq { exit } if NextNonBlankChar
    dup 44 ne 1 index 124 ne and
    { dup 41 ne { PROBLEMCONTACTBILLOU } { pop exit } ifelse }
    if  pop 1 add } loop
  AnalyzeListOfEPostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% E->T|E+T
%% STR index -> STR index+lenExpr
/AnalyzeExpr {
  AnalyzePreHook AnalyzeTerm IsEndingExpr
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeTerm PreEvalHook EvalAddSub IsEndingExpr { pop exit } if } loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% T->FS|T*FS
%% STR index
/AnalyzeTerm {
  AnalyzePreHook AnalyzeSignedFactor IsEndingTerm
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor PreEvalHook EvalMulDiv IsEndingTerm { pop exit } if} loop }
  ifelse
  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FS -> F | +FS | -FS
%% STR index
/AnalyzeSignedFactor {
  AnalyzePreHook 2 copy get dup IsUnaryOp
  { RollOp 1 add NextNonBlankChar pop AnalyzeSignedFactor EvalUnaryOp }
  { pop AnalyzeFactor }
  ifelse AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% F->P|F^P|P!
%% STR index
/AnalyzeFactor {
  AnalyzePreHook AnalyzePower IsEndingFactor
  { dup 0 ne { 32 eq { NextNonBlankChar } if } { pop } ifelse }
  { { dup 33 eq%% is there a ! DR 09/2011
      { pop 1 add NextNonBlankChar pop EvalFactorial }
      { RollOp 1 add NextNonBlankChar pop AnalyzePower PreEvalHook EvalPower }
      ifelse
      IsEndingFactor { pop exit } if } loop }
  ifelse  AnalyzePostHook
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% P->(E)|literal
%% STR index
/AnalyzePower {
  %% depending of first char either a number, or a literal
  2 copy get dup 40 eq%%an open par
  { pop 1 add NextNonBlankChar pop AnalyzeExpr 1 add NextNonBlankChar pop }
  { AnalyzeLiteral }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index STR[index] -> STR index
%/AnalyzeLiteral { IsNumber { EvalNumber } { EvalLiteral } ifelse } def
/AnalyzeLiteral { dup IsUnaryOp exch IsNumber or { EvalNumber } { EvalLiteral } ifelse } def%%dr 09102006
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% recognize + or -
%% chr -> T/F
/IsUnaryOp { dup 43 eq exch 45 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsNumber { dup 48 ge exch dup 57 le 3 -1 roll and exch 46 eq or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadNumber {
  exch dup 3 -1 roll dup 3 1 roll
  %%read mantissa
  { 1 add  2 copy dup Strlen eq { pop pop 0 exit } if get dup IsNumber not { exit } if pop } loop
  dup 101 eq exch 69 eq or
  %%% there is a "e" or "E" -> read exponant
  { 1 add 2 copy get dup IsUnaryOp
    { pop 1 add 2 copy get } if
    { IsNumber not { exit } if 1 add 2 copy get } loop }
  if
  dup 4 1 roll
  3 -1 roll exch 1 index sub getinterval
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a number can contain only : 0123456789.
%% chr -> T/F
/IsCondOp { dup 30 eq exch dup 60 ge exch 62 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index number
%% a number can be of the form [0-9]*.[0-9]*\([eE][+-]?[0-9]+\)?
%% STR index -> STR index' number
/ReadCondOp {
  NextNonBlankChar 1 index 4 1 roll
  { IsCondOp not { exit } if 1 add  2 copy get } loop
  2 copy 5 -1 roll
  exch 1 index sub getinterval 3 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can contain only : 0123456789.
%% chr -> T/F
/IsLiteral {%
  dup 48 ge exch dup  57 le 3 -1 roll and exch
  dup 65 ge exch dup  90 le 3 -1 roll and 3 -1 roll or exch
  dup 97 ge exch     122 le and or } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% a literal can be of the form [a-zA-Z][a-zA-Z0-9]*\(\((Expression)\)|\(\[Expression\]\)\)?
%% STR index -> literal STR index' nextchr
/ReadLiteral {
  exch dup 3 -1 roll dup 3 1 roll
  %%read literal core
  { 2 copy dup Strlen eq { pop pop 0 exit } if get dup IsLiteral not { exit } if pop 1 add } loop
  4 1 roll dup 5 1 roll 3 -1 roll exch 1 index sub getinterval 4 1 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a clpar
%% STR index -> STR index STR[index] T/F
/IsEndingExpr {%
  2 copy dup Strlen eq
  %% if end of str is reached -> end !
  { pop pop 0 true }
  %% ending chr -> clpar, comma, |, <, >, =, !,
  {get dup  dup  41 eq
       exch dup 124 eq
       exch dup  93 eq
       exch dup  44 eq
       exch dup  30 eq
       exch dup  60 ge exch 62 le and or or or or or}
  ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or a +-
%% STR index -> STR index STR[index] T/F
/IsEndingTerm { IsEndingExpr { true } { dup dup 43 eq exch 45 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or */
%% STR index -> STR index STR[index] T/F
/IsEndingFactor { IsEndingTerm { true } { dup dup 42 eq exch 47 eq or } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% expr is ended by end of str or ^
%% STR index -> STR index STR[index] T/F
/IsEndingPower { IsEndingFactor { true } { dup 94 eq } ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% STR index -> STR index STR[index]
/NextNonBlankChar { { dup Strlen eq { 0 exit } if 2 copy get dup neBlkChar { exit } if pop 1 add } loop } bind def
/neBlkChar { dup 32 ne exch dup 10 ne exch 9 ne and and } bind def
%%%%%%%%%%%%%%%%%%%%%%%%
%% DEBUG
/BRK {false} def
/BRKtrue {/BRK true def} def
/BRKStop {BRK {BRKtoto} if } def
/BRKEvalStop {BRK exch if } def
/BRKBRK2true {BRK {BRK2true} if } def
/BRK2 {false} def
/BRK2true {/BRK2 true def} def
/BRK2Stop {BRK2 {BRK2toto} if } def/BRK {false} def
end
%
%-------------------------------------------------------------------------------%
%
/tx@AlgToPs 12 dict def tx@AlgToPs begin
%
%% algExpr -> PSVector
/AlgToPs { tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE pop pop EndingSequence end } def
/EndingSequence { ExpressionVector aload length /end cvx exch 1 add array astore } def
/InitParser { /ExpressionVector [ /tx@AddMathFunc cvx /begin cvx ] def dup length /Strlen exch def 0 } def
/Strlen 0 def
/EvalListOfExpr {} def%
/EvalNumber {%
    ReadNumber  cvr /ExpressionVector ExpressionVector aload length dup 3 add -1 roll cvx
    exch 1 add array astore def NextNonBlankChar pop } def
/EvalAddSub {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  43 eq { /add } { /sub } ifelse cvx exch 1 add array astore def
} def
/EvalMulDiv {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  42 eq { /mul } { /div } ifelse cvx exch 1 add array astore def
} def
/EvalPower {%
  /ExpressionVector ExpressionVector aload length dup 5 add -1 roll
  pop /exp cvx exch 1 add array astore def
} def
/EvalFactorial {% DR 09/2011
  /ExpressionVector ExpressionVector aload length
  /fact cvx exch 1 add array astore def
} def
/EvalLiteral {%
  ReadLiteral
  dup 40 eq%%% there is an open par -> function call
  { pop 2 index
    dup (Sum) eq { EvalSum }
    { dup (IfTE) eq { EvalCond }
      { dup (Derive) eq { pop EvalDerive }
	{ pop 1 add NextNonBlankChar pop AnalyzeListOfE 2 index TrigoFunc
          /ExpressionVector ExpressionVector aload length dup 5 add -1 roll cvn cvx
	  exch 1 add array astore def 1 add NextNonBlankChar pop } ifelse } ifelse} ifelse }
  { /ExpressionVector ExpressionVector aload length dup 6 add -1 roll cvn cvx exch 1 add array astore def
    dup 91 eq%%% there is an open bracket -> vector element
    { pop 1 add NextNonBlankChar pop AnalyzeExpr
      /ExpressionVector ExpressionVector aload length /cvi cvx exch /get cvx exch 2 add array astore def 1 add }
    { pop NextNonBlankChar pop }
    ifelse}
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% the derive function : Derive(n,f(x))
%% firstparindex lastparindex ->
/EvalDerive {
  %% manage the function descripiton
  1 add ReadNumber 3 1 roll NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  1 add NextNonBlankChar pop
  3 -1 roll cvi
  dup 0 eq
  { pop AnalyzeExpr 3 -1 roll pop 1 add }
  { 1 sub 3 1 roll (x)  exch tx@Derive begin DeriveIndexed end 4 -1 roll
    { (x) tx@Derive begin Derive end } repeat
    ExpressionVector exch /ExpressionVector [] def
    AlgToPs aload length
    /ExpressionVector 1 index 3 add -1 roll aload length dup 3 add -1 roll  /l2 exch def /l1 exch def
    l1 l2 add 1 add l2 neg roll l1 l2 add array astore def 3 -1 roll pop 1 add
    1 index length /Strlen exch def } ifelse
} def
/EvalSum {%
  pop 1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber cvi 3 1 roll
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  /ExpressionVector ExpressionVector aload length dup 7 add -3 roll 0 4 1 roll
  5 -1 roll 4 add array astore def
  %% keep ExpressionVector for later and create a new one for internal Sum computation
  ExpressionVector 3 1 roll /ExpressionVector [ 6 -1 roll cvn /exch cvx /def cvx ] def
  1 add NextNonBlankChar pop AnalyzeExpr
  %% add each term
  /ExpressionVector ExpressionVector aload length 1 add /add cvx exch array astore def
  /ExpressionVector 4 -1 roll aload length ExpressionVector cvx /for cvx 3 -1 roll 2 add
  array astore def 3 -1 roll pop 1 add
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length 3.1415926 /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
/EvalCond {%
  pop 1 add AnalyzeCond NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  ExpressionVector 3 1 roll /ExpressionVector [] def
  1 add AnalyzeExpr ExpressionVector 3 1 roll /ExpressionVector [] def
  NextNonBlankChar 44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add AnalyzeExpr
  NextNonBlankChar 41 ne { ANALYZER_ERROR_missing_ending parenthesis_in_IfTE } if
  ExpressionVector
  /ExpressionVector 6 -1 roll aload length dup
  6 add -1 roll cvx exch dup 4 add -1 roll cvx /ifelse cvx 3 -1 roll 3 add array astore def
  1 add 3 -1 roll pop
} def
%% CondOp STR index
/EvalCondOp {%
  3 -1 roll
  dup (=) eq  { /eq } {%
  dup (<) eq  { /lt } {%
  dup (>) eq  { /gt } {%
  dup (>=) eq { /ge } {%
  dup (<=) eq { /ge } {%
  dup (!=) eq { /ne } { ERROR_non_valid_conditional_operator }
  ifelse } ifelse } ifelse } ifelse } ifelse } ifelse
  cvx exch pop
  /ExpressionVector ExpressionVector aload length dup 3 add -1 roll exch 1 add array astore def } def
/EvalUnaryOp {
  3 -1 roll 45 eq { /ExpressionVector ExpressionVector aload length /neg cvx exch 1 add array astore def } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook {} bind def
/PreEvalHook {} bind def
/AnalyzeListOfEPostHook {} bind def
/AnalyzePostHook {} def
/RollOp { 3 1 roll } bind def
end   %tx@CoreAnalyzerDict
%
%--------------------------------------------------------------------%
%
/tx@Derive 41 dict def tx@Derive begin
%%increase ^^ for each function added
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable -> PSVector
/Derive {
  10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser AnalyzeListOfE end
} def
/Strlen 0 def
/InitParser { dup length /Strlen exch def 0 } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% algExpr variable index -> PSVector
/DeriveIndexed {%
  3 1 roll 10240 string 3 1 roll 0 3 1 roll
  /Variable exch def
  tx@CoreAnalyzerDict begin InitParser pop 4 -1 roll AnalyzeExpr 4 -2 roll pop pop 4 -2 roll exch pop end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u,v)'=-(u',v')
/EvalListOfExpr {%
  4 2 roll 2 copy 9 -1 roll dup length 4 1 roll putinterval add AddPipe
           2 copy 7 -1 roll dup length 4 1 roll putinterval add
  6 -2 roll pop pop
  2 copy pop 0 6 2 roll GetIntervalNewStr 5 1 roll 2 copy 0 exch getinterval 6 1 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (-u)'=-(u')
/EvalUnaryOp {
  4 -2 roll 4 index (0) eq
  { (0) StrConcat 7 -1 roll pop }
  { 7 -1 roll 45 eq
    { AddSub AddOpPar true } { false } ifelse
    3 1 roll 5 index StrConcat 3 -1 roll { AddClPar } if } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  7 -2 roll pop pop 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (number)'=0
/EvalNumber { ReadNumber (0) 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u+v)'=u'+v'
/EvalAddSub {%
  7 index dup (0) eq
  { pop true }%% du=0 nothing added
  { dup length exch 5 index 5 index 3 -1 roll putinterval 4 -1 roll add 3 1 roll false }
  ifelse
  5 index dup (0) eq
  { pop { (0) } { 4 -2 roll 2 copy pop 0  6 2 roll GetIntervalNewStr } ifelse }%%dv=0
  { exch
    { 5 -2 roll 7 index 45 eq { AddSub } if false } %%nothing yet added
    { 5 -2 roll 7 index 43 eq%%something yet added
      { AddAdd false } { AddSub AddOpPar true } ifelse }
    ifelse 11 1 roll
    3 -1 roll StrConcat 10 -1 roll { AddClPar } if
    2 copy pop 0 6 2 roll GetIntervalNewStr }
  ifelse
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)' or (u/v)'
/EvalMulDiv { 6 index 42 eq {EvalMul} {EvalDiv} ifelse } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u*v)'=u'*v+u*v'
/EvalMul {%
  4 -2 roll 7 index dup (0) eq
  { pop false }%%du=0
  { (1) eq%%du=1
    { false }
    { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
    3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if
    true }%%du!=0
  ifelse
  5 1 roll 5 index (0) eq
  { 5 -1 roll not { (0) StrConcat } if }%%dv=0
  { 5 -1 roll { AddAdd } if
    4 index (1) eq
    { 8 index StrConcat }
    { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
    ifelse
  }%%dv!=0
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u/v)'=(u'*v-u*v')/v^2
/EvalDiv {%
  4 -2 roll
  4 index (0) eq%%dv=0 -> u'/v
  { 7 index (0) eq { (0) StrConcat } { AddOpPar 7 index StrConcat AddClPar AddDiv 5 index StrConcat } ifelse }
  { 7 index dup (0) eq
    { pop }%%du=0
    { (1) eq%%du=1
      { false }
      { AddOpPar 7 index StrConcat AddClPar AddMul AddOpPar true } ifelse
      3 1 roll 6 index StrConcat 3 -1 roll { AddClPar } if}%%du!=0
    ifelse
      AddSub
      4 index (1) eq
      { 8 index StrConcat }
      { AddOpPar 8 index StrConcat AddClPar AddMul AddOpPar 4 index StrConcat AddClPar }
      ifelse
    %}%%dv!=0
    2 copy GetIntervalNewStr 3 1 roll pop 0 AddOpPar 3 -1 roll StrConcat AddClPar
    AddDiv AddOpPar 5 index StrConcat AddClPar 2 copy (^2) putinterval 2 add }
  ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str1 index str2 -> str1 index
/StrConcat { dup length 4 2 roll 2 copy 6 -1 roll putinterval 3 -1 roll add } bind def
/GetIntervalNewStr { 0 exch getinterval dup length string copy } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (u^v)'=(u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
/EvalPower {%
  4 -2 roll 7 index (0) eq
  {%%if du=0 then (u^v)'=v'ln(u)u^v
    4 index (0) eq
    { (0) StrConcat }%%if dv=0 then (u^v)'=0
    { 4 index (1) ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if
      8 index (e) ne { (ln\() StrConcat 8 index StrConcat (\)*) StrConcat } if
      AddOpPar 8 index StrConcat (\)^\() StrConcat 5 index StrConcat AddClPar } ifelse
  }
  {%%du!=0
    4 index (0) eq
    {%%if dv=0 then (u^v)'=vu'u^(v-1)
      5 index dup IsStrNumber
      { dup (0) eq
        { StrConcat }
        { dup dup (1) eq exch (1.0) eq or
          { StrConcat  }
	  { StrConcat
	    7 index dup (1) ne exch (1.0) ne and%%%dr 09102006 insert du if <> 1
	    { (*\() StrConcat 7 index StrConcat (\)) StrConcat } if%%%dr 09102006
            (*\() StrConcat 8 index StrConcat (\)) StrConcat
            5 index  dup dup (2) eq exch (2.0) eq or
	    { pop } { cvr 1 sub 20 string cvs 3 1 roll (^) StrConcat 3 -1 roll StrConcat } ifelse } ifelse } ifelse }
      { pop AddOpPar 5 index StrConcat (\)*\() StrConcat 8 index StrConcat (\)^\() StrConcat
        5 index StrConcat (-1\)) StrConcat } ifelse
    }
    {%%if dv!=0 and du!=0 then (u^v)'=u'vu^(v-1)+v'u^(v)ln(u)
      7 index (1) ne { AddOpPar 7 index StrConcat (\)*) StrConcat } if
      AddOpPar 5 index StrConcat (\)*\() StrConcat
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (-1\)+\() StrConcat
      4 index (1) ne { 4 index StrConcat (\)*\() StrConcat } if
      8 index StrConcat (\)^\() StrConcat
      5 index StrConcat (\)*ln\() StrConcat
      8 index StrConcat AddClPar
    } ifelse
  } ifelse
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for factorial ! only cst => null derivative
/EvalFactorial {% DR 09/2011
  4 index (0) eq
  { (0) mark 8 -2 roll  cleartomark 2 index 7 index dup 4 index exch sub getinterval exch 6 2 roll }
  { DERIVATIVE_ENGINE_ERROR_no_variable_in_factorial } ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% str -> true/false
/IsStrNumber {%
  true exch
  { dup 48 lt exch dup 57 gt 3 -1 roll or
    exch dup 46 ne%%.
    exch dup 43 ne%%+
    exch 45 ne%%-
    and and and { pop false } if } forall
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalLiteral {%
  ReadLiteral dup 40 eq%%% there is an open par -> function call
  { pop (EvalFunc_             ) 9 4 index StrConcat 0 exch getinterval cvn cvx exec }
  { dup 91 eq%%% there is an open bracket -> vector element
    { DERIVATIVE_ENGINE_ERROR_vector_not_yet_implemented }
    { pop EvalVariable }
    ifelse }
  ifelse
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% first last parpos Expr[first:parpos-1] ->
/EvalVariable { 2 index Variable eq { (1) } { (0) } ifelse 4 -1 roll exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% (f(u))'=u'f'(u)
/EvalFunc {
  4 2 roll 4 index (1) ne
  { AddOpPar 4 index StrConcat (\)*) StrConcat } if
  (Eval             ) 4 8 index StrConcat 0 exch getinterval cvn cvx exec
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Func derivative -> Eval<func>
/EvalFunc_sin {%
  PreCommonFunc
  { (cos\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_cos {%
  PreCommonFunc
  { (\(-sin\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_tan {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/cos\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_asin {%
  PreCommonFunc
  { (1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_acos {%
  PreCommonFunc
  { (-1/sqrt\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_atg {%
  PreCommonFunc
  { (1/\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_floor {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ln {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_exp {%
  PreCommonFunc
  {  (exp\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_EXP {%
  PreCommonFunc
  {  (EXP\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_sqrt {%
  PreCommonFunc
  { dup 0 eq { (1) StrConcat } { 1 sub } ifelse (/\(2*sqrt\() StrConcat 5 index StrConcat (\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Fact {%
  PreCommonFunc { DERIVATIVE_ENGINE_ERROR_no_variable_expression_in_Fact } if
  PostCommonFunc } def
/EvalFunc_sh {%
  PreCommonFunc
  { (ch\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_ch {%
  PreCommonFunc
  { (sh\() StrConcat 5 index StrConcat AddClPar } if
  PostCommonFunc } def
/EvalFunc_th {%
  PreCommonFunc
  {  dup 0 eq { (1) StrConcat } { 1 sub } ifelse  (/ch\() StrConcat 5 index StrConcat (\)^2) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argsh {%
  PreCommonFunc
  { (1/sqrt\(1+\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argch {%
  PreCommonFunc
  { (1/sqrt\(\() StrConcat 5 index StrConcat (\)^2-1\)\)) StrConcat } if
  PostCommonFunc } def
/EvalFunc_Argth {%
  PreCommonFunc
  { (1/\(1-\() StrConcat 5 index StrConcat (\)^2\)\)) StrConcat } if
  PostCommonFunc } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/PreCommonFunc {
  1 add NextNonBlankChar pop 3 -1 roll 5 1 roll AnalyzeExpr 1 add NextNonBlankChar pop
  4 2 roll 4 index (0) eq
  { (0) StrConcat false }
  { 4 index (1)  ne { AddOpPar 4 index StrConcat (\)*) StrConcat } if true } ifelse
} def
/PostCommonFunc {
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
/EvalFunc_Derive {%
  1 add ReadNumber cvi 1 add dup cvr log 1 add cvi string cvs
  4 -1 roll pop 5 1 roll 1 add NextNonBlankChar pop AnalyzeExpr 1 add
  4 -2 roll (Derive\() StrConcat 7 -1 roll StrConcat (,) StrConcat 6 -1 roll StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr 6 -1 roll pop 2 index 6 index dup 4 index exch sub getinterval
  exch 6 2 roll } def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_Sum {%
  1 add NextNonBlankChar pop
  %% read the variable name
  ReadLiteral pop 3 -1 roll pop NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_Sum } if
  %% read the initial value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_second_comma_in_Sum } if
  %% read the increment value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_third_comma_in_Sum } if
  %% read the limit value
  1 add NextNonBlankChar pop ReadNumber pop
  2 copy get 44 ne { ANALYZER_ERROR_missing_fourth_comma_in_Sum } if
  1 add NextNonBlankChar pop dup 6 1 roll 3 -1 roll pop AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 8 index dup 9 index exch sub getinterval StrConcat
  4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 9 -3 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% literal switch -> func call, vector, variables
/EvalFunc_IfTE {%
  3 -1 roll pop 1 add NextNonBlankChar pop SkipCond
  NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_first_comma_in_IfTE } if
  1 add NextNonBlankChar pop dup 5 1 roll
  AnalyzeExpr NextNonBlankChar
  44 ne { ANALYZER_ERROR_missing_second_comma_in_IfTE } if
  1 add NextNonBlankChar pop
  AnalyzeExpr 1 add NextNonBlankChar pop
  4 -2 roll 3 index 10 index dup 11 index exch sub getinterval StrConcat
  6 index StrConcat (,) StrConcat 4 index StrConcat AddClPar
  2 copy pop 0 6 2 roll GetIntervalNewStr
  mark 11 -5 roll cleartomark 2 index 6 index dup 4 index exch sub getinterval exch 6 2 roll
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% advance in str until a comma is found (no error detection!)
%% str index -> str index'
/SkipCond { { 1 add 2 copy get 44 eq {exit } if } loop } bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Convert to radians if trigo function call
%% (name) ->
/TrigoFunc {
  dup (cos) eq 1 index (sin) eq or exch (tan) eq or
  { /ExpressionVector ExpressionVector aload length Pi /div cvx 180 /mul cvx 5 -1 roll 4 add
    array astore def
  } if
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% No derivative for condition....
/EvalCondOp { 3 -1 roll pop } bind def
/PutIntervalOneAdd {putinterval 1 add} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddOpPar {2 copy (\() PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add close parenthesis in string at the given index
%% str index -> str index+1
/AddClPar {2 copy (\)) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add 0 in string at the given index
%% str index -> str index+1
/AddZero {2 copy (0) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddMul {2 copy (*) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add open parenthesis in string at the given index
%% str index -> str index+1
/AddDiv {2 copy (/) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a plus sign in string at the given index
%% str index -> str index+1
/AddAdd {2 copy (+) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a minus sign in string at the given index
%% str index -> str index+1
/AddSub {2 copy (-) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% Add a pipe sign in string at the given index
%% str index -> str index+1
/AddPipe {2 copy (|) PutIntervalOneAdd} bind def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% H O O K S
/AnalyzePreHook { dup 5 1 roll } bind def
/PreEvalHook {} def
/AnalyzePostHook { 7 -1 roll pop } bind def
/AnalyzeListOfEPostHook { 6 -1 roll mark 6 1 roll cleartomark } bind def
/RollOp { 5 1 roll } bind def
end%%%tx@CoreAnalyzerDict
/tx@AddMathFunc 12 dict def tx@AddMathFunc begin
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% NEW FUNC
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% function arcsine in radians asin(x)=atan(x/sqrt(1-x^2))
%% x -> theta
/asin {%
  dup abs 1 gt { EQDFasinrangeerror  } if
  dup dup dup mul 1 exch sub sqrt atan exch 0 lt { 360 sub } if DegtoRad
} def
%% function arccosine in radians acos(x)=atan(sqrt(1-x^2)/x)
%% x -> theta
/acos {%
  dup abs 1 gt { EQDFacosrangeerror  } if
  dup dup mul 1 exch sub sqrt exch atan DegtoRad
} def
%% function arctangent in radians
%% x -> theta
/atg { 1 atan dup 90 gt { 360 sub } if DegtoRad } bind def
%% HYPERBOLIC FUNCTIONS
/sh { dup Ex exch neg Ex sub 2 div } def
/ch { dup Ex exch neg Ex add 2 div } def
/th { dup sh exch ch div } def
/Argsh { dup dup mul 1 add sqrt add ln } def
/Argch { dup dup mul 1 sub sqrt add ln } def
/Argth { dup 1 add exch 1 exch sub div ln 2 div } def
%% modified exponential funtion for 0
%% x n -> x^n
/Exp { dup 0 eq { pop pop 1 } { exp } ifelse } bind def
%% modified exponential funtion for 0
%% x -> e^x
/Ex { Euler exch exp } bind def
%%
%% factorial function
%% n -> n!
/Fact { 1 exch 2 exch 1 exch { mul } for } bind def
/fact { Fact } bind def
/! { Fact } bind def
end
%
% END pst-algparser.pro

%%EndProcSet
%%BeginProcSet: pst-tools.pro 0 0
% $Id: pst-tools.pro 842 2013-10-26 10:25:41Z herbert $
%
%% PostScript tools prologue for pstricks.tex.
%% Version 0.04, 2013/10/26
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%
/Pi2 1.57079632679489661925640 def
/factorial { % n on stack, returns n! 
  dup 0 eq { 1 }{ 
    dup 1 gt { dup 1 sub factorial mul } if }
  ifelse } def 
%
/MoverN { % m n on stack, returns the binomial coefficient m over n
  2 dict begin
  /n exch def /m exch def
  n 0 eq { 1 }{
    m n eq { 1 }{
      m factorial n factorial m n sub factorial mul div } ifelse } ifelse 
  end
} def
%
/ps@ReverseOrderOfPoints { % on stack [P1 P2 P3 ...Pn]=>[Pn,Pn-1,...,P2,P1]
  5 dict begin       % all local
  aload length /n ED % number of coors
  n 2 div cvi /m ED  % number of Points
  /n1 n def
  m { n1 2 roll /n1 n1 2 sub def } repeat
  n array astore
  end
} def
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% subroutines for complex numbers, given as an array [a b] 
% which is a+bi = Real+i Imag
%
/cxadd {		% [a1 b1] [a2 b2] = [a1+a2 b1+b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  3 -1 roll		% [a2 b2] a2 [a1 b1]
  dup 0 get		% [a2 b2] a2 [a1 b1] a1
  3 -1 roll		% [a2 b2] [a1 b1] a1 a2
  add			% [a2 b2] [a1 b1] a1+a2
  3 1 roll		% a1+a2 [a2 b2] [a1 b1]
  1 get			% a1+a2 [a2 b2] b1
  exch 1 get		% a1+a2 b1 b2
  add 2 array astore
} def
%
/cxneg {		% [a b]
  dup 1 get		% [a b] b
  exch 0 get		% b a
  neg exch neg		% -a -b
  2 array astore
} def
%
/cxsub { cxneg cxadd } def  % same as negative addition
%
% [a1 b1][a2 b2] = [a1a2-b1b2 a1b2+b1a2] = [a3 b3]
/cxmul {		% [a1 b1] [a2 b2]
  dup 0 get		% [a1 b1] [a2 b2] a2
  exch 1 get		% [a1 b1] a2 b2
  3 -1 roll		% a2 b2 [a1 b1]
  dup 0 get		% a2 b2 [a1 b1] a1
  exch 1 get		% a2 b2 a1 b1
  dup			% a2 b2 a1 b1 b1
  5 -1 roll dup		% b2 a1 b1 b1 a2 a2
  3 1 roll mul		% b2 a1 b1 a2 b1a2
  5 -2 roll dup		% b1 a2 b1a2 b2 a1 a1
  3 -1 roll dup		% b1 a2 b1a2 a1 a1 b2 b2
  3 1 roll mul		% b1 a2 b1a2 a1 b2 a1b2
  4 -1 roll add		% b1 a2 a1 b2 b3
  4 2 roll mul		% b1 b2 b3 a1a2
  4 2 roll mul sub	% b3 a3
  exch 2 array astore
} def
%
% [a b]^2 = [a^2-b^2 2ab] = [a2 b2]
/cxsqr {		% [a b]   square root
  dup 0 get exch 1 get	% a b
  dup dup mul		% a b b^2
  3 -1 roll		% b b^2 a
  dup dup mul 		% b b^2 a a^2
  3 -1 roll sub		% b a a2
  3 1 roll mul 2 mul	% a2 b2	
  2 array astore
} def
%
/cxsqrt {		% [a b]
%  dup cxnorm sqrt /r exch def
%  cxarg 2 div RadtoDeg dup cos r mul exch sin r mul cxmake2 
  cxlog 		% log[a b]
  2 cxrdiv 		% log[a b]/2
  aload pop exch	% b a
  2.781 exch exp	% b exp(a)
  exch cxconv exch	% [Re +iIm] exp(a)
  cxrmul		%
} def
%
/cxarg { 		% [a b] 
  aload pop 		% a b
  exch atan 		% arctan b/a
  DegtoRad 		% arg(z)=atan(b/a)
} def
%
% log[a b] = [a^2-b^2 2ab] = [a2 b2]
/cxlog {		% [a b]
  dup 			% [a b][a b]
  cxnorm 		% [a b] |z|
  log 			% [a b] log|z|
  exch 			% log|z|[a b]
  cxarg 		% log|z| Theta
  cxmake2 		% [log|z| Theta]
} def
%
% square of magnitude of complex number
/cxnorm2 {		% [a b]
  dup 0 get exch 1 get	% a b
  dup mul			% a b^2
  exch dup mul add	% a^2+b^2
} def
%
/cxnorm {		% [a b]
  cxnorm2 sqrt
} def
%
/cxconj {		% conjugent complex
  dup 0 get exch 1 get	% a b
  neg 2 array astore	% [a -b]
} def
%
/cxre { 0 get } def	% real value
/cxim { 1 get } def	% imag value
%
% 1/[a b] = ([a -b]/(a^2+b^2)
/cxrecip {		% [a b]
  dup cxnorm2 exch	% n2 [a b]
  dup 0 get exch 1 get	% n2 a b
  3 -1 roll		% a b n2
  dup			% a b n2 n2
  4 -1 roll exch div	% b n2 a/n2
  3 1 roll div		% a/n2 b/n2
  neg 2 array astore
} def
%
/cxmake1 { 0 2 array astore } def % make a complex number, real given
/cxmake2 { 2 array astore } def	  % dito, both given
%
/cxdiv { cxrecip cxmul } def
%
% multiplikation by a real number
/cxrmul {		% [a b] r
  exch aload pop	% r a b
  3 -1 roll dup		% a b r r
  3 1 roll mul		% a r b*r
  3 1 roll mul		% b*r a*r
  exch 2 array astore   % [a*r b*r]
} def
%
% division by a real number
/cxrdiv {		% [a b] r
  1 exch div		% [a b] 1/r
  cxrmul
} def
%
% exp(i theta) = cos(theta)+i sin(theta) polar<->cartesian
/cxconv {		% theta
  RadtoDeg dup sin exch cos cxmake2
} def

%%%%% ### bubblesort ###
%% syntax : array bubblesort --> array2 trie par ordre croissant
%% code de Bill Casselman
%% http://www.math.ubc.ca/people/faculty/cass/graphics/text/www/
/bubblesort { % on stack must be an array [ ... ]
4 dict begin
   /a exch def
   /n a length 1 sub def
   n 0 gt {
      % at this point only the n+1 items in the bottom of a remain to
      % the sorted largest item in that blocks is to be moved up into
      % position n
      n {
         0 1 n 1 sub {
            /i exch def
            a i get a i 1 add get gt {
               % if a[i] > a[i+1] swap a[i] and a[i+1]
               a i 1 add
               a i get
               a i a i 1 add get
               % set new a[i] = old a[i+1]
               put
               % set new a[i+1] = old a[i]
               put
            } if
         } for
         /n n 1 sub def
      } repeat
   } if
   a % return the sorted array
end
} def
%
/concatstringarray{  %  [(a) (b) ... (z)] --> (ab...z)  20100422
  0 1 index { length add } forall 
  string     
  0 3 2 roll      
  { 3 copy putinterval length add }forall 
  pop  
} bind def
%
/dot2comma {% on stack a string (...) 
  2 dict begin
  /Output exch def
  0 1 Output length 1 sub { 
    /Index exch def 
    Output Index get 46 eq { Output Index 44 put } if 
  } for
  Output
  end
} def
%
/rightTrim { % on stack the string and the character number to be stripped  
  /charNo exch def
  dup
  length 1 sub -1 0 { 
    /i exch def dup i get charNo ne { exit } if 
  } for
  0 i 1 add getinterval
  dup length string copy
} bind def  % leaves the stripped string on the stack

/psStringwidth /stringwidth load def
/psShow /show load def

%/stringwidth{ 32 rightTrim psStringwidth } bind def

%/show { 32 rightTrim psShow } bind def
%-----------------------------------------------------------------------------%

/pgffunctions {
    /pgfsc{}bind def% stroke color is empty by default
    /pgffc{}bind def% fill color is empty by default
    /pgfstr{stroke}bind def%
    /pgffill{fill}bind def%
    /pgfeofill{eofill}bind def%
    /pgfe{a dup 0 rlineto exch 0 exch rlineto neg 0 rlineto closepath}bind def% rectangle
    /pgfw{setlinewidth}bind def% setlinewidth
    /pgfs{save pgfpd 72 Resolution div 72 VResolution div neg scale 
      magscale{1 DVImag div dup scale}if 
      pgfx neg pgfy neg translate pgffoa .setopacityalpha}bind def% save
    /pgfr{pgfsd restore}bind def %restore
    userdict begin%
    /pgfo{pgfsd /pgfx currentpoint /pgfy exch def def @beginspecial}bind def %open
    /pgfc{newpath @endspecial pgfpd}bind def %close
    /pgfsd{globaldict /pgfdelta /delta where {pop delta} {0} ifelse put}bind def% save delta
    /pgfpd{/delta globaldict /pgfdelta get def}bind def % put delta
    /.setopacityalpha where {pop} {/.setopacityalpha{pop}def} ifelse % install .setopacityalpha 
    /.pgfsetfillopacityalpha{/pgffoa exch def
      /pgffill{gsave pgffoa .setopacityalpha fill 1 .setopacityalpha newpath fill grestore newpath}bind def
      /pgfeofill{gsave pgffoa .setopacityalpha eofill 1 .setopacityalpha newpath eofill grestore newpath}bind def}bind def
    /.pgfsetstrokeopacityalpha{/pgfsoa exch def /pgfstr{gsave pgfsoa .setopacityalpha stroke grestore newpath}bind def}bind def
    /pgffoa 1 def
    /pgfsoa 1 def
    end
} def
%-----------------------------------------------------------------------------%
% END pst-tools.pro

%%EndProcSet
%%BeginProcSet: pst-dots.pro 0 0
% $Id: pst-dots.pro 801 2013-07-09 18:10:41Z herbert $
%
%% PostScript prologue for pstricks.tex.
%% Version 2.02,  2009/06/16
%%
%% For distribution, see pstricks.tex.
%%
%% Timothy Van Zandt <tvz@Princeton.EDU>
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%%
%% Modified by Etienne Riga  - Dec. 16, 1999
%% Modified by Etienne Riga  - 2005/01/01 (er)
%% to add /Diamond, /SolidDiamond and /BoldDiamond
%% Modified by Herbert Voss (hv) - 2008/04/17 
%
10 dict dup begin			% hold local
  /FontType 3 def
  /FontMatrix [.001 0 0 .001 0 0] def
%  /FontBBox [-571.5 -742.5 571.5 742.5] def % changed to next line 20060616 hv
  /FontBBox [-1000 -1000 1000 1000] def  % See end of file in /BuildGlyph
  /Encoding 256 array def
  0 1 255 {Encoding exch /.notdef put} for % fill the array with /.notdef
  Encoding				   % replace with given dot names
    dup (b) 0 get /Bullet put		   % get the numerical position of b in ASCII
%					   % and save /Bullet at this place in Encoding 
    dup (c) 0 get /Circle put
    dup (C) 0 get /BoldCircle put	% 67
    dup (u) 0 get /SolidTriangle put
    dup (t) 0 get /Triangle put
    dup (T) 0 get /BoldTriangle put
    dup (r) 0 get /SolidSquare put
    dup (s) 0 get /Square put
    dup (S) 0 get /BoldSquare put
    dup (q) 0 get /SolidPentagon put
    dup (p) 0 get /Pentagon put
    dup (P) 0 get /BoldPentagon put
%%%		  
    dup (k) 0 get /Asterisk put
    dup (K) 0 get /BoldAsterisk put
    dup (J) 0 get /SolidAsterisk put
    dup (h) 0 get /Hexagon put
    dup (H) 0 get /BoldHexagon put
    dup (G) 0 get /SolidHexagon put
    dup (f) 0 get /Octogon put		% 2008-04-18 hv
    dup (F) 0 get /BoldOctogon put	% 2008-04-18 hv
    dup (g) 0 get /SolidOctogon put	% 2008-04-18 hv
    dup (a) 0 get /Add put
    dup (A) 0 get /BoldAdd put 		% 65
    dup (x) 0 get /Mul put
    dup (X) 0 get /BoldMul put
    dup (m) 0 get /Oplus put
    dup (M) 0 get /BOplus put
    dup (e) 0 get /SolidOplus put
    dup (n) 0 get /Otimes put
    dup (N) 0 get /BOtimes put
    dup (E) 0 get /SolidOtimes put
    dup (i) 0 get /Bar put
    dup (I) 0 get /BoldBar put
    dup (l) 0 get /SolidDiamond put
    dup (d) 0 get /Diamond put
        (D) 0 get /BoldDiamond put
%%%  
/CharProcs 47 dict def
CharProcs begin
  /CirclePath {0 0 500 0 360 arc closepath} def
  /Bullet {CirclePath fill} def
  /Circle {CirclePath .9 .9 scale CirclePath eofill} def
  /BoldCircle {CirclePath .8 .8 scale CirclePath eofill} def
  /TrianglePath {0 660 moveto -571.5 -330 lineto 571.5 -330 lineto closepath} def
  /SolidTriangle {TrianglePath fill} def
  /Triangle {TrianglePath .85 .85 scale TrianglePath eofill} def
  /BoldTriangle {TrianglePath .7 .7 scale TrianglePath eofill} def
  /SquarePath {-450 450 moveto 450 450 lineto 450 -450 lineto -450 -450 lineto closepath} def
  /SolidSquare {SquarePath fill} def
  /Square {SquarePath .89 .89 scale SquarePath eofill} def
  /BoldSquare {SquarePath .78 .78 scale SquarePath eofill} def
  /PentagonPath {
    -337.8 -465 moveto 337.8 -465 lineto 546.6 177.6 lineto
    0 574.7 lineto -546.6 177.6 lineto closepath
  } def
  /SolidPentagon {PentagonPath fill} def
  /Pentagon {PentagonPath .89 .89 scale PentagonPath eofill} def
  /BoldPentagon {PentagonPath .78 .78 scale PentagonPath eofill} def
%-------------- hv begin 2004/07/25   from: er 2003/03/24
  /HexagonPath {
    0 550 moveto -476 275 lineto -476 -275 lineto
    0 -550 lineto 476 -275 lineto 476 275 lineto closepath
  } def
  /SolidHexagon {HexagonPath fill} def
  /Hexagon {HexagonPath .89 .89 scale HexagonPath eofill} def
  /BoldHexagon {HexagonPath .79 .79 scale HexagonPath eofill} def
%					2008-04-18 hv
  /OctogonPath { 
     550 dup 22.5 tan mul dup neg dup add /xMove exch def 
     exch moveto 7 { xMove 0 rlineto 45 rotate } repeat closepath } def 
  /SolidOctogon { OctogonPath fill                             } def
  /Octogon {      OctogonPath .89 .89 scale OctogonPath eofill } def
  /BoldOctogon {  OctogonPath .79 .79 scale OctogonPath eofill } def
%
  /AsteriskPath {
    20 0 moveto 10 250 180 500 0 500 curveto
    -180 500 -10 250 -20 0 curveto closepath
  } def
  /Asterisk {
    AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath
    60 rotate AsteriskPath 60 rotate AsteriskPath 60 rotate AsteriskPath fill
  } def
%
  /Basterp {50 250 220 500 0 500 curveto -220 500 -50 250 -50 30 cos 100 mul curveto} def
  /BoldAsteriskPath {
    50 30 cos 100 mul moveto  Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp 60 rotate Basterp
    60 rotate Basterp closepath
  } def
  /BoldAsterisk {BoldAsteriskPath fill} def
  /SolidAsterisk {CirclePath .9 .9 scale BoldAsteriskPath eofill} def
  /CrossPath {
    40 550 moveto -40 550 lineto -40 40 lineto -550 40 lineto
    -550 -40 lineto -40 -40 lineto -40 -550 lineto 40 -550 lineto 
    40 -40 lineto 550 -40 lineto 550 40 lineto 40 40 lineto closepath
  } def
  /BoldCrossPath {80 550 moveto -80 550 lineto -80 80 lineto -550 80 lineto
    -550 -80 lineto -80 -80 lineto -80 -550 lineto 80 -550 lineto 
    80 -80 lineto 550 -80 lineto 550 80 lineto 80 80 lineto closepath
  } def
  /Add {CrossPath fill} def
  /Mul {45 rotate CrossPath fill} def
  /BoldAdd {BoldCrossPath fill} def
  /BoldMul {45 rotate BoldCrossPath fill} def
  /Oplus {CirclePath .9 .9 scale CirclePath eofill .775 .775 scale CrossPath fill } def 
  /SolidOplus {CirclePath .775 .775 scale BoldCrossPath eofill} def 
  /BOplus {CirclePath .8 .8 scale CirclePath eofill .775 .775 scale BoldCrossPath fill} def 
  /Otimes {CirclePath .9 .9 scale CirclePath eofill 45 rotate .775 .775 scale CrossPath fill} def 
  /BOtimes {CirclePath .8 .8 scale CirclePath eofill 45 rotate .775 .775 scale BoldCrossPath fill } def 
  /SolidOtimes {CirclePath 45 rotate .775 .775 scale BoldCrossPath eofill} def 
  /BarPath {40 660 moveto -40 660 lineto -40 -660 lineto 40 -660 lineto closepath} def
  /Bar {BarPath fill} def
  /BoldBarPath {80 660 moveto -80 660 lineto -80 -660 lineto 80 -660 lineto closepath} def
  /BoldBar {BoldBarPath fill} def
  /DiamondPath {0 742.5 moveto -428.5 0 lineto 0 -742.5 lineto 428.5 0 lineto closepath} def
  /SolidDiamond {DiamondPath fill} def
  /Diamond {DiamondPath .865 .865 scale DiamondPath eofill} def
  /BoldDiamond {DiamondPath .73 .73 scale DiamondPath eofill} def
%%%
  /.notdef { } def
end
%
/BuildGlyph {
  exch
  begin 		
%  Metrics 1 index get exec 0
    0 0
%      BBoxes 3 index get exec
    -1000 -1000 1000 1000
%     -571.5 -742.5 571.5 742.5
    setcachedevice
    CharProcs begin load exec end
  end
} def
%
/BuildChar {
  1 index /Encoding get exch get
  1 index /BuildGlyph get exec
} bind def
%
end
/PSTricksDotFont exch definefont pop
%
%% end

%%EndProcSet
%%BeginProcSet: pst-text.pro 0 0
%!
% PostScript header file pst-text.pro
% Version 1.0, 2005-11-29 (hv)
% For distribution, see pstricks.tex.

/tx@TextPathDict 40 dict def
tx@TextPathDict begin

% Syntax:  <dist> PathPosition -
% Function: Searches for position of currentpath distance <dist> from
%           beginning. Sets (X,Y)=position, and Angle=tangent.
/PathPosition
{ /targetdist exch def
  /pathdist 0 def
  /continue true def
  /X { newx } def /Y { newy } def /Angle 0 def
  gsave
    flattenpath
    { movetoproc }  { linetoproc } { } { firstx firsty linetoproc }
    /pathforall load stopped { pop pop pop pop /X 0 def /Y 0 def } if
  grestore
} def

/movetoproc { continue { @movetoproc } { pop pop } ifelse } def

/@movetoproc
{ /newy exch def /newx exch def
  /firstx newx def /firsty newy def
} def

/linetoproc { continue { @linetoproc } { pop pop } ifelse } def

/@linetoproc {
  /oldx newx def /oldy newy def
  /newy exch def /newx exch def
  /dx newx oldx sub def
  /dy newy oldy sub def
  /dist dx dup mul dy dup mul add sqrt def
  /pathdist pathdist dist add def
  pathdist targetdist ge
  { pathdist targetdist sub dist div dup
    dy mul neg newy add /Y exch def
    dx mul neg newx add /X exch def
    /Angle dy dx atan def
    /continue false def
  } if
} def

/TextPathShow { 
  /String exch def
  /CharCount 0 def
% hv begin 2005-11-29   1.00
%   String length
%   { String CharCount 1 getinterval ShowChar
%     /CharCount CharCount 1 add def
   /CharSize 1 def
   currentfont /FontType get 0 eq
   { currentfont /FMapType get dup 2 eq exch dup 5 eq exch 9 eq or or
     { /CharSize 2 def} if
   } if
   String length CharSize idiv
   { String CharCount CharSize getinterval ShowChar
     /CharCount CharCount CharSize add def
% hv end 2005-11-29   1.00
  } repeat
} def

% Syntax: <pathlength> <position> InitTextPath -
/InitTextPath
{ gsave
    currentpoint /Y exch def /X exch def
    exch X Hoffset sub sub mul
    Voffset Hoffset sub add
    neg X add /Hoffset exch def
    /Voffset Y def
  grestore
} def

/Transform
{ PathPosition
  dup
  Angle cos mul Y add exch
  Angle sin mul neg X add exch
  translate
  Angle rotate
} def

/ShowChar { 
  /Char exch def
  gsave
    Char end stringwidth
    tx@TextPathDict begin
    2 div /Sy exch def 2 div /Sx exch def

%%%  MV 10-09-99 00:36
    /sc?currentpoint where {pop sc?currentpoint} {currentpoint} ifelse
%   currentpoint

    Voffset sub Sy add exch
    Hoffset sub Sx add
    Transform
    Sx neg Sy neg moveto
    Char end tx@TextPathSavedShow
    tx@TextPathDict begin
  grestore
  Sx 2 mul Sy 2 mul rmoveto
} def
%
end
% END pst-text.pro

%%EndProcSet
%%BeginProcSet: pst-node.pro 0 0
% $Id: pst-node.pro 40 2014-07-25 06:46:27Z herbert $
%%
%% PostScript prologue for pst-node.tex.
%% Version 1.15, 2014/01/27.
%%
%% This program can be redistributed and/or modified under the terms
%% of the LaTeX Project Public License Distributed from CTAN archives
%% in directory macros/latex/base/lppl.txt.
%
%%%%  EMPTY lines are not aload!!! Problem with pst-eps -> \par
%
%
tx@Dict begin 			% from main pstricks dict
 /T /translate load def 
 /CP /currentpoint load def 
% /startGlobal { true setglobal globaldict begin } bind def
% /endGlobal { end false setglobal } bind def
end
/tx@NodeDict 400 dict def tx@NodeDict begin
/NewNode { % on stack: { x y } boolean N@name type InitXnode 
  gsave 
  NodeScale                     % a bugfix for xelatex, it's empty for dvips
  /next exch def 		% { x y } boolean N@name type  
  dict dup 			% { x y } boolean N@name dict dict
  3 1 roll def 			% { x y } boolean dict N@name dict def
  exch { dup 3 1 roll def } if  % { x y } dict boolean
  begin 			% { x y } dict begin
  tx@Dict begin 
    STV CP T exec 		% set scaling
  end 
  /NodeMtrx CM def 		% save CM
  next 				% InitXNode
  end
  grestore 
} def
%
/InitPnode { 
  /Y ED /X ED 
  /NodePos { NodeSep Cos mul NodeSep Sin mul } def
} def
%
/InitCnode { 
  /r ED /Y ED /X ED 
  /NodePos { NodeSep r add dup Cos mul exch Sin mul } def 
} def
%
/GetRnodePos { 
  Cos 0 gt { /dx r NodeSep add def } { /dx l NodeSep sub def } ifelse 
  Sin 0 gt { /dy u NodeSep add def } { /dy d NodeSep sub def } ifelse 
  dx Sin mul abs dy 
  Cos mul abs gt { dy Cos mul Sin div dy } { dx dup Sin mul Cos Div } ifelse 
} def
%
/InitRnode { 
  /Y ED /X ED X sub /r ED /l X neg def Y add neg /d ED Y sub /u ED 
  /NodePos { GetRnodePos } def 
} def
%
/DiaNodePos { 
  w h mul w Sin mul abs h Cos mul abs add Div NodeSep add dup
  Cos mul exch Sin mul 
} def
%
/TriNodePos { 
  Sin s lt 
    { d NodeSep sub dup Cos mul Sin Div exch } 
    { w h mul w Sin mul h Cos abs mul add Div 
      NodeSep add dup Cos mul exch Sin mul 
    } ifelse 
} def
%
/InitTriNode { 
  sub 2 div exch 
  2 div exch 
  2 copy T 
  2 copy 4 index index /d ED 
  pop pop pop pop 
  -90 mul rotate 
  /NodeMtrx CM def 
  /X 0 def /Y 0 def 
  d sub abs neg /d ED 
  d add /h ED 
  2 div h mul h d sub Div /w ED 
  /s d w Atan sin def 
  /NodePos { TriNodePos } def 
} def
%
/OvalNodePos { 
  /ww w NodeSep add def 
  /hh h NodeSep add def 
  Sin ww mul Cos hh mul Atan dup cos ww mul exch sin hh mul 
} def
%
/GetCenter { begin X Y NodeMtrx transform CM itransform end } def
%
/XYPos { 
  dup sin exch cos Do 
  /Cos ED /Sin ED /Dist ED 
  Cos 0 gt 
    { Dist Dist Sin mul Cos div }
    { Cos 0 lt 
      { Dist neg Dist Sin mul Cos div neg }
      { 0 Dist Sin mul } ifelse 
    } ifelse 
  Do 
} def
%
/GetEdge {
  dup 0 eq 
    { pop begin 1 0 NodeMtrx dtransform 
      CM idtransform 
      exch atan sub 
      dup 
      sin /Sin ED 
      cos /Cos ED 
      /NodeSep ED 
      NodePos NodeMtrx dtransform CM idtransform end }
    { 1 eq {{exch}} {{}} ifelse /Do ED pop XYPos } ifelse 
} def
%
/AddOffset { 
  1 index 0 eq 
    { pop pop } 
    { 2 copy 5 2 roll cos mul add 4 1 roll sin mul sub exch } ifelse 
} def
%
/GetEdgeA { 
  NodeSepA AngleA NodeA NodeSepTypeA GetEdge 
  OffsetA AngleA AddOffset 
  yA add /yA1 ED 
  xA add /xA1 ED 
} def
%
/GetEdgeB { 
  NodeSepB AngleB NodeB NodeSepTypeB GetEdge 
  OffsetB AngleB AddOffset 
  yB add /yB1 ED 
  xB add /xB1 ED 
} def
%
/GetArmA { 
  ArmTypeA 0 eq 
    { /xA2 ArmA AngleA cos mul xA1 add def 
      /yA2 ArmA AngleA sin mul yA1 add def } 
    { ArmTypeA 1 eq {{exch}} {{}} ifelse 
      /Do ED 
      ArmA AngleA XYPos OffsetA AngleA AddOffset 
      yA add /yA2 ED 
      xA add /xA2 ED } ifelse 
} def
%
/GetArmB { 
  ArmTypeB 0 eq 
    { /xB2 ArmB AngleB cos mul xB1 add def 
      /yB2 ArmB AngleB sin mul yB1 add def } 
    { ArmTypeB 1 eq {{exch}} {{}} ifelse 
      /Do ED
      ArmB AngleB XYPos OffsetB AngleB AddOffset 
      yB add /yB2 ED 
      xB add /xB2 ED } ifelse 
} def
%
/InitNC { 
  /b ED /a ED % second and first node
  /NodeSepTypeB ED /NodeSepTypeA ED 
  /NodeSepB ED /NodeSepA ED 
  /OffsetB ED /OffsetA ED 
  tx@NodeDict a known tx@NodeDict b known and dup { 
    /NodeA a load def 
    /NodeB b load def 
    NodeA GetCenter /yA ED /xA ED 
    NodeB GetCenter /yB ED /xB ED } if 
} def
%
/LPutLine { 
  4 copy 
  3 -1 roll sub neg 3 1 roll sub Atan /NAngle ED 
  1 t sub mul 
  3 1 roll 1 t sub mul 
  4 1 roll t mul add /Y ED 
  t mul add /X ED 
} def
%
/LPutLines { 
  mark LPutVar counttomark 2 div 1 sub /n ED 
%  t floor dup n gt 
  t floor dup n ge 		% to allow npos<= hv 2008-08-14
  { pop n 1 sub /t 1 def } { dup t sub neg /t ED } ifelse 
  cvi 2 mul { pop } repeat 
  LPutLine 
  cleartomark 
} def
%
/BezierMidpoint { 
  /y3 ED /x3 ED /y2 ED /x2 ED /y1 ED /x1 ED /y0 ED /x0 ED /t ED 
  /cx x1 x0 sub 3 mul def 
  /cy y1 y0 sub 3 mul def 
  /bx x2 x1 sub 3 mul cx sub def 
  /by y2 y1 sub 3 mul cy sub def 
  /ax x3 x0 sub cx sub bx sub def 
  /ay y3 y0 sub cy sub by sub def 
  ax t 3 exp mul bx t t mul mul add 
  cx t mul add x0 add ay t 3 exp mul 
  by t t mul mul add cy t mul add
  y0 add 3 ay t t mul mul mul 2 
  by t mul mul add cy add 3 ax t t mul mul mul 
  2 bx t mul mul add cx add atan /NAngle ED 
  /Y ED /X ED 
} def
%
/HPosBegin { yB yA ge { /t 1 t sub def } if /Y yB yA sub t mul yA add def
} def
%
/HPosEnd { /X Y yyA sub yyB yyA sub Div xxB xxA sub mul xxA add def
           /NAngle yyB yyA sub xxB xxA sub Atan def 
} def
/HPutLine { HPosBegin /yyA ED /xxA ED /yyB ED /xxB ED HPosEnd  } def
%
/HPutLines { HPosBegin yB yA ge 
  { /check { le } def } { /check { ge } def } ifelse 
  /xxA xA def 
  /yyA yA def 
  mark xB yB LPutVar 
    { dup Y check { exit } { /yyA ED /xxA ED } ifelse } 
  loop 
  /yyB ED /xxB ED cleartomark HPosEnd 
} def
%
/VPosBegin { 
  xB xA lt { /t 1 t sub def } if /X xB xA sub t mul xA add def
} def
%
/VPosEnd { /Y X xxA sub xxB xxA sub Div yyB yyA sub mul yyA add def
/NAngle yyB yyA sub xxB xxA sub Atan def } def
/VPutLine { VPosBegin /yyA ED /xxA ED /yyB ED /xxB ED VPosEnd  } def
/VPutLines { VPosBegin xB xA ge { /check { le } def } { /check { ge } def
} ifelse /xxA xA def /yyA yA def mark xB yB LPutVar { 1 index X check {
exit } { /yyA ED /xxA ED } ifelse } loop /yyB ED /xxB ED cleartomark
VPosEnd  } def
/HPutCurve { gsave newpath /SaveLPutVar /LPutVar load def LPutVar 8 -2
roll moveto curveto flattenpath /LPutVar [ {} {} {} {} pathforall ] cvx
def grestore exec /LPutVar /SaveLPutVar load def 
} def
%
/NCCoor { 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def
  GetEdgeA GetEdgeB 
  /LPutVar [ xB1 yB1 xA1 yA1 ] cvx def 
  /LPutPos { LPutVar LPutLine } def 
  /HPutPos { LPutVar HPutLine } def 
  /VPutPos { LPutVar VPutLine } def 
  LPutVar 
} def
%
/NCLine { 
  NCCoor 
  tx@Dict begin 
  ArrowA CP 4 2 roll 
  ArrowB 
  lineto pop pop
  end 
} def
%
/NCLines { 
  false NArray 
  n 0 eq 
    { NCLine } 
    { 2 copy yA sub exch xA sub Atan /AngleA ED 
      n 2 mul dup index exch index yB sub exch xB sub 
      Atan /AngleB ED 
      GetEdgeA GetEdgeB 
      /LPutVar [ xB1 yB1 n 2 mul 4 add 4 roll xA1 yA1 ] cvx def 
      mark LPutVar 
      tx@Dict begin false Line end 
      /LPutPos { LPutLines } def 
      /HPutPos { HPutLines } def 
      /VPutPos { VPutLines } def 
    } ifelse 
} def
%
/NCCurve { 
  GetEdgeA 
  GetEdgeB 
  xA1 xB1 sub yA1 yB1 sub Pyth 2 div dup 3 -1
roll mul /ArmA ED mul /ArmB ED /ArmTypeA 0 def /ArmTypeB 0 def GetArmA
GetArmB xA2 yA2 xA1 yA1 tx@Dict begin ArrowA end xB2 yB2 xB1 yB1 tx@Dict
begin ArrowB end curveto /LPutVar [ xA1 yA1 xA2 yA2 xB2 yB2 xB1 yB1 ]
cvx def /LPutPos { t LPutVar BezierMidpoint } def /HPutPos { { HPutLines
} HPutCurve } def /VPutPos { { VPutLines } HPutCurve } def } def
%
/NCAngles { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform pop 
  xB2 yB2 mtrx transform exch pop 
  mtrx itransform 
  /y0 ED /x0 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def } def
%
/NCAngle { 
  GetEdgeA GetEdgeB GetArmB 
  /mtrx AngleA matrix rotate def 
  xB2 yB2 mtrx itransform pop xA1 yA1 mtrx itransform exch pop mtrx transform
  /y0 ED /x0 ED 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 x0 y0 xA1 yA1
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 x0 y0 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCBar { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def
  xA2 yA2 mtrx itransform pop 
  xB2 yB2 mtrx itransform pop 
  sub dup 0 mtrx transform 
  3 -1 roll 0 gt 
    { /yB2 exch yB2 add def /xB2 exch xB2 add def }
    { /yA2 exch neg yA2 add def /xA2 exch neg xA2 add def } ifelse 
  mark 
  ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
/NCDiag { 
  /lineAngle ED
  GetEdgeA GetEdgeB GetArmA GetArmB mark
  lineAngle abs 0 gt {
    /xTemp xA2 10 add def
    /yTemp yA2 lineAngle dup sin exch cos div 10 mul add def
    /dY1 yTemp yA2 sub def
    /dX1 xTemp xA2 sub def
    /dY2 yB2 yB1 sub def
    /dX2 xB2 xB1 sub def
    dX1 abs 0.01 lt {
      /m2 dY2 dX2 div def
      /xB2 xA2 def
      /yB2 xA2 xB1 sub m2 mul yB1 add def
    }{
      dX2 abs 0.01 lt {
        /m1 dY1 dX1 div def
        /xB2 xB1 def
        /yB2 xB1 xA2 sub m1 mul yA2 add def
      }{%
        /m1 dY1 dX1 div def
        /m2 dY2 dX2 div def
        /xB2 m1 xA2 mul m2 xB1 mul sub yA2 sub yB1 add m1 m2 sub div def
        /yB2 xB2 xA2 sub m1 mul yA2 add def
      } ifelse
    } ifelse
  } if
  ArmB 0 ne { xB1 yB1 } if
  xB2 yB2 xA2 yA2 
  ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
%
%  GetEdgeA GetEdgeB GetArmA GetArmB mark 
%  ArmB 0 ne { xB1 yB1 } if
%  xB2 yB2 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end
%  /LPutVar [ xB1 yB1 xB2 yB2 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCDiagg { 
  /lineAngle ED
  GetEdgeA GetArmA 
  lineAngle abs 0 gt 
    { lineAngle }
    { yB yA2 sub xB xA2 sub Atan 180 add } ifelse 
  /AngleB ED
  GetEdgeB mark
  lineAngle abs 0 gt {
    /dY2 yA2 yA1 sub def
    /dX2 xA2 xA1 sub def
    lineAngle abs 90 eq {
      /m2 dY2 dX2 div def
      /yA2 xB xA2 sub m2 mul yA2 add def
      /xA2 xB def
    }{
      /m1 lineAngle dup sin exch cos div def % tan alpha
      dX2 abs 0.01 lt {
        /yA2 xA1 xB sub m1 mul yB add def
        /xA2 xA1 def
      }{%
        /m2 dY2 dX2 div def
        /xA2 m1 xB mul m2 xA2 mul sub yA2 add yB sub m1 m2 sub div def
        /yA2 xA2 xB sub m1 mul yB add def
      } ifelse
    } ifelse
  } if
  xB1 yB1 xA2 yA2
  ArmA 0 ne { xA1 yA1 } if
  tx@Dict begin false Line end
  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def
  /LPutPos { LPutLines } def
  /HPutPos { HPutLines } def
  /VPutPos { VPutLines } def
%
%  GetEdgeA GetArmA 
%  yB yA2 sub xB xA2 sub Atan 180 add /AngleB ED
%  GetEdgeB 
%  mark 
%  xB1 yB1 xA2 yA2 
%  ArmA 0 ne { xA1 yA1 } if 
%  tx@Dict begin false Line end 
%  /LPutVar [ xB1 yB1 xA2 yA2 xA1 yA1 ] cvx def 
%  /LPutPos { LPutLines } def 
%  /HPutPos { HPutLines } def 
%  /VPutPos { VPutLines } def 
} def
%
/NCLoop { 
  GetEdgeA GetEdgeB GetArmA GetArmB 
  /mtrx AngleA matrix rotate def 
  xA2 yA2 mtrx transform loopsize add /yA3 ED /xA3 ED 
  /xB3 xB2 yB2 mtrx transform pop def 
  xB3 yA3 mtrx itransform /yB3 ED /xB3 ED 
  xA3 yA3 mtrx itransform /yA3 ED /xA3 ED 
  mark ArmB 0 ne { xB1 yB1 } if 
  xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 ArmA 0 ne { xA1 yA1 } if 
  tx@Dict begin false Line end 
  /LPutVar [ xB1 yB1 xB2 yB2 xB3 yB3 xA3 yA3 xA2 yA2 xA1 yA1 ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { HPutLines } def 
  /VPutPos { VPutLines } def 
} def
%
% DG/SR modification begin - May 9, 1997 - Patch 1
%/NCCircle { 0 0 NodesepA nodeA \tx@GetEdge pop xA sub 2 div dup 2 exp r
%r mul sub abs sqrt atan 2 mul /a ED r AngleA 90 add PtoC yA add exch xA add
%exch 2 copy /LPutVar [ 4 2 roll r AngleA ] cvx def /LPutPos { LPutVar t 360
%mul add dup 5 1 roll 90 sub \tx@PtoC 3 -1 roll add /Y ED add /X ED /NAngle ED
%
/NCCircle { 
  NodeSepA 0 NodeA 0 GetEdge pop 
  2 div dup 2 exp r r mul sub abs sqrt 
  atan 2 mul /a ED 
  r AngleA 90 add PtoC yA add exch xA add 
  exch 2 copy 
  /LPutVar [ 4 2 roll r AngleA ] cvx def 
  /LPutPos { 
    LPutVar t 360 mul add dup 5 1 roll 90 sub PtoC 
    3 -1 roll add 
    /Y ED add /X ED /NAngle ED
% DG/SR modification end
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
  r AngleA 90 sub a add AngleA 270 add a sub 
  tx@Dict begin 
  /angleB ED /angleA ED /r ED 
  /c 57.2957 r Div def 
  /y ED /x ED 
} def
%
/NCBox { 
  /d ED /h ED 
  /AngleB yB yA sub xB xA sub Atan def 
  /AngleA AngleB 180 add def 
  GetEdgeA GetEdgeB 
  /dx d AngleB sin mul def 
  /dy d AngleB cos mul neg def 
  /hx h AngleB sin mul neg def 
  /hy h AngleB cos mul def 
  /LPutVar [ 
    xA1 hx add yA1 hy add xB1 hx add yB1 hy add 
    xB1 dx add yB1 dy add xA1 dx add yA1 dy add ] cvx def 
  /LPutPos { LPutLines } def 
  /HPutPos { xB yB xA yA LPutLine } def 
  /VPutPos { HPutPos } def 
  mark 
  LPutVar tx@Dict begin false Polygon end 
} def
%
/NCArcBox { 
  /l ED neg /d ED /h ED /a ED 
  /AngleA yB yA sub xB xA sub Atan def 
  /AngleB AngleA 180 add def 
  /tA AngleA a sub 90 add def 
  /tB tA a 2 mul add def 
  /r xB xA sub tA cos tB cos sub Div dup 0 eq { pop 1 } if def
  /x0 xA r tA cos mul add def 
  /y0 yA r tA sin mul add def 
  /c 57.2958 r div def 
  /AngleA AngleA a sub 180 add def 
  /AngleB AngleB a add 180 add def
  GetEdgeA GetEdgeB 
  /AngleA tA 180 add yA yA1 sub xA xA1 sub Pyth c mul sub def 
  /AngleB tB 180 add yB yB1 sub xB xB1 sub Pyth c mul add def 
  l 0 eq { 
    x0 y0 r h add AngleA AngleB arc x0 y0 r d add AngleB AngleA arcn 
  }{ 
    x0 y0 translate 
    /tA AngleA l c mul add def 
    /tB AngleB l c mul sub def
    0 0 r h add tA tB arc r h add 
    AngleB PtoC r d add 
    AngleB PtoC 2 copy 
    6 2 roll l arcto 4 { pop } repeat 
    r d add tB PtoC l arcto 4 { pop } repeat 
    0 0 r d add tB tA arcn r d add 
    AngleA PtoC r h add 
    AngleA PtoC 2 copy 6 2 roll 
    l arcto 4 { pop } repeat 
    r h add tA PtoC l arcto 4 { pop } repeat 
  } ifelse 
  closepath 
  /LPutVar [ x0 y0 r AngleA AngleB h d ] cvx def 
  /LPutPos { 
    LPutVar /d ED /h ED 
    /AngleB ED /AngleA ED 
    /r ED /y0 ED /x0 ED 
    t 1 le { 
      r h add AngleA 1 t sub mul AngleB t mul add dup 90 add /NAngle ED PtoC 
    }{t 2 lt { 
        /NAngle AngleB 180 add def r 2 t sub 
        h mul t 1 sub d mul add add AngleB PtoC 
      }{ 
        t 3 lt { 
          r d add AngleB 3 t sub mul AngleA 2 t sub
          mul add dup 90 sub /NAngle ED PtoC 
        }{ 
          /NAngle AngleA 180 add def 
          r 4 t sub d mul t 3 sub h mul add add AngleA PtoC 
        } ifelse 
      } ifelse 
    } ifelse
    y0 add /Y ED x0 add /X ED 
  } def 
  /HPutPos { LPutPos } def 
  /VPutPos { LPutPos } def 
} def
%
/Tfan { /AngleA yB yA sub xB xA sub Atan def GetEdgeA w xA1 xB sub yA1 yB
sub Pyth Pyth w Div CLW 2 div mul 2 div dup AngleA sin mul yA1 add /yA1
ED AngleA cos mul xA1 add /xA1 ED /LPutVar [ xA1 yA1 m { xB w add yB xB
w sub yB } { xB yB w sub xB yB w add } ifelse xA1 yA1 ] cvx def /LPutPos
{ LPutLines } def /VPutPos@ { LPutVar flag { 8 4 roll pop pop pop pop }
{ pop pop pop pop 4 2 roll } ifelse } def /VPutPos { VPutPos@ VPutLine }
def /HPutPos { VPutPos@ HPutLine } def mark LPutVar tx@Dict begin
/ArrowA { moveto } def /ArrowB { } def false Line closepath end } def
%
/LPutCoor { 
  NAngle 
  tx@Dict begin /NAngle ED end 
  gsave 
  CM STV 
  CP Y sub neg exch X sub neg exch moveto 
  setmatrix CP 
  grestore 
} def
%
/LPut { 
  tx@NodeDict /LPutPos known 
    { LPutPos } { CP /Y ED /X ED /NAngle 0 def } ifelse 
  LPutCoor  
} def
%
/HPutAdjust { 
  Sin Cos mul 0 eq 
    { 0 } 
    { d Cos mul Sin div flag not { neg } if 
      h Cos mul Sin div flag { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { r add neg }{ l add } ifelse 
  X add /X ED 
} def
%
/VPutAdjust { 
  Sin Cos mul 
  0 eq 
    { 0 }
    { l Sin mul Cos div flag { neg } if
      r Sin mul Cos div flag not { neg } if 
      2 copy gt { pop } { exch pop } ifelse 
    } ifelse 
  s add flag { d add } { h add neg } ifelse 
  Y add /Y ED 
} def
%
%
end
%
% END pst-node.pro

%%EndProcSet
%%BeginProcSet: pst-3d.pro 0 0
%% $Id: pst-3d.pro 247 2010-01-04 22:45:42Z herbert $
% PostScript prologue for pst-3d.tex.
% Version 0.01, 2010/01/01 
%
/tx@3Ddict 300 dict def 
tx@3Ddict begin
%
/SetMatrixThreeD {
  dup sin /e ED cos /f ED
  /p3 ED /p2 ED /p1 ED
  p1 0 eq
  { /a 0 def /b p2 0 le { 1 } { -1 } ifelse def
    p3 p2 abs
  }
  { p2 0 eq
    { /a p1 0 lt { -1 } { 1 } ifelse def /b 0 def
      p3 p1 abs
    }
    { p1 dup mul p2 dup mul add sqrt dup
      p1 exch div /a ED
      p2 exch div neg /b ED
      p3 p1 a div
    }
    ifelse
  }
  ifelse
  atan dup sin /c ED cos /d ED
  /Matrix3D
  [
    b f mul c a mul e mul sub
    a f mul c b mul e mul add
    d e mul
    b e mul neg c a mul f mul sub
    a e mul neg c b mul f mul add
    d f mul
  ] def
} def
%
/ProjThreeD {
  /z ED /y ED /x ED
  Matrix3D aload pop
  z mul exch y mul add exch x mul add
  4 1 roll
  z mul exch y mul add exch x mul add
  exch
} def
%
/SetMatrixEmbed {
  SetMatrixThreeD
  Matrix3D aload pop
  /z3 ED /z2 ED /z1 ED /x3 ED /x2 ED /x1 ED
  SetMatrixThreeD
  [
  Matrix3D aload pop
  z3 mul exch z2 mul add exch z1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  Matrix3D aload pop
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  x3 mul exch x2 mul add exch x1 mul add
  3 -1 roll 3 -1 roll 4 -1 roll 8 -3 roll 3 copy
  x3 mul exch x2 mul add exch x1 mul add 4 1 roll
  z3 mul exch z2 mul add exch z1 mul add
  ]
  concat
} def
%
/TMSave {
  tx@Dict /TMatrix known not { /TMatrix { } def /RAngle { 0 } def } if 
  /TMatrix [ TMatrix CM ] cvx def 
} def
%
/TMRestore { CP /TMatrix [ TMatrix setmatrix ] cvx def moveto } def
%
/TMChange {
  TMSave
  /cp [ currentpoint ] cvx def % ??? Check this later.
  CM
  CP T STV
  CM matrix invertmatrix    % Inv(M')
  matrix concatmatrix       % M Inv(M')
  exch exec
  concat cp moveto
} def
%
end % of tx@3Ddict
%%
%% End of file `pst-3d.pro'.

%%EndProcSet
%%BeginProcSet: pst-math.pro 0 0
%                           -*- Mode: Postscript -*-
% pst-math.pro --- PostScript header file pst-math.pro
%
% Author          : Christophe JORSSEN 
% Author          : Herbert Voß <hvoss@tug.org>
% Last Mod        : $Date: 2014/07/30 $
% Version         : 0.63 $
%
/PI 3.14159265359 def
/ENeperian 2.71828182846 def
%
/DegToRad {PI mul 180 div} bind def
/RadToDeg {180 mul PI div} bind def
%
/COS {RadToDeg cos} bind def
/SIN {RadToDeg sin} bind def
/TAN {dup SIN exch COS Div} bind def
/tan {dup sin exch cos Div} bind def
/ATAN {neg -1 atan 180 sub DegToRad} bind def
/ACOS {dup dup mul neg 1 add sqrt exch atan DegToRad} bind def
/acos {dup dup mul neg 1 add sqrt exch atan} bind def
/ASEC {1 exch Div ACOS} bind def
/ASIN {neg dup dup mul neg 1 add sqrt neg atan 180 sub DegToRad} bind def
/asin {neg dup dup mul neg 1 add sqrt neg atan 180 sub} bind def
/ACSC {1 exch Div ASIN} bind def
%
/EXP {ENeperian exch exp} bind def
%
/COSH {dup EXP exch neg EXP add 2 div} bind def
/SINH {dup EXP exch neg EXP sub 2 div} bind def
/TANH {dup SINH exch COSH div} bind def
/ACOSH {dup dup mul 1 sub sqrt add ln} bind def
/ASINH {dup dup mul 1 add sqrt add ln} bind def
/ATANH {dup 1 add exch neg 1 add Div ln 2 div} bind def
%
%/SINC {dup SIN exch Div} bind def
/SINC { dup 0 eq { pop 1 } { dup SIN exch div } ifelse } bind def

/GAUSS {dup mul 2 mul dup 4 -2 roll sub dup mul exch div neg EXP exch PI mul sqrt div} bind def
%
/GAMMA { 2 dict begin				% hv 2007-08-30
  /z exch def
  1.000000000190015				% p(0)
  0 1 5 {					% on stack is 0 1 2 3 4 5 
    dup 					% n-1 n-1
    [ 76.18009172947146 
     -86.50532032941677 
      24.0140982483091 
      -1.231739572450155
       0.1208650973866179E-2 
      -0.5395239384953E-5      ] exch get exch 	% p(n) n-1
      1 add z add div			     	% p(n)/(z+n)
      add					% build the sum
    } for
    Pi 2 mul sqrt z div mul
    z 5.5 add z 0.5 add exp mul ENeperian z 5.5 add neg exp mul 
  end } bind def
%    
/GAMMALN {dup dup dup 5.5 add dup ln 3 -1 roll .5 add mul sub neg 1.000000000190015
    0 1 5 {
    [76.18009172947146 -86.50532032941677 24.0140982483091 -1.231739572450155
    .1208650973866179E-2 -.5395239384953E-5 2.5066282746310005] exch get
    4 -1 roll 1 add dup 5 1 roll div add} for
    4 -1 roll div 2.5066282746310005 mul ln add exch pop} bind def
/BETA {2 copy add GAMMALN neg exch GAMMALN 3 -1 roll GAMMALN EXP} bind def
%
/HORNER {aload length
    dup 2 add -1 roll
    exch 1 sub {
        dup 4 1 roll
        mul add exch
    } repeat
    pop
} bind def
%
/BESSEL_J0 {dup abs 8 lt {
    dup mul dup [57568490574 -13362590354 651619640.7 -11214424.18 77392.33017 -184.9052456] HORNER
    exch [57568490411 1029532985 9494680.718 59272.64853 267.8532712 1] HORNER
    Div}
    {abs dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -1.098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index COS mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul} 
    ifelse} bind def
%
/BESSEL_Y0 {dup 8 lt {
    dup dup mul dup [-2957821389 7062834065 -512359803.6 10879881.29 -86327.92757 228.4622733] HORNER
    exch [40076544269 745249964.8 7189466.438 47447.26470 226.1030244 1] HORNER
    Div exch dup ln exch BESSEL_J0 .636619772 mul mul add}
    {dup .636619772 exch div sqrt exch dup .785398164 sub exch 8 exch div dup dup mul dup 
    [1 -.1098628627E-2 .2734510407E-4 -.2073370639E-5 .2093887211E-6] HORNER
    3 index SIN mul
    exch [-.1562499995E-1 .1430488765E-3 -.6911147651E-5 .7621095161E-6 -.934945152E-7] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
/BESSEL_J1 {dup abs 8 lt {
    dup dup mul dup 3 -2 roll [72362614232 -7895059235 242396853.1 -2972611.439 15704.48260 -30.16036606] HORNER mul
    exch [144725228442 2300535178 18583304.74 99447.43394 376.9991397 1] HORNER
    Div}
    {dup abs dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index COS mul
    exch [.04687499995 6.2002690873E-3 .8449199096E-5 -.88228987E-6 .105787412E-6] HORNER
    4 -1 roll SIN mul 3 -1 roll mul neg add mul exch dup abs Div mul} 
    ifelse} bind def
%
/BESSEL_Y1 {dup 8 lt {
    dup dup dup mul dup [-.4900604943E13 .1275274390E13 -.5153428139E11 .7349264551E9 -.4237922726E7 .8511937935E4] HORNER
    exch [.2499580570E14 .4244419664E12 .3733650367E10 .2245904002E8 .1020426050E6 .3549632885E3 1] HORNER
    Div mul exch dup dup ln exch BESSEL_J1 mul exch 1 exch div sub .636619772 mul add}
    {dup .636619772 exch div sqrt exch dup 2.356194491 sub exch 8 exch div dup dup mul dup 
    [1 .183105E-2 -.3516396496E-4 .2457520174E-5 -.240337019E-6] HORNER
    3 index SIN mul
    exch [.04687499995 -.2002690873E-3 .8449199096E-5 6.88228987E-6 .105787412E-6] HORNER
    4 -1 roll COS mul 3 -1 roll mul add mul} 
    ifelse} bind def
%
% En cours...
/BESSEL_Yn {dup 0 eq {pop BESSEL_Y0}{dup 1 eq {pop BESSEL_Y1}{
    exch dup BESSEL_Y0 exch dup BESSEL_Y1 exch 2 exch Div {
        mul 3 -1 roll mul 2 index sub pstack} for
    } ifelse } ifelse } bind def
%
/SIMPSON { 1 dict begin  %% on stack a b var f ierr  Dominik Rodriguez
  3 index 5 index sub                                % compute h
  1                                                  % a b var f ierr h n
  4 index 7 index def 3 index exec                   % a b var f ierr h n f(a)
  5 index 7 index def 4 index exec add               % a b var f ierr h n f(a)+f(b)
  5 index 8 index 4 index 2 div add def 4 index exec % a b var f ierr h n f(a)+f(b) f(a+h/2)
  exch 1 index 4 mul add 0  % a b var f ierr h n old=f(a+h/2) Estim=f(a)+f(b)+4f(a+h/2) NbLoop
    {                                                % a b var f ierr h n old Estim NbLoop
      5 -1 roll 2 div dup 6 1 roll              % h<-h/2
      5 -1 roll 2 mul 5 1 roll                  % n<-2n
                                                % a b var f ierr h n old Estim NbLoop h
      2 div 10 index add 0                      % a b var f ierr h n old Estim NbLoop a+h/2 Cumul
      5 index { 
        1 index 10 index exch def 8 index exec add exch 6 index add exch 
      } repeat                                  % a b var f ierr h n old Estim NbLoop a+nh/2 Cumul
      exch pop                                  % a b var f ierr h n old Estim NbLoop New
      2 index 1 index 4 mul 6 -1 roll 2 mul sub sub % a b var f ierr h n Estim NbLoop New Diff
      4 -1 roll 2 mul 1 index sub 4 1 roll          % a b var f ierr h n Estim NbLoop New Diff
      exch 4 1 roll                             % a b var f ierr h n old Estim NbLoop Diff
      5 index 6 div mul abs 6 index lt { exit } if
      1 add dup 9 eq { exit } if
  } loop                                        % a b var f ierr h n old Estim NbLoop
  exch 5 -1 roll 6 div mul mark 10 2 roll cleartomark
end 
} def
% ------------------------------------ math stuff ----------------------------------
%
% Matrix A in arrays of rows A[[row1][row2]...]
% with [row1]=[a11 a12 ... b1]
% returns on stack solution vector X=[x1 x2 ... xn]
/SolveLinEqSystem { 				% on stack matrix M=[A,b] (A*x=b)
  10 dict begin					% hold all ocal
    /A exch def
    /Rows A length def         			% Rows = number of rows
    /Cols A 0 get length def   			% Cols = number of columns
    /Index [ 0 1 Rows 1 sub { } for ] def	% Index = [0 1 2 ... Rows-1]
    /col 0 def
    /row  0 def
    /PR Rows array def 				% PR[c] = pivot row for row row
  { 						% starts the loop, find pivot entry in row r
    col Cols ge row  Rows ge or { exit } if	% col < Cols and row < Rows else exit
    /pRow row def  				% pRow = pivot row		
    /max A row  get col get abs def		% get A[row[col]], first A[0,0] 
    row 1 add 1 Rows 1 sub { 			% starts for loop 1 1 Rows-1
      /j exch def				% index counter
      /x A j get col get abs def		% get A[j[r]]
      x max gt {				% x>max, then save position
        /pRow j def
        /max x def
      } if
    } for					% now we have the row with biggest A[0,1]
						% with pRow = the pivot row
    max 0 gt {					% swap entries pRow and row  in i 
      /tmp Index row  get def
      Index row  Index pRow get put
      Index pRow tmp put			% and columns pRow and row  in A
      /tmp A row get def
      A row  A pRow get put
      A pRow tmp put   				% pivot
      /row0  A row  get def 			% the pivoting row
      /p0 row0  col get def 			% the pivot value
      row 1 add 1 Rows 1 sub { 			% start for loop
        /j exch def
        /c1 A j get def
        /p c1 col get p0 div def
        c1 col p put				% subtract (p1/p0)*row[i] from row[j]
        col 1 add 1 Cols 1 sub {		% start for loop
          /i exch def
          c1 dup i exch 			% c1 i c1
          i get row0 i get p mul sub put
        } for
      } for
      PR row col put
      /col col 1 add def
      /row row 1 add def
    }{						% all zero entries
      /row row 1 add def			% continue loop with same row
    } ifelse
  } loop
  /X A def					% solution vector
  A Rows 1 sub get dup
  Cols 1 sub get exch
  Cols 2 sub get div
  X Rows 1 sub 3 -1 roll put  			% X[n]
  Rows 2 sub -1 0 {				% for loop to calculate X[i]
    /xi exch def				% current index
    A xi get 					% i-th row
    /Axi exch def
    /sum 0 def
    Cols 2 sub -1 xi 1 add { 
      /n exch def
      /sum sum Axi n get X n get mul add def 
    } for
    Axi Cols 1 sub get 				% b=Axi[Cols-1]
    sum sub 					% b-sum
    Axi xi get div				% b-sum / Axi[xi]
    X xi 3 -1 roll put  			% X[xi]
  } for
  X
  end 
} def
%
/c@_0 2.515517 def 
/c@_1 0.802853 def 
/c@_2 0.010328 def 
/d@_1 1.432788 def 
/d@_2 0.189269 def 
/d@_3 0.001308 def 
/norminv {
  5 dict begin
  neg 1 add 1 exch div ln 2 mul sqrt 
  /t exch def 
  /t2 t dup mul def 
  /t3 t2 t mul def 
  c@_0 c@_1 t mul add c@_2 t2 mul add 1 d@_1 t mul add 
  d@_2 t2 mul add d@_3 t3 mul add div neg t add 
  end
} def 
%end{norminv Michael Sharpe}
%
%
% END pst-math.pro

%%EndProcSet
%%BeginProcSet: pstricks-add.pro 0 0
%% $Id: pstricks-add.pro 37 2014-07-22 13:52:12Z herbert $
%%
% PostScript prologue for pstricks-add.tex.
%
% Version 0.23, 2009/12/17 
%
/tx@addDict 410 dict def tx@addDict begin
%%
realtime srand % set random generator
%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
/GTriangle {
  gsave
  /mtrx CM def
  /colorA ED /colorB ED /colorC ED 	% save the colors
  /yA ED /xA ED               		% save the origin
  xA yA translate
  rotate       		        	% \psk@gangle
  /yB ED /xB ED /yC ED /xC ED   	% save other coordinates
  /ds [                % save data in a array
     0 0 0 colorA aload pop     	% fd x y xr xg xb
     0 xB xA sub yB yA sub colorB aload pop
     0 xC xA sub yC yA sub colorC aload pop
%     1 xC xB add yB colorA aload pop  	% for use with 4 points ABCD
  ] def
  newpath
  <<
  /ShadingType 4           % single Gouraud
  /ColorSpace [ /DeviceRGB ]
  /DataSource ds
  >> 
  shfill
  closepath
  mtrx
  setmatrix grestore} def
%
/RGBtoCMYK {    % on stack r g b -> C M Y K
  3 dict begin
  /Blue ED /Green ED /Red ED
  1 Red sub     % Cyan
  1 Green sub   % Magenta
  1 Blue sub    % Yellow
  0   		% Black  
  end
} def
%
/CMYKtoGRAY { % on stack c m y k -> gray
  exch 0.11 mul add
  exch 0.59 mul add
  exch 0.3 mul add
  dup 1 gt { pop 1 }  if 
  neg 1 add 
} def
%
/RGBtoGRAY { % on stack r g b -> gray
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
} def
%
/HSBtoGRAY { 
  6 dict begin
  /b exch def 
  /s exch def 6 mul dup cvi dup 
  /i exch def sub 
  /f exch def
  /F [[0 1 f sub 1][f 0 1][1 0 1 f sub][1 f 0][1 f sub 1 0][0 1 f][0 1 1]] def
  F i get { s mul neg 1 add b mul} forall
  0.11 mul
  exch 0.59 mul add
  exch 0.3 mul add 
  end
} def
%
%% convertisseur longueur d'onde ->R,G,B       Manuel Luque
%% lambda max=780 nanometres
%% lambda min=380 nanometres
%% adaptation de :
%% http://www.physics.sfasu.edu/astro/color.html
%% www.efg2.com/lab
%
/Gamma 0.8 def
/calculateRGB {
  lambda 379 le {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 781 ge {/Red 0 def /Green 0 def /Blue 0 def} if
  lambda 380 ge {lambda 439 le {
    /R {lambda 440 sub neg 440 380 sub div} def
    /Red R factor mul Gamma exp def
    /G 0 def
    /Green G factor mul Gamma exp def
    /B 1 def
    /Blue B factor mul Gamma exp def} if
  } if
  lambda 440 ge { lambda 489 le {
    /G {lambda 440 sub 490 440 sub div} def
    /Green G factor mul Gamma exp def
    /R 0 def /Red 0 def
    /B 1 def
    /Blue B factor mul Gamma exp def } if
  } if
  lambda 490 ge {lambda 509 le {
    /B {lambda 510 sub neg 510 490 sub div} def
    /Blue B factor mul Gamma exp def
    /R 0 def /Red 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 510 ge {lambda 579 le {
    /R {lambda 510 sub 580 510 sub div } def
    /Red R factor mul Gamma exp def
    /Blue 0 def
    /G 1 def
    /Green G factor mul Gamma exp def } if
  } if
  lambda 580 ge {lambda 644 le {
    /G {lambda 645 sub neg 645 580 sub div } def
    /Green G factor mul Gamma exp def
    /Blue 0 def
    /R 1 def
    /Red R factor mul Gamma exp def } if
  } if
  lambda 645 ge { lambda 780 le {
    /Red 1 factor mul Gamma exp def
    /Blue 0 def
    /Green 0 def } if
  } if
} def
%
/factor {
  lambda 380 ge {lambda 419 le { 0.3 0.7 lambda 380 sub mul 420 380 sub div add} if } if
  lambda 420 ge {lambda 700 le { 1 } if } if
  lambda 701 ge {lambda 780 le { 0.3 0.7 780 lambda sub mul 780 700 sub div add} if } if
} def
%
/wavelengthToRGB { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
} def %  now the colors are saved in Red Green Blue
%
/wavelengthToGRAY { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  calculateRGB
  Red Green Blue RGBtoGRAY
} def %  now the gray color is on the stack
%
/wavelengthToCMYK { % the wavelength in nm must be on top of the stack
  cvi /lambda exch def % no floating point here
  gsave
  calculateRGB Red Green Blue RGBtoCMYK 
  /Black ED /Yellow ED /Magenta ED /Cyan ED
  grestore
} def %  now the colors are saved in Cyan Magenta Yellow Black
%
/axfill {
    8 dict begin
    /xw exch def /nl exch def
    /C1 exch def /y1 exch def/x1 exch def
    /C0 exch def /y0 exch def/x0 exch def
    <<  /ShadingType 2
        /ColorSpace /DeviceRGB
        /Coords [ x0 y0 x1 y1 ]
        /EmulatorHints [ xw 2 div dup ]
        /Function <<
            /FunctionType 2
            /Domain [0 1]
            /C0 C0
            /C1 C1
            /N      1
        >>
    >> shfill
    end
} bind def
%
%/amplHand {.8} def 
%/dtHand 2 def
/varHand { rand sin amplHand mul add } def
/MovetoByHand { moveto } def 
%/MovetoByHand { /y0 ED /x0 ED x0 y0 moveto } def 
/LinetoByHand { 4 dict begin
  /y1 ED /x1 ED 
  currentpoint /y0 ED /x0 ED
  x0 x1 sub dup mul y0 y1 sub dup mul add sqrt /dEnd ED
  0 dtHand dEnd { dup
    x1 x0 sub mul dEnd div x0 add varHand exch  
    y1 y0 sub mul dEnd div y0 add varHand lineto
  } for
%  /x0 x1 def /y0 y1 def
  end
} def  
%
end
%
% END pstricks-add.pro

%%EndProcSet
%%BeginProcSet: dejavumono_t1-type1.enc 0 0
% THIS FILE WAS AUTOMATICALLY GENERATED -- DO NOT EDIT

%%AutoEnc_ai7sfw4ev2rw3jfdy46mgxdj6f
% Encoding created by otftotfm on Sun Sep 22 17:45:43 2013
% Command line follows encoding
/AutoEnc_ai7sfw4ev2rw3jfdy46mgxdj6f [
%00
  /grave /acute /circumflex /tilde /dieresis /hungarumlaut /ring /caron
  /breve /macron /dotaccent /cedilla /ogonek /quotesinglbase /guilsinglleft /guilsinglright
%10
  /quotedblleft /quotedblright /quotedblbase /guillemotleft /guillemotright /hyphen /emdash /.notdef
  /.notdef /dotlessi /dotlessj /.notdef /fi /fl /.notdef /.notdef
%20
  /uni2423 /exclam /quotedbl /numbersign /dollar /percent /ampersand /quoteright
  /parenleft /parenright /asterisk /plus /comma /hyphen /period /slash
%30
  /zero /one /two /three /four /five /six /seven
  /eight /nine /colon /semicolon /less /equal /greater /question
%40
  /at /A /B /C /D /E /F /G
  /H /I /J /K /L /M /N /O
%50
  /P /Q /R /S /T /U /V /W
  /X /Y /Z /bracketleft /backslash /bracketright /asciicircum /underscore
%60
  /quoteleft /a /b /c /d /e /f /g
  /h /i /j /k /l /m /n /o
%70
  /p /q /r /s /t /u /v /w
  /x /y /z /braceleft /bar /braceright /asciitilde /hyphen
%80
  /Abreve /Aogonek /Cacute /Ccaron /Dcaron /Ecaron /Eogonek /Gbreve
  /Lacute /Lcaron /Lslash /Nacute /Ncaron /Eng /Ohungarumlaut /Racute
%90
  /Rcaron /Sacute /Scaron /Scedilla /Tcaron /Tcommaaccent /Uhungarumlaut /Uring
  /Ydieresis /Zacute /Zcaron /Zdotaccent /IJ /Idotaccent /dcroat /section
%A0
  /abreve /aogonek /cacute /ccaron /dcaron /ecaron /eogonek /gbreve
  /lacute /lcaron /lslash /nacute /ncaron /eng /ohungarumlaut /racute
%B0
  /rcaron /sacute /scaron /scedilla /tcaron /tcommaaccent /uhungarumlaut /uring
  /ydieresis /zacute /zcaron /zdotaccent /ij /exclamdown /questiondown /sterling
%C0
  /Agrave /Aacute /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla
  /Egrave /Eacute /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis
%D0
  /Eth /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /OE
  /Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn /.notdef
%E0
  /agrave /aacute /acircumflex /atilde /adieresis /aring /ae /ccedilla
  /egrave /eacute /ecircumflex /edieresis /igrave /iacute /icircumflex /idieresis
%F0
  /eth /ntilde /ograve /oacute /ocircumflex /otilde /odieresis /oe
  /oslash /ugrave /uacute /ucircumflex /udieresis /yacute /thorn /germandbls
] def
% Command line: 'otftotfm --no-default-ligkern --encoding=fontools_t1 --pl
% --map-file=DejaVuSansMono.map --no-updmap --no-type1
% --coding-scheme=EXTENDED TEX FONT ENCODING - LATIN
% DejaVuSansMono-BoldOblique.ttf DejaVuSansMono-BoldOblique-tlf-t1'

%%EndProcSet
%%BeginProcSet: lbtn_7grukw.enc 0 0
% THIS FILE WAS AUTOMATICALLY GENERATED -- DO NOT EDIT

%%AutoEnc_7grukw4ftfgbx23ssythacmksg
% Encoding created by otftotfm on Mon Nov 26 14:24:44 2012
% Command line follows encoding
/AutoEnc_7grukw4ftfgbx23ssythacmksg [
%00
  /grave /acute /circumflex /tilde /dieresis /hungarumlaut /ring /caron
  /breve /macron /dotaccent /cedilla /ogonek /quotesinglbase /guilsinglleft /guilsinglright
%10
  /quotedblleft /quotedblright /quotedblbase /guillemotleft /guillemotright /endash /emdash /.notdef
  /perthousandzero /dotlessi /uni0237 /f_i /f_f_i /f_f /f_l /f_f_l
%20
  /.notdef /exclam /quotedbl /numbersign /dollar /percent /ampersand /quoteright
  /parenleft /parenright /asterisk /plus /comma /hyphen /period /slash
%30
  /zero /one /two /three /four /five /six /seven
  /eight /nine /colon /semicolon /less /equal /greater /question
%40
  /at /A /B /C /D /E /F /G
  /H /I /J /K /L /M /N /O
%50
  /P /Q /R /S /T /U /V /W
  /X /Y /Z /bracketleft /backslash /bracketright /asciicircum /underscore
%60
  /quoteleft /a /b /c /d /e /f /g
  /h /i /j /k /l /m /n /o
%70
  /p /q /r /s /t /u /v /w
  /x /y /z /braceleft /bar /braceright /asciitilde /hyphen
%80
  /Abreve /Aogonek /Cacute /Ccaron /Dcaron /Ecaron /Eogonek /Gbreve
  /Lacute /Lcaron /Lslash /Nacute /Ncaron /Eng /Ohungarumlaut /Racute
%90
  /Rcaron /Sacute /Scaron /Scedilla /Tcaron /Tcedilla /Uhungarumlaut /Uring
  /Ydieresis /Zacute /Zcaron /Zdotaccent /IJ /Idotaccent /dcroat /section
%A0
  /abreve /aogonek /cacute /ccaron /dcaron /ecaron /eogonek /gbreve
  /lacute /lcaron /lslash /nacute /ncaron /eng /ohungarumlaut /racute
%B0
  /rcaron /sacute /scaron /scedilla /tcaron /tcedilla /uhungarumlaut /uring
  /ydieresis /zacute /zcaron /zdotaccent /ij /exclamdown /questiondown /sterling
%C0
  /Agrave /Aacute /Acircumflex /Atilde /Adieresis /Aring /AE /Ccedilla
  /Egrave /Eacute /Ecircumflex /Edieresis /Igrave /Iacute /Icircumflex /Idieresis
%D0
  /Eth /Ntilde /Ograve /Oacute /Ocircumflex /Otilde /Odieresis /OE
  /Oslash /Ugrave /Uacute /Ucircumflex /Udieresis /Yacute /Thorn /.notdef
%E0
  /agrave /aacute /acircumflex /atilde /adieresis /aring /ae /ccedilla
  /egrave /eacute /ecircumflex /edieresis /igrave /iacute /icircumflex /idieresis
%F0
  /eth /ntilde /ograve /oacute /ocircumflex /otilde /odieresis /oe
  /oslash /ugrave /uacute /ucircumflex /udieresis /yacute /thorn /germandbls
] def
% Command line: 'otftotfm --automatic --encoding=fontools_t1
% --tfm-directory=texmf/fonts/tfm/public/libertine
% --vf-directory=texmf/fonts/vf/public/libertine
% --pl-directory=texmf/fonts/pl/public/libertine
% --vpl-directory=texmf/fonts/vpl/public/libertine
% --type1-directory=texmf/fonts/type1/public/libertine
% --truetype-directory=texmf/fonts/truetype/public/libertine
% --type42-directory=texmf/fonts/type42/public/libertine
% --encoding-directory=texmf/fonts/enc/dvips/public
% --map-file=texmf/fonts/map/dvips/public/LinuxLibertineT.map --no-updmap
% --coding-scheme=EXTENDED TEX FONT ENCODING - LATIN --feature=kern
% --feature=liga --feature=lnum --feature=tnum LinLibertine530_RI.otf
% LinLibertineTI-tlf-t1'

%%EndProcSet
%%BeginProcSet: texps.pro 0 0
%!
TeXDict begin/rf{findfont dup length 1 add dict begin{1 index/FID ne 2
index/UniqueID ne and{def}{pop pop}ifelse}forall[1 index 0 6 -1 roll
exec 0 exch 5 -1 roll VResolution Resolution div mul neg 0 0]FontType 0
ne{/Metrics exch def dict begin Encoding{exch dup type/integertype ne{
pop pop 1 sub dup 0 le{pop}{[}ifelse}{FontMatrix 0 get div Metrics 0 get
div def}ifelse}forall Metrics/Metrics currentdict end def}{{1 index type
/nametype eq{exit}if exch pop}loop}ifelse[2 index currentdict end
definefont 3 -1 roll makefont/setfont cvx]cvx def}def/ObliqueSlant{dup
sin S cos div neg}B/SlantFont{4 index mul add}def/ExtendFont{3 -1 roll
mul exch}def/ReEncodeFont{CharStrings rcheck{/Encoding false def dup[
exch{dup CharStrings exch known not{pop/.notdef/Encoding true def}if}
forall Encoding{]exch pop}{cleartomark}ifelse}if/Encoding exch def}def
end

%%EndProcSet
%%BeginProcSet: special.pro 0 0
%!
TeXDict begin/SDict 200 dict N SDict begin/@SpecialDefaults{/hs 612 N
/vs 792 N/ho 0 N/vo 0 N/hsc 1 N/vsc 1 N/ang 0 N/CLIP 0 N/rwiSeen false N
/rhiSeen false N/letter{}N/note{}N/a4{}N/legal{}N}B/@scaleunit 100 N
/@hscale{@scaleunit div/hsc X}B/@vscale{@scaleunit div/vsc X}B/@hsize{
/hs X/CLIP 1 N}B/@vsize{/vs X/CLIP 1 N}B/@clip{/CLIP 2 N}B/@hoffset{/ho
X}B/@voffset{/vo X}B/@angle{/ang X}B/@rwi{10 div/rwi X/rwiSeen true N}B
/@rhi{10 div/rhi X/rhiSeen true N}B/@llx{/llx X}B/@lly{/lly X}B/@urx{
/urx X}B/@ury{/ury X}B/magscale true def end/@MacSetUp{userdict/md known
{userdict/md get type/dicttype eq{userdict begin md length 10 add md
maxlength ge{/md md dup length 20 add dict copy def}if end md begin
/letter{}N/note{}N/legal{}N/od{txpose 1 0 mtx defaultmatrix dtransform S
atan/pa X newpath clippath mark{transform{itransform moveto}}{transform{
itransform lineto}}{6 -2 roll transform 6 -2 roll transform 6 -2 roll
transform{itransform 6 2 roll itransform 6 2 roll itransform 6 2 roll
curveto}}{{closepath}}pathforall newpath counttomark array astore/gc xdf
pop ct 39 0 put 10 fz 0 fs 2 F/|______Courier fnt invertflag{PaintBlack}
if}N/txpose{pxs pys scale ppr aload pop por{noflips{pop S neg S TR pop 1
-1 scale}if xflip yflip and{pop S neg S TR 180 rotate 1 -1 scale ppr 3
get ppr 1 get neg sub neg ppr 2 get ppr 0 get neg sub neg TR}if xflip
yflip not and{pop S neg S TR pop 180 rotate ppr 3 get ppr 1 get neg sub
neg 0 TR}if yflip xflip not and{ppr 1 get neg ppr 0 get neg TR}if}{
noflips{TR pop pop 270 rotate 1 -1 scale}if xflip yflip and{TR pop pop
90 rotate 1 -1 scale ppr 3 get ppr 1 get neg sub neg ppr 2 get ppr 0 get
neg sub neg TR}if xflip yflip not and{TR pop pop 90 rotate ppr 3 get ppr
1 get neg sub neg 0 TR}if yflip xflip not and{TR pop pop 270 rotate ppr
2 get ppr 0 get neg sub neg 0 S TR}if}ifelse scaleby96{ppr aload pop 4
-1 roll add 2 div 3 1 roll add 2 div 2 copy TR .96 dup scale neg S neg S
TR}if}N/cp{pop pop showpage pm restore}N end}if}if}N/normalscale{
Resolution 72 div VResolution 72 div neg scale magscale{DVImag dup scale
}if 0 setgray}N/@beginspecial{SDict begin/SpecialSave save N gsave
normalscale currentpoint TR @SpecialDefaults count/ocount X/dcount
countdictstack N}N/@setspecial{CLIP 1 eq{newpath 0 0 moveto hs 0 rlineto
0 vs rlineto hs neg 0 rlineto closepath clip}if ho vo TR hsc vsc scale
ang rotate rwiSeen{rwi urx llx sub div rhiSeen{rhi ury lly sub div}{dup}
ifelse scale llx neg lly neg TR}{rhiSeen{rhi ury lly sub div dup scale
llx neg lly neg TR}if}ifelse CLIP 2 eq{newpath llx lly moveto urx lly
lineto urx ury lineto llx ury lineto closepath clip}if/showpage{}N
/erasepage{}N/setpagedevice{pop}N/copypage{}N newpath}N/@endspecial{
count ocount sub{pop}repeat countdictstack dcount sub{end}repeat
grestore SpecialSave restore end}N/@defspecial{SDict begin}N
/@fedspecial{end}B/li{lineto}B/rl{rlineto}B/rc{rcurveto}B/np{/SaveX
currentpoint/SaveY X N 1 setlinecap newpath}N/st{stroke SaveX SaveY
moveto}N/fil{fill SaveX SaveY moveto}N/ellipse{/endangle X/startangle X
/yrad X/xrad X/savematrix matrix currentmatrix N TR xrad yrad scale 0 0
1 startangle endangle arc savematrix setmatrix}N end

%%EndProcSet
%%BeginProcSet: color.pro 0 0
%!
TeXDict begin/setcmykcolor where{pop}{/setcmykcolor{dup 10 eq{pop
setrgbcolor}{1 sub 4 1 roll 3{3 index add neg dup 0 lt{pop 0}if 3 1 roll
}repeat setrgbcolor pop}ifelse}B}ifelse/TeXcolorcmyk{setcmykcolor}def
/TeXcolorrgb{setrgbcolor}def/TeXcolorgrey{setgray}def/TeXcolorgray{
setgray}def/TeXcolorhsb{sethsbcolor}def/currentcmykcolor where{pop}{
/currentcmykcolor{currentrgbcolor 10}B}ifelse/DC{exch dup userdict exch
known{pop pop}{X}ifelse}B/GreenYellow{0.15 0 0.69 0 setcmykcolor}DC
/Yellow{0 0 1 0 setcmykcolor}DC/Goldenrod{0 0.10 0.84 0 setcmykcolor}DC
/Dandelion{0 0.29 0.84 0 setcmykcolor}DC/Apricot{0 0.32 0.52 0
setcmykcolor}DC/Peach{0 0.50 0.70 0 setcmykcolor}DC/Melon{0 0.46 0.50 0
setcmykcolor}DC/YellowOrange{0 0.42 1 0 setcmykcolor}DC/Orange{0 0.61
0.87 0 setcmykcolor}DC/BurntOrange{0 0.51 1 0 setcmykcolor}DC
/Bittersweet{0 0.75 1 0.24 setcmykcolor}DC/RedOrange{0 0.77 0.87 0
setcmykcolor}DC/Mahogany{0 0.85 0.87 0.35 setcmykcolor}DC/Maroon{0 0.87
0.68 0.32 setcmykcolor}DC/BrickRed{0 0.89 0.94 0.28 setcmykcolor}DC/Red{
0 1 1 0 setcmykcolor}DC/OrangeRed{0 1 0.50 0 setcmykcolor}DC/RubineRed{
0 1 0.13 0 setcmykcolor}DC/WildStrawberry{0 0.96 0.39 0 setcmykcolor}DC
/Salmon{0 0.53 0.38 0 setcmykcolor}DC/CarnationPink{0 0.63 0 0
setcmykcolor}DC/Magenta{0 1 0 0 setcmykcolor}DC/VioletRed{0 0.81 0 0
setcmykcolor}DC/Rhodamine{0 0.82 0 0 setcmykcolor}DC/Mulberry{0.34 0.90
0 0.02 setcmykcolor}DC/RedViolet{0.07 0.90 0 0.34 setcmykcolor}DC
/Fuchsia{0.47 0.91 0 0.08 setcmykcolor}DC/Lavender{0 0.48 0 0
setcmykcolor}DC/Thistle{0.12 0.59 0 0 setcmykcolor}DC/Orchid{0.32 0.64 0
0 setcmykcolor}DC/DarkOrchid{0.40 0.80 0.20 0 setcmykcolor}DC/Purple{
0.45 0.86 0 0 setcmykcolor}DC/Plum{0.50 1 0 0 setcmykcolor}DC/Violet{
0.79 0.88 0 0 setcmykcolor}DC/RoyalPurple{0.75 0.90 0 0 setcmykcolor}DC
/BlueViolet{0.86 0.91 0 0.04 setcmykcolor}DC/Periwinkle{0.57 0.55 0 0
setcmykcolor}DC/CadetBlue{0.62 0.57 0.23 0 setcmykcolor}DC
/CornflowerBlue{0.65 0.13 0 0 setcmykcolor}DC/MidnightBlue{0.98 0.13 0
0.43 setcmykcolor}DC/NavyBlue{0.94 0.54 0 0 setcmykcolor}DC/RoyalBlue{1
0.50 0 0 setcmykcolor}DC/Blue{1 1 0 0 setcmykcolor}DC/Cerulean{0.94 0.11
0 0 setcmykcolor}DC/Cyan{1 0 0 0 setcmykcolor}DC/ProcessBlue{0.96 0 0 0
setcmykcolor}DC/SkyBlue{0.62 0 0.12 0 setcmykcolor}DC/Turquoise{0.85 0
0.20 0 setcmykcolor}DC/TealBlue{0.86 0 0.34 0.02 setcmykcolor}DC
/Aquamarine{0.82 0 0.30 0 setcmykcolor}DC/BlueGreen{0.85 0 0.33 0
setcmykcolor}DC/Emerald{1 0 0.50 0 setcmykcolor}DC/JungleGreen{0.99 0
0.52 0 setcmykcolor}DC/SeaGreen{0.69 0 0.50 0 setcmykcolor}DC/Green{1 0
1 0 setcmykcolor}DC/ForestGreen{0.91 0 0.88 0.12 setcmykcolor}DC
/PineGreen{0.92 0 0.59 0.25 setcmykcolor}DC/LimeGreen{0.50 0 1 0
setcmykcolor}DC/YellowGreen{0.44 0 0.74 0 setcmykcolor}DC/SpringGreen{
0.26 0 0.76 0 setcmykcolor}DC/OliveGreen{0.64 0 0.95 0.40 setcmykcolor}
DC/RawSienna{0 0.72 1 0.45 setcmykcolor}DC/Sepia{0 0.83 1 0.70
setcmykcolor}DC/Brown{0 0.81 1 0.60 setcmykcolor}DC/Tan{0.14 0.42 0.56 0
setcmykcolor}DC/Gray{0 0 0 0.50 setcmykcolor}DC/Black{0 0 0 1
setcmykcolor}DC/White{0 0 0 0 setcmykcolor}DC end

%%EndProcSet
%%BeginFont: LinLibertineTI
%!PS-AdobeFont-1.0: LinLibertineTI 5.1.6
9 dict begin
/FontName /LinLibertineTI def
/FontInfo 9 dict dup begin
/version (5.1.6) readonly def
/Notice (Linux Libertine by Philipp H. Poll,
Open Font under Terms of following Free Software Licenses:
GPL \(General Public License\) with font-exception and OFL \(Open Font License\).
Created with FontForge \(http://fontforge.sf.net\)
Sept 2003, 2004, 2005, 2006, 2007, 2008, 2009, 2010, 2011,2012) readonly def
/FullName (Linux Libertine T Italic) readonly def
/FamilyName (Linux Libertine T) readonly def
/Weight (Book) readonly def
/isFixedPitch false def
/ItalicAngle -12 def
/UnderlinePosition -98 def
/UnderlineThickness 40 def
end readonly def
/Encoding StandardEncoding def
/PaintType 0 def
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0] readonly def
/StrokeWidth 0 def
/FontBBox {-634 -312 6171 893} readonly def
currentdict end
currentfile eexec
D9D66F633B846A989B9974B0179FC6CC4458B82105453377C5BCC86A8871E969
2A5883625ED627224A0AF3682D900B429EF419A526767AFA4B7CDCBA9944E362
4B9085210A29AFE2630A37A9793520AC21119E3F50BC0AF96871E5A8911FB777
68FE40F007C5F6EA075630602DB28D02B22C15F751BC16CF1D47C03C6860460A
BFF1F187F1DF8035A7204090974B9358A50802BCEDC4DE3DECBF30589EC7A57E
A46C81030134C34720ABBE3853A90710E8029CC37AA1E5581ECD6ECC982F6793
AE4E6CB73B1300D5BFEB7BE622681A268080310E288B6BB3902FEF817A055D4E
168D6BC5FE7AA88FE69D1EB23172CFFF4C684E29EBC36C43AD3A3454DC128798
A539AE0F3C7A123D6119EAEC7A8CA0B081B750DD06375DF43D3A498773B7DDF3
20F572DD19A6FC5654A41AB701B7F310C643070A3F0CBCB56D3514B6E6CAA0D8
1E6889B1B3AFE479FBFC2BEFC65E92CC85A45C3D6F079ED06B5BC960DCEFBCB0
0DBCCADF3D6C66DC2282A46268B6D29E2770B8028E69CE699EC81C170E5A656F
85C281BAA67ED9C0F5AF5451C76CFB76B65211FC8015D0CB050A0AB7DC6A5FFE
F5543BDF443A1B236683004AFA91F66909F211381319F2D3C7AAE154952088A1
482CB35BE7D7C77D328666F776E120F8DB7777651002FF048CAABBD695C0ECA7
05B5FAAE9797F1ABBD188D284299C10A6653738263E1742DC3B927B0DB2F0853
5C3E4C383587086CF8EFE52893707C0A44881F7965A3921156198508892A35E0
B6CADE83BD6ED44A31107D919AEE03C0B2DBA3CAA9D268D0DADC0491D3567F7D
2E1D9974BB845DD0A0FD8DF7F007D742E262A1F97F814D7EF76519B0A51E62C8
393BD870DDD80589D569EB3B9FB83C63A66FBB89AE22266137EFD4CB20D287E2
F4A2C69D13196564A88B0BB1EF0774C8030A1B4B41A17C0C12A4AD978E70C70D
4D177B098AF9E7CEAA7B09566F0A6E75C5B2203D7F0913EF7B428B1361A37745
02BD2CF7ACFCE13A8B5925F2A65853BA8CD693DA796A4260E55EDDBDFD345136
4F78C574972637488002E3106030F62ECC7702548C37B7C6A85229023DB40B5D
38C342B480A7C8677D67A8722112BFFAF7CF1B1EE6EF45F817D43D0E875C06E5
4A32178B7A3CBC14FBC92D794F7AA32EA445E702BF763D634A142EFB8F890D30
1E8CE75D233062EC9D79C1AA2C5FE8B7E66F63F91B4ACF66DF02390454EEA4F7
449627B6731ED9CFD381F388C987E7E2A391C48CA876ADB0EAD0382B7EF0D6F1
90ECEE218F54475CAD8EF824CFCFE8869499184CC1C99241EF422AA34CB729AC
9CD10539F4B887A5489F1F5F6F4440A4E6DEB56FE031D5D3A6D69CF2546285F0
CCD68FED95EDD2F43C9F64542D990CF1968B6384A432297C8037C0B7CCB59EB0
40E74FEF43352784AA22FD6A58590CEEF2A6945A4813CF787CC08B83BA990FCA
F4CD1B0C9E4B16B028F1ED33339031189D04EDBF75EFE175E1ECEF145C452B44
95C129EB787CE6FBF1285E3778E688D21DE377096C5BEFFEF5722743E02D6F11
4F19F2EDB34E3943A0130C5710BDEAB05E85F1B0BBB6B84E49576051D5EDF717
0A1EE0B64B745D12F8004B35DAB59844AE56CC0D514F2C751A09AFFBA7E4E024
D6A35144FF0CC1B182631356A6A5157265CA385657F592A9B4A542E951D66124
FC791633A92B882DCA53690EAE705C8E3659632A4D00BD0472097FB42B0CC730
D3539C25ECDEB0FCF259C3C026D76687F096AFB703C77A54B4670E0E2BEE5352
B536F63D5FCDE2B95823B06E84618C01ABF2AF00721CCD364F5607654C188E8D
194420E3F5697D0294C23AF82659949BD19C5627E4FBFE7A839EE93D88CEE92E
F4019F6DBC774EE68320484D309902892E7A30B005108EC43879109C6447810E
DF2DAB34DF71D6798256E434DEE2AF99CF51DC357F7AA75FD666C62CF195403B
60294A72A065980D3F9E01A3F1FE91CD91A979349148892407E3B7CD6277AA97
731F2A1B54FA7F2D91BCA4751BC48CAA934AE3149F9435A44F868F605F0510A5
7FD3017739748B78B395C083A1FA718A773474534B2693531905AA938039836B
F985B795AF427E745930C6695CD14A0C056810C7028817632C2AAF6C752BCAF3
4E419D77ACAF26BC3F2919DEA27AB0209E9CC5C833B985435083351730E7B41C
F52E26103C40BBA3DD01B7C3B917E96596B6520E11FC69BC36EFBD8536F27A80
8BD4849962B1D148F827C8B6C296C03567D4B8D5BE407D8B47DC5D9697744A6A
F134BCF88F4E9244457E957B3152DBC7F8863C0663A13C4EF2B5DA1FFC7B2BD1
152B0590BABD1524451FA0509F4FDD32BFD71E5EB79C36F72F25D10AEA12342D
4568F119A87945984748E2E010146CABEDF66E00D14DAD00249A1D30467B3467
D76D200EC522B993400FDF37672F4A816F9D030A574473BAAF92F35D0D41E5C7
56BF560045E638CCD5F645294A80AC3CCDDF7098FEE8F2884ECDC1AE1736D877
930D23B984E323EC91113826FA261CEFF00B224537541D7BF141137276646A3B
35B876D98E1E37DD77712D774D8660B48B27EF3BC757A82A66C76933C123AB9F
4E08D5FAE581EDD3E8FB0EF2983A1B32820D1FE8D5D13EC7D0ECEAED2950E0F8
2B503A7F72E563A9F11F95BB61D6C13EDA3DBE3F13375BB3E6A95CF2A0BF892F
EF6F6BDB0F92FB844E19CB8EB3495949CD4387EE3A8946D145E41F62924BCB6A
551A1EB5F5261BD6E7F020BD8F85975745BFE725CE779644090A3CD401666E53
2CF5875B77CCA4F61CD7041F4E47D50E02460BBA3B8A292586D366ECDDF699C5
E012D00CC1476FB1ABDD342CCEB62474A876842093A5CD2243D500A59A66D4D7
9D50B8157C429E5817B7E100C14EFF88E8547C4CB37B009D867F3E7F11B2441E
54477202CD1C4ECD77E8BE0681F2A6175621A8F6BEB4B778E8986E2493463B3E
C364BB74982931DABD32A87570DB7468A77CE8DC0268E0DCC152A923B7CD8F50
CA6F6AFD16A71481AD861AF6D29DA4C8E95A3F7F5066D533FD6E200DEEF82465
89168CBC6F6B36AA9D34A295C5AFB70475F98A113A830FF6E2EF51D7C2888A4B
8F413FCDCE7167D50BAB5BB2516FB4FCBABCB660F3D2D3E5BD0D391B02FEC96E
2A3C897F813A6318A2581C4F68E79EDE9138FF6BF414C6A3AE58432F608F4CC1
ABA7272DEC803BE444E019DEFCEAD41998DD1F2DB8B7078488F4F3EA9C84AEFA
ADBC862EB6A9DA323EECDEC5960E133DC838DF05CB23873B2FF2AB0B8B7F463D
DA77F15D6F840C44FFC1C424655C6B93D60AD082CF4DAFA9074E1D09766CD279
C1FAAEF8CFA265E5F137879893B8F97191A2440E84D3608A98857F384E215C4D
CA31C252A5A3BA4652601EB6C420D3B2309684DBA7D0A082EC7FAB11CDE4A10E
E536FC72BEC6BFDFE136E92A2A393A12B1A9A61906D8D9812E0261A7C2BC7E66
AB6AB5B649791356886E3592F03466E072B5034A8F0BF4F3AE0608D93127E879
77D11A3DE314E172DDACE35AD0DDEA99EC2AA101295FD8EFA3D67B4012560B8B
53E1063C3D398CF1751ED89DAC0FA9D09D64EDCAADFCCB92D45C1ECD0E671C30
ABFAF6B5AED7E4362CED5B602E9A9A4B61A31824DF5E24D6046289773A8FFFE0
9056D9554B42B9604908B6080C7303883508BE0262A8D010D8FB4176807E0658
CDA513141F8D2693CA304B79CE3AB68C90DC1D702891442B9C7F4A1A16F8666B
97BF84B63B09F2ACE0AE0CEBDF372FBF6EC6D3B28581D0309361168AAA738FEE
A3EDB1AE0E4F67054169C473B220D8B3B41523B047C2FBC16C55FCD50773C1DE
ABCC4EC8C566493A0E9FB234C98F2347217BA4CA038420C5D9109AFD65F61A29
D3584A465FCA425DEC33E1313ABD0567BA733A487F88988F76FD9D03E888EC8E
A31B9EC8A91B0E7DD722A68D6A21A1B5BB7407B1F57F36987A4F1F57306CAC95
E26F9012E31C711BAA899446E3DC69BE78E71B389451DA41E05A78C46555AB1A
9C6C78959C0B4634EDD6E77B40FE5270A90FBC302CD473B639120B9A2982CD64
8F1629A151CA0652656092166E76785EFBF7A8FDCFEC32D6EF933AFD7C9D411A
7E0E9E57D89BB75ACAE30BE9A84BB1582DAA72CBEBC80E8367A115F3D7E72AB4
3AB5D2E65950FE6F6253EB34289CB6F253CF8950C0F6470AACD9A990962D850E
7F7883214FC778675F99850E4B51C4AE78009E863B37C22C26B23C56DDC8886B
782523CE1685AA79824DD39ECFD77C3A4B63E238F940F1D43E273D48246275A6
D7494F6226CB03CFB74D2A108B09FE99AD54219E12DFCC368B8114FD5A662D07
1F4A212666DAA87B08140D064A235A780A3D972AE4EB612EA98A7C506200AE75
F553C949453738C84B1FD8DBB05105C656CBF3BCFF14E889BCA722C557760046
F1D15FFF0104B2820D489BA69F8FEF7456843E8A71ED3B3C8695550057178353
FE8F13AD2F41EC22336C987A516E6ED927DC4D24A33841E451308CFB4A73B61F
805A106C0818D1A7C1AA189557C85A22BE2AFF0A6405ED0A9F33BD3FBF36C60B
1377DD1D41D384E7724D78CC79759ED8A9D2BCDCE2B1A29176E01508BED511D9
3C7274311EF537E41788C0739F54B912CEA40D6474FA1AB7113EF0FBFAC88DA3
D392D5A41D6A9B16D56783EB04F51BDF19877F96FDA3DB573D1853AE1340C8BB
E91B72E5C515D5D9AD3F6736F00ED340EEB98F75FAA5129AAC7A50381C6FFC87
C9E0671E321044684737D10DABE64AF966ADF3DB9068A8282898D54FF9FD13C6
7C39FE74CCC8D39F9B2E114315BECAE79C934DC8E078E856B6D90E1F3C9A0A2F
6390AFE75F01F2E8ECA96AA67F5D2CD20646F032D625C0E2FF3DA8536E24DFF0
E8DEA30C3CC9C61F202B530BBCB7071150AB2721B4E3B0454987F51704022725
9655426716AD2D55CD3E28CECFBE31026031DBFB3EDD740F507F523F2633C053
FFDA1A4C0157AC2848504FB17A835981407E077817CCA8D840ADC8263C63DC5D
584AEAEA5AD475794B352689FD9C8CA37D7879DE471CE20B629A4B54AE8AE485
F697897359D7B8256578649570D80043A6859E829F7A1AE1E03CA0839C8ACE04
AF57E1FC42BD6751B87B4532BD9E0B7BD0BE8754CC8474FE1E1A8D7BA92EB24E
965AB095ADD787193CD445E36AB7C61EC1E5803DC3C4E1ED7CAAF498AF397B20
5B6E2E3E1C5A4FCB92DFAC55ED9FC726385AA255B5F9D8456695C61FAE318E86
979927A2966F244D791197246328C3249666D511277A3F32D62C0C36329FD117
807193FADE37BCBCF9D97AA0A9152209ABEB550A53F00C93A9B10AB606174253
B804139F3AA88BE060CA31E42BFCFC5E2F04CBF7C107B9C4D3F45BF0967A3E5C
5A4CD94FFF42F575A5C3816BA7970714482F63B3E3DC24209EE5DF9C00A65D8B
755C5E9B1DEEE93D3FC5C474BD62FE3A07F94459CE8E251FF38A6929BBEEDA32
AEAF90039BC84573570C79F0FEA1FDA76E824018FD9A6A4D0EE9BEBA3CE2DD4A
649AAECFAC45B78982EDE6AEE4FC540B70AE2A0471292C4AB04AEB5FAC33FA51
03F428916583B271FB53EDE72A0849AC9ACA5AD1BF65D0EE9C78EACB517EDDB3
4BBDCA2E3BCD7C9FC01631536708FA4EB66F9A75316ADA58A63E2D65E09A9546
EC966D183860841C09FB68C0E63A48004F1065AEFC2E519DFFDF323C68478ED4
323868EA1558D0A9B27B8360FDDFB8A8FF7DEBB454C2D4566ED68110F929C8E0
2BFA5F49E1C23F0B6C1738FAF4A7937DF13C8FA19EA8762E7FDB66AE3506BC70
585DE4FEE232C5D1E95B75A9E983F5DEE85982CED614B31BD96F88D8CB905E8F
83015AA97211860F9E2C89D55E326C5379D365A02EC8A39978E68ECEC8A17EBC
671A239431C7AB848F2660EB8F5EA2A8D2A9B0BE0E50E9BD8E6E7069F9F26752
2C42B99474D36CC8C2B2DB792804EF83D65B24DE2FB3B3868274A42CB2414D31
65F0DBCD99ECE0ECE4B22732A35ABEAAD29BC114FABB7A8747878AD715A7CEA0
493924E17EF74E0B7B1571A6450BEEA9EE2C67CC2DF8F6E2AF78D4C8B2AD68E0
A49416F99B5C7FC2E606D5BB7B48D4BE831EFA2CA4415E72E7EC2736C93B7095
FCB657AC6505BF549E22B029DB69C519FA6A04D7007B0CA57A45E0A5232D09BF
27BAD6D828B7BB1A82F66828FF6437DAD3416FF6DD5A47E786905B36D014DC74
7780FD3E4FCF4B36188A04158CEE9A10E205C53EF2ACC3764137123E9E22D1F0
A6ED9C13840DEFF1CC38815C0505A7577EFEF2B8A11270CA699B925845E05124
10812F1099A3D60BBD93144414DFB70F54A9C1278E3FBCF4643FFC81BA4594EA
E1F422BE7684D2BE028DFD314005B5D23D85ECF12D26D5F49A68F6E14583FEE0
06BBD1F130FE2F41AD91C6F39033189AD9B5E9F55BEEBD8910D23DA6A2F13F50
9170179EDA9519D22DF375A0958E22FB84116FDA21A7277F8709F35ED4CA7F30
A69CA41E87704F033F93BE2F1300133C0AB3B62F56B6F0384E2FA775BB713DCC
7BF0985A83C2A67B9B7ACF7B36F611AEEAC0E2A7DA81A6F1D94CF54C44F1948A
CA554D04B6178F097C5409EEDFCECD2D47E36414787622AF63D3D6A7D1222780
973C668CF3C00C731E037F47B9A6D09282D09A39A8938E0977DA8188DF7D8E30
94C4D414153976C6C127A57B14F4748ADAC0A972D5B7246E1CDAC7F507A33DA1
4F9C63EE697911DF3DE499EC5421A183A8413FCAD3878D5527A8A9E25DFDFAFB
04594D5F2C802D18BBD587BCA5900C385664C1599C79DA1CCC1305E9D9DE7CF0
D12B8BC0E199F6531FCC2A9EEFA042E48FB969EFE10D11EF305A8465B4581D00
8E74BFB9C5F799D684BEE5F2C4688FD8CFAB30C1E17237B8D72C960315B16E8E
26434217AB8EF8BCDB8C2F7706DBB0186A6CB635330CDF1CC0433BEDDD7C7D7A
5C744FE748C93FA63C009B32D4E532BA176D271788738D21D6FD8DA36148F733
5B28849C632B37208A06F0B5025594367389246E71CC07379DB5684FE5030942
3615F8E26C28C29A9A571DAF8B4BF622CD4F50CBB134AF18AFC4CDBE2AD8BB94
446086FE93D6960362AFA908FCC2037CF7911EA78C4CE6A48FCC2E18C95CF27D
C1EA30BBBCDC325315865D1073E6B7C8EF07F5A3E47BBE8EC312768DDD750D62
4F71B13D4FFA05D3D8CAA7EA0717F584F5A361D284CC48F56C20D4B77CF77AD1
5AACB90B2C6E01D43CE307AE5A8D534203F339909B8721806807C4B280EB85F4
67B09C837C252C1E7486E04A86D2A9F714E12ADEC865F14E14DB2DE27C8BD356
00775FF26CC271E12C6719EE4E00576DA30BB94BF0DFD10BDC484CE123E6C888
0CB5BD7AD7C8F6C422BEC958588A7D406CCBAEC4238AA0D5D9A2ECE770360A69
D958A16D141D240A959F59D58589C4A0A0D686D244B14D4689F7CCC9C4270280
D8C45D72F102616EBAEA0C8445E6C0FF9CA58062DEAF622A3E24E43AC32915E2
DD45B63858D38A7F62A3C9E6E90584A16F424CE18375EB248C7E8DF9ACCF1AA5
B6BD55A0F850BA7FBB0E80A8600920D018804D712E93B820ECF4658380D3F464
753D6434A2A9985E8DB1F08A0243100B39A4A9CF565FF9B216151ACF02B0890C
D212138F8D0049FDE1F9A87D1D275972F33932D153F7FBFE92A4F2807BE51C6C
D09D71994EE172309C15E58406E9F016C9CD7700D2371B4DF7F2D24A25623FB0
919A561A8A0FB206B6AFBB97EB505BEB707D168C974B4997CD1925601F4B9A0F
510060E9C3D90C83B298522C38B3A0770AA0ADA9158A2774F9BDD6C2CDF16E6E
31E18066BC3EF96FA6E4452CCEE6FF4916014F0A17F332C36C21FEDF792ED6B4
804CD113FD6C74FBB8BA56078C6F7CD4635845C8DECFA73B07BBE7B7A79CAA43
DEC233C129870AC44F2C8ED7D7FF8037806B935AA94268340A8631111A169EA1
888B93662706D6431C19F3C78187C1C64D400734755341D8D7D040FBB658F270
114296A87278237348F964A1944EC33CE43D1E08D2EE0112C34508EC5498D7DF
703F7AD5B436083522613DF3ECAD277615BE401FE8D8D4B0121A217C26975691
A89719BDC728E96C50C8D2DBB80546153ADAB61516F4A5907C4EA367B409702A
D40C74BDC897916A2FDBCDE2ED328702E4955B100ADD78ED7D3314FB2C2258CA
C739D067BCCC254D85CC4BB8D789833DE56925B7D1DEADD401115DA9ADF226AF
215EFE5A96AA4ACE1893153084B4E1EB773896E11EACD8A3E45F894327C05C16
6AF1624716BE8CBF4FDAF0DAA6B6ABD86471DF4BC6353247204EE3DA8CC45A75
CDB6B3F043AF218EF183713E5E98B697733DD05E3CD8A2CB8BE1F561F3884264
32D0753AF852D5D348F7CB927A6D8E5C341707C76BF8B20547A2A13C2CDE993B
D903E1295A08C3CD64BDABAB4E62BEEDCBDA9039FFCB4C25F016DE1959072244
6E260020E4FC0A85BA18562CDB826415728A808C76ADE5B721AEC98100901536
64B792CCC7ECF09D4D3A2D94886412F9DBFB2933F5966B717966235A6386A8D7
CC2C6506E2815C787C37A4443C849CA87D5D36BD17F1880655C0CDB8C20DC68B
D3C456F77C85E4186D7E9611618500C62B7E046A2CC3B1FA857840E2897085CE
787BBD91239B9EE730512BBF5F6515B13D1C5903B6F5A0B75C53A9D4F3076486
66B721001414B41F2A348844F7348062B3F8D42DE672487EEAB7641CB0BD529C
FA779D661A01F891E2EC776B12C7F19985F94EA8B1EE5047D5A37CC3067535D6
CF74E956123D5EEDBE11EBC83F12B6F65B86310620BBABAB38C14A39C071A11C
776391B8FA4438E92AEEF0BF2196E15D7C3D781959DAB1F20D320C673ABD0842
45DCC0C4CB6BA8A2CC08811B9FB590D93EFC06062BEDBCFE82D329D007D9A421
23315AC1FFB371BC9B99A791659511814B81C3BF0A43E9D0EF916A1AF38F68C8
C278FE0D0B59F3857BFBB4FF285A2F0D2698CFD452FB3915AB87E8E4C9CCB699
C756D04F7CB64AD68EAC432165EF694C363C0F5FD54FF1ED7C65C993EE5506E7
04FE9656FA08283F4864FC090B7F807A9AC2FA24EE9944678A9B463ED1C48603
10529201BF67D8277BDD2E819B908DA88113F2A9135365ACD7E6E3A363D415EA
0F8A7195870F17B34E09C2817AC4B9E5460BD645C61BF45C869DD22E04A426C0
212301588726973BDA75735D82D192D052BFA0F99922FB399A4E9778C635EA3C
1D5B0DACC1788B9E62CC545142F1A5F1D19AEAAFD6B038DB0E2BFEEEC897D3E3
6AE4CC043B40BAF1F0A9FCF1F6B4ADBBA2ED9F9BFE701E68DA4F3985C9F5E6C5
B60E19A4BDC42A295090385E1B572BC3B1497AE6DDD8079DF50A4798711C73F9
807E8F0384246D8C9C333266365AF04BE29A49E5F081BBAFD83E00F989A89B4E
016AD1F2FC7EA5E91265FFA6A5647460CEF46F712B08E5376BA95CDD17E51BDA
E0046E5E169F3F92B4E204EDED7FB37563A52C3DCAC0C2947F6B37E7A0C5BD7E
6F53C083829EB642A8BF68AD696898D7300648C6C0C08665408D698E4EBE60BA
9FE5EB4EA5E71F6FCE115081639B94521E0145ED235B2B82D22F69744F5D2C7A
C32D55B8458C47B1978D5C25F385439ECA3277101CAF0CBA6398FD1EE0F27193
EF84454EEB264E613993E1FA0B928C43FBFFB695A51278D43CE78BF6FB9C5742
74147E1B345A8127D797EF5DD2585C287B7FE45D2897376706658418710D30EB
87BA3AE32668269D67C2AAF2117455A53B9044ECA187C640E10C8D9673FE225C
E62F713F8D68C97FC7ED2E2457B65CCA49EF049C1DFE2F22BCE8B8A67D3E65BF
EACE2BD3CB1EC9398900960AA875C546392D9310AC486AD94A9B7A7F52C1EF19
E4AF3D1CE72564256AA1475909CF1D19DD8936808F715FCBAD49877F9AB85AF5
96863F93A144170E89A0BEA1A7ACF7C3A7904B25E8E11812319E894B54BB8284
0831A6C7BAC92416E972393DC26717069B8AE624EB81179E351A119922D9ABC1
7CC0E1226B773DB1B8F8CB66CC76A0B5A7B92E13683D98235118938FCE5B84D0
EA95D933D6E1B874BA6AB0F43F3B2746F1B4A2A76066326C66CE46D16111EBB1
C467CDE5B7D1E2FFB85160322A1F8B3308FD915F3C501BAA1CF372B735FF513E
09294CB02100C7649003F84951D9268F40938D39493945CE36DDDD5D327FBC00
0B60C38786CCCA311947F0D4874B2FFE2EEBF18891E84BEEFFBDF432F8A65591
8C737927D3A30E28AF6A1251535DDB72CAED72650F89E7E0B1538C5D066061DE
1019C2B017E9E2E6F1C3215B36325A72151B5CB7942B73ADB19CE8AA275D157C
368894E437F5C947248D320852F366528CB99888DFD7723AB6ACCD87432F3E92
59A92F3B30D04DCF0E92CA260323E586439FAB51DD48344E9DD19EC876CF6179
4894449A6A3F4B8CE14AB04AB9A9259C8E1654D1C2DA5E6D5FF70F0BF5889EF0
D93DDBD95A870E31771582834274CCA6D5DB2E3F5A352C7B8E2F1A25D3315F9D
907DD096E59684AF0DA1CB099A659D742770042B68700C7ADB6D6268C6C6CD05
1D729A6CD86D12D8111320E96D58AF6C77D020457E53FD64E457B500056132D2
E5D54A3C67E34280C08495EF31901647028F04B48C13A4745D552CDC9E1135C4
5FAC7CE18B2760904A036D73CCDF2089B02F40DEE7EC1084B57CE522758413CB
E1AB7A61EA6FA70A99004BB70245458C747A1A9DF623B8B83AA32D2E5C802316
C1B9E84CB7B60209520914622B0B07E10BEE185978E759D5E2C94E6710C59DC4
CBA126D53B1F5C84838452A6F18C80A89FA82F34980F5C2FCCAB754A76F6C51A
95E3C066A0BD26F17BF58E565C9C14D0BDE9CCFCE1A3065C314C27FF32A5D03C
15F2D636B626D286F95D97C51628150EE28B999CC0113FA5FB4BFA16A33873DA
AFD329D125D77501D616F8F86FD5E647C80B0329CE43065942B387C90993932C
9E0DC8D3BB5F2C5118CF6526BFB304EE0B1474CAFB385A5DA56EF8A06F9C98D3
80F11A63AEF920538F71E2A3D4ECB09C25F5E50D42E30CE7B7D7FA8E2371457A
43FE9C2919E4A91F99EE65914EA70B738B00599504CD2423FCB1B1B073BAB1FD
F50B08E08E3030C5772F5A2DEE0AD0A6D1415BDCE7BC1EE0E3D0F64E1EB722E0
A362E54C25CEE4C3952CDC244B4824D0D1E1C6CFADF0D7B9B45AE74F9604A361
FD3F87791958F60444405DB6A525B08D893C515EB4AAD912C75326188E2D350E
2A4DFBC2DA15137838EC60A2413277031AFFA4D9986AE611A9A2B777CF374EC9
E1D0FB8C48524027C2C470C9706434B122FFBF89CD69E8157A86D7A280DEF90F
C98CF7CDBC443633EF66B9AD07F93B07325DFF67AA47505883E5A7C028F9D51E
DEB31494A1DB6C3DE28FA466A5DB2C47C7A6B6CB3E673B6F8091FB9D94210F34
C1056BF638CD27747B929FCE694F4A664B52D543699833D2B13F3CC04D961320
F53F6C106FE778485572265D9CA9841623291DEC6D1B1ACC3497DC7BEF543692
32C06001ABD2C65921BC37A7966283D7BEAE56566296B000709F3833374D2FEF
B5473A070E08ED1AD4B59F7AC7CCB3D34FDE93E95E824821FE060E59E1F2FD1A
A34A79CEC11CA7D422CB58C8E21B9F4E1877C5D8515C405F275EF5835B84831C
DC44B7477B447BEE44FE2FF591A28B7AA82AFA53D98B9CA7ED65267139B77AA4
8804A197F27FC4CDD600A8B30CC8AD97D850987F295CA75750165C4DA08A49FB
435D439A6E30146F44BA7523E0B02EEA6B96662A1DB6AF96AAF53CE42E16DB66
BE6275511D59778CA1909A497152DE09FB02920466AE4EC3F519EEF6D1716F7C
B2310E08D89631697C295A22390FCA60FC701F111B48BE868E593ED893E679B3
94FFCBC3866DAF29AFB918ED8FE47049FD1771E44D12EF03328077EE48063D92
EFF51EFE6AD62CE7EC7BF999E52A6F3D5DE9F1E091924807BA88A8591242DFC2
AFEA75FEDD29EA16466250AF19516CD054991BF91F550C7C583BE34AA67E90FD
EC0426EE926FB26CE338CFE5F50CF1E309BDDF20993AFD7D2AF3ACC9A51E37BA
EDFC55180A3B7278E957BAB8C4EAEC25491613851166F4DF9137EEF043C756A2
3824EE64FB0CF9D3B7CAEB7F354C21EE91693DF66EB9746E2E2AE7C410938C5B
C5DCA1C558C108E1DAA30785F8BE8E3840473DFBA1F752D2C85395772760C2CC
267C2BD4636CE3F445BFFEB1A3126F867E0B7A0962E50FB2707520FB0C36D463
2C11B7F202B938596F35D79BB70855669D98B31DD25B1C9751F4A7914D46A335
778FC9BB9D8225ED78449D9A91164223C03AEF5A18D4380E4BBC018CC84686DB
8FEB384CF7FC60D37A84A6025391BD58DCD9CB011ED7D3851B3DA54CC7AC76CA
2B1CCD46451C7E4B6B4F66F41591617982D3EA2E0349FB45EF6BFA0E83CCBA40
FB4E4E92CC4FD0A896D7D0636C61A841F958FBA2578E432EFDD81D819FAA8BA4
6CB99046C0091664403524A1C6FE77C016E192BFC1C379253E7B4F582D9BD75E
81CCE8B6CF45ACD94E89814A7789FD9C2FD58F9742151D96E42B31EC11A55E4A
435B9961702A286649FC205280EF22E6BC9E50D69CC51CEA1FF6CFE4411B6286
83DEC945EC1954179CB93DAB3985F4A713A7107F22DAA8606EAE246F01BC415C
188C0401435583581EF95CDA416DD0F3DB2525284851E2269FFC8C139C2D416A
6506E4C5A6E2DA33E7997433C8BC45B735E3044B90374E23A6D022E4E7323FD3
D3A1341D47248CC76B930E62BE9F208542AB1F562B205191673BE8DC07ABB05A
AFC5EA3D178A0AC3CCD5EBA5C714768BFB7A8E3536B6F4B2020BD7B74DB62ACE
566281F52D7E87E618E5E99FBC80AA5CD320FBC0C47DEC055DC07BFF9E7242C8
4FA04B41673670E0D46432E4A39CB76B73BB67E199B0F94EFD8B8510BFC3E7B8
C6FFAF960513C1E07D762F306D1B4BA7FD5A42D0336AD572AF86488817BF82D9
08BF63F64AC7A3698786474A77D2CF18C7DEF475BD7A8F71F2B6434473B77A17
592EF326227FAD7866A69D33B0124ED98ED66AEFA6A949A75A13F2FB3B9F9825
FDA489C63C45C0CC72DAC031DDC0797BF28256EEF2C789195D75660523D159D6
98658694CB3343505CE3D74EBCEFCF13B53758A3BE19B922D16A67574855F0B1
DA4620C8AA2E58E6E86824F23F6A0132F37D978479FE0DFE0DAF702F2FB73C61
50A5A59965A81CDE8EF21D2EA1E6F34EE888905F5D1D362244305DA0D13042DB
FDC1F473504CE5E68A6B433FE0BDA33FCCCC4F32263152B56AE00C85BEC3247B
8CDF4870703EB76CC6A0884C2C17A7CD431BB67D00E76E093BAA6332F7CE1D26
346B09FC698118A12D8317B89F57282CFDDD48F594F57EF65B4106587613E9E4
62B8073894F456606D5F6CB21ADCA3D5069A272613C152B0DA59DFC7ECB988B7
EA38B0902B7AA7C4696F05F27560B7410A3A59216060DB63D12BADC5E4FB941D
2BD6B32B6A3727A8AE10C289EAD2F6F766A702CEE85EA1B4A3D2189984D0F125
D4941EA7078E7984BFEEB4D4C2CD520D45EB7EF39F9017FA50A01D433805B766
38DC521206E27433B3811E933EFE0297A8B1B85D1B6ABF06A38B85FE3341FE45
064CCC506E906300A02CF7565607911498AA1965581A5FF98FEB82C16DDE509C
C737506057D68306DD6017528B3E841737D9ADD0239222A49EA47315E9810EA5
B01D2221FA71074884574E969D16C7DFC8B36B5105CA2DEAF653D8CC184E633B
763D0C226C1B003A471FD5F12B5E596D96D011C449044C9DBD522CE62B82FCF8
8BD9A5D4E544B799EA2504F83F5B68A71D6747595CCD064AAECACDD85BFBBBA9
4E6093310CB0E76F4BC6D7867399A631F15BB446E2DB8F2C33B0CA6175C5773E
AEA9353D7BE0E46D69A9E54D94CEB7DF72D1C340A25BB821AB550DB7F7788FF1
812BE94C6A25EE9A60B370DFB93E6B2B71A58AEF87B2DC9D6E218112CD8532E3
F77990AAF1F5E69DB102DA7D73501457BCF009EC8C3F971809C46496BCD17274
EB8E36EBB718DE9EF5D5CC5934E588FF88BFC8DFF8FCE37DA2DFD923DA4B7ED5
551A35160CAD6A977FCBB3DDD04F411D2BB7F9B1E5259BC489E529CE2AFD7293
BC86B961B95F1A1725345A48E979D67A1BD9FBC456DD7EEF6873A387D27D42EB
30F9644C28F3F6D8EFF9ECC3C3F4244A582F1C1634BCD70CECA6C83B4AAD95EE
3BA71F996EB0F75212363D83D52109069BDEF56A2536722E95FE6A691D58AD90
A5482C2E444BFE08C9D31B44FA4EFFD95E989F4BAF465B5F2C28A995F4593A1C
53E534DAA1078B16F6D521685D69FF97FEB1BAF4601FC160ECC414A47806EE8B
A3B4450D2E18FF31B9CE2A7DAAA94DDECC91C1E3296AAF354359B2334B6D0117
20C8D730688A090EF225F2D1798E2DCFC9E91A39952DB0C2F3F8DE2AC0C6AAF6
7D710A90CDBEC4DE16A8FE84344CF76BE6CC546229EFDF315F5EC708BBCDEAAE
D128814091783BD3D6F2267BB1550808AE2CFDC473238C0799054BAFB9A41F70
8E9E60F5222E7E6126F610CB203BF6483F93831F1DAFC012A7126DDD4B139659
2C1CC37BAD138D360EC619EDA84FD09E334F21B75F5239E014E148407C27196B
29B0C12535CF9BF81ED685A80588342EE56C5FDB5ABF8F27A17CC02DA8B10825
7AEAC4F506E0274D0AB16E1FAABD8D893C515EB4AAD912C75326188E2EE6B593
6BBE41247BB7C601266ED2B909E5DCE1F91E1D792D0B8E7477EC215FD698B7E9
7CC10430929400B6D6627FAA68EBE49BDB17257DE8620719786111754111044E
6BD1D035FE96483354FDEAC814169A39946A0294E30D71DA4EFE6D0A5137283F
3A63DBB2781449A2639C310E4F2DEE07DF4B8D926731D46AF638ECDACFC6E8E8
39E6026972FB2589B02F40DEE7EC1084B57CE522758FC97757095EA6F4C33281
6F4B838046CE4804332F709FEF2F0E2FA7C04FBB62C5383DD0CCC84D060D9935
D579DDAA29F3CFB26A48E01CF752A0938A2E0E014CC67DEE79BD07D471027874
6320634B159329FE1DB1443323C5042E17EF20E8A173487DF644CC7705FF2846
483BB59CB2EC012EA2ABCB6CCB65190C7D0D3099371E6AA729F1588ECD60F193
D7BDFACCEBF32AF67C872D90478F15A24035306D53CB87CD3DE08AA4F174F5B1
1194CDBA555D77BFA4CE7CE922E05D9918A3CECF19F51A76E58BDAA87993D2CD
E423FDA95C197A1C1DB8C1B6672FA4640F53BDD3F3CECFC9BB03BB64EFC69175
F47280A026C1E664A39B29B5C776D7607E7626AD83EFFD0CE8CE250FAD72B8A8
5B7F11B88347174D2C5C17E2AB91208F5988F604E972B69CB53AB4B5171BE481
A96E16FDDB33747768F161BDD3E513AA01CE0943FE5EECAA1E78DC1CB130FB2E
3EFA39F06B94C76B462DEA4FBCDC69446BEADE112D7CA4AD4FE93FEC6DF41EAE
3689A7556645169A35F545E0F614B5FA013C1CE63875D761518F4446469C432D
BC4364A0EC97F3AF135AB26A74D07103FE46253F1C58B4498D025DCE099BF4D9
5E5257B796091ACBB7F6CFC81E5E9F5BE9EEBF501709F4E57075B9EB5BA31FC1
D87D89EE3C38A896B9D2D575FA1862E4277CD9C2067D5EBBCC34B8692C691B93
8D96F738CE78AA3825AA746C04903146B824685E7A11557E69F42F18F83E1E50
76444BA39C546B5EA3F4B083070829D28A7E2F2BFB090920A8406E48024F3AB4
8370E5CFB610D4DBC9D85FB7449CEB3A27AF22752746417D120AA8E48524A513
FA04C776B1AFBF0CEABBD8ED3502149A19650FCD559ADF6B98876B0CC35379F9
9BA2D6888780DB4844F2C660B9353D94C752CC52FEFC1238F36B24B76C747DE8
DEDA106AB62B6F1A289C140344E3A31346EA185BFD796E75B942FBA2C6D1A7C5
E8B7A7AF5AAA1B1E22C2614EFC317CE9492A0A94D19C6B582AA69170D8C568BC
8BAB75E76E1AFF0D3119E033384E202C39020C6F43696DB9F62AF40704A1190B
58868A4DDAF6A4B65AB35EC2DF545D0A6C52612FFA2D6143F71C9806AB120AB5
1C2D9CE83B8BB59AD529A5A4B3AEEFCE5993E17676B1889B1EA68E9439216F08
5AB9484989D628B1E6B67550D0E418E59EC82CFF4F9247BACBD49EF48ECDAEE8
966483F21D51527D4C4E2ADB33D4F4901221F69F49EDA513D01F24178BF90BE6
3CDF5944C94CE186B47C832D232B6522493461E04B888FE582FB2E01F9DC2932
DDBB65530229694A84795BB86E0D4866B6DB617A9DE42DA381FAE7F302A71F4D
E777E639EB5AB858571975046E25366CB9A769DEF6CA9FDA0B21620DB18015DE
2B9DB8FF256B880F0157C7A82E60F8B239CD3D7EF41EBF4835918338ABBB368B
F4E0C6EEFF3CFE9A476228181EAB622A7559CC9F6BB486871FDADAF480995D35
324DECCF797A0BDDD302BEC9229954C056A1DDD2E6865A9897362590E3120022
F84C48B07E5B37A798348585261D4FD4D9F110CEE18ECD0EB0CC9F750D3E8320
8C1680D7EC2373B36E0ED06921532AD45ACE4C06C49018548F38179C9BAA805D
7E49A4309F6D9793FEC9EE6E057F99163B8CD668A7564C18D44EDF86394A5ED8
27EEF0B2107D86241C4B381049642225DF28C8245885FEB908544B904D9CF195
D2981591A75E1E7718EED1319B8B85E3C730299CD99BC82F9E61598ECE5DAF47
4903C267C70E1FF5FF01B6453F4008BA42A2633647BCF502A77F12506C02F1A6
D826E99D4F1E8C0C9562962446568997D0838B45D32FA22E2333F9DAD4A3E47A
53204FBF9399899C7BE315B4DA7E5ED0D36271DF6CFEEA7BAE3F80E5FE662EC1
F5C5C7750782EB8EB27522EF1EC24BE0186EB4EE88DE82DD165974A8C447AFEB
06E4A4AAE9DE72FB02FD7D73610AA31BDE0EFFA823A8EFD97334B4B9DA3074E9
593663AC861E5E7FA54962EE184AD04DE7A33D11323133199755DFB25B295CC7
B36D3301871618F2058002C96566C1CC39F5F46914C2D5C101C31365C4566B10
37798938BD3FAD9A644A43B0EE1688F05E3CAE99AE48F8EDE8ABC0A23EDF7FE3
48163CC4EF6379A19A7FA4CAF4324B1A7C57AD21E5D97EB1B4C0B5DDF3DD248E
1FBD71E3374BD716F714415EFA2C253FC3051B1D7DAFBF5DEF6D5D125D110FA6
8B6119D2EE038C3F78AF5AD714A1B2D2AED7A5BFABDA4AE41B665A2F7C931826
A17BE59BF8D259D5B41005B2C9633E926B74236DE43FA1261082816909D11BA0
7A7067502E84462ADAB241869210DDE316796C192CF6CE7ABA34FF1C4B20D56F
D93713226D0A582D79C5C070EE7A21C2C8B44AD71187BE786214A43EA3B7D414
F7848B4FF92F4273B182A49084FDC8ECC8B548AA7DD5980ED1DB15EA0731FBEA
AF9B227E34D7A56746D45EFD118E9E981FF7E1B6A4E8CAE557ED6632CC933E99
E610C7A4EBADED843A426FD737163D7F610A57748B42B3DE731DCB114ECCC59F
29EA9E146E742FCC8BA675AE7AAC03CB0063EE1766834068E600507DF980D3DA
97227FCD0FF4E5C96C28CFEFC4DA00EB6579083C63649FDC8CBF3DF0552F7F63
44093A7F0BD6F914B0700B82081C4C2E462E0AFDFB6A2DC45AA997672C61BBE5
B3C8D196F355570C99A805E26B3E9A75F962E779D1F11EC056C359AEFA517044
55B72B4BB60DB3A87514984DFA9DBDE2B3C9339C7F2D585BDF63477901B12E72
513190113137D4FB13B0A29C001000F4883FCA11E00380CA66EB93A53760F20F
0908270AB00D4EDD0246B030DE3D8B24A9CA878CDAC00DE3EAF47859353FB22E
2EE1B5ED812CD2F3EC52CCAE53B923D50494BEF4E78183DD701FF0D0F940476B
F435E7274DFCC80D58B99A15CD4233F2AECAA9AFABBAC2E992416B7B9BE2DFF4
6291232676A161FF9DB7741FD07F83BC4208400315A0FC71084BEA3778C1315F
6700E4FDAACE60D5A6009CC1644BCDB9A47E3275A2C1916EE599ECF4C17DCD00
9BB3E6D4A0A239E6831DE034D2F4BEC784F4132F418DB5CC4FD77D7C4A1A1582
26AF3FBCBAFF9B29BC9374EF96EEF806A967B12AAFAA04CC32097F4926128532
B9CE6452FC984D96D0AC4D9361110A9BD9219A915D2A8FE894EC119C2C03476B
ACC6A709D384AC24FA3F24A54A6CA0404486836E2ECEBE6792F7870B9C42B4E8
FD0BEFA7332333C9056CEA20258F4399BF59EA3A75D7B248443231030C80D34A
EC3008AD726B6B1823B60F897AE1C9AB8BBEA2FBCBBABB9AA29EBC2AAB1E68F1
2751A978942342296B509DE2EAF31B13A8748805ED92BE85B2DF9C73245DBCE0
192AE3577E856D9722404D999E041ACAFAFDD2657C20F5C743B277CB49162099
8649FEBFD68894FBA3D0F5A47CCD4017C154337681AA02369E70927E09CBE984
EEB17414AD6FBD3175DBCD73B2DC1D83D4AB1457A51955679DB7FA2457FE6AAB
D1E1512FF71A89C73751111C821D5840EC1816313959F5457952833E7FF56018
CFFB0446CFD36D38888A927FA68A4CB2CD32AE61FE9546C44A949EAAB971ECB3
56584BDB706FAD28430F002064C45EFFAB4130E61EEEDA3DFF2E99083DEEE7E6
B029AD7E573FFF75376588223CB876DA89313D6A83343298F34461B1306F183D
847D78AF1EE751033C006F4CB5E04976A1E4D7B0CF43B5B28255712F2E5C581D
93C0A0D00897B277A53F94E0EC66A6AFB2304986D9477B88A2C26260F2C49ECF
4F112B336876AB2133D97B079CD0F664D76C0E30C73F067E7F760B71EA3C09D8
5A4E0B17F9021D7411C3EDB94244B0CA3175A5116C8F0A7A560DD14E0CFFF0A9
387FCAB26F8EE8ACFF91A368FD4D6D3F985C07AD665A94A52E3BEF1290615BB3
E6E309E0AFC3D9CAFCE2B7F8D633847EED52392EF97110911968E56BD8BD72A2
64E73FB67CE7FA22FFC4AE914D39407DFA46417C6A672CE969C54A01CD506D8C
D923F67F3777161586A6D16FFCA19838494380556ECCF0F1BCF8AA15F67BD20F
BBEB94ED48955C10E0B69DC1F1BED01CE3AA17C7F3FE4F8D0E071416F35A1AFA
80E38A02EBC9DEC8C0BED602BF78B1AB25BB83A1DCB885B56B4FCA7625C148E0
29ADD959840D71BB19C3DD2C4E988752AA6704B12963F4D8867AE3FE9C0565E0
7067EE469BF6376070C0B61B8B7F78B569AB453CE623CFD483BD7A7B0C2679A9
C3DFF0D3985E37BC2F35648BAF1F1DFEC9937F2FC4946A093D2D96932A798FF4
9D4FA6EAAF661F81BC6A33E9A1317E6DE3EE1DF963A909936C5474BBEC9B0868
27E54329B65E14F56C18D4F1377FA7F17F41D249A02A2E0B7486F067B14FFF52
C3AEEADF5FA2851C69A521D0D8234E1BC69AD30D3A037DB040BCE651AFDBDDCE
3966122A67E0E86EF8B6EFE1611683A8D9487AFDB79F3F5783DB2AA4FACE1ED2
B9018BEE92F66AAE7DD0B979E7FD811E8379CA35CE04B2CA47EAFA203ACF95F7
3C7407B2FF9D23B193235479F0D8437BE4505B7D6252F69D4C361B1A766262D2
B6AC48752E6526465AD559EBBF0C5793831A9CEF9BD9E5F67CAA5658DF85B06D
F35C2B0A76D505CAED4D969C95534CEFD31FEF6B46645473C5681798D28C7B19
63AD2AC7E64858D5DAA6AB1270F097FA39DB0FAD86145530E991A9ECF17446F9
C870D2748EF977083A7F6089C36468AB429E5E7CB7D088AE2CC7A603C70C8A72
B15CFF9D1820E68CCC9F04CCC7532536BE0A1720E908BE2CE1AF0B640E07C03D
09DECC7F3DBFC0ED3E34B678FAA8869044947CE709E5F572701A3C8719B5F56C
76A9A57DA79ABB8F9D8C023B718D5B7499A52D6EB6C1B74A091CAEAC8D1B4747
2B82EC04033CA63A88159F644CC8DD9B1A3CA985B7213FB2CDA7BBAD5C077180
D20D747881E45B2EC66E997F6B0404398BC772AC0D6485766334EB95ECF4787C
F3CEA6295746C7A6247F7C8E602E32841D449BDFC2CCBD0EDF78FC8921213424
49AC3C1B0A36F5B40CEDE1096DD623C344B9FAE0A69D20F4F23619BDC3F30087
BC0ED3CA5120FEAC123BA3B044560FE3C5DEF64D7D71D17945C6F14D2A2A5818
8F64D1958D36E1701CD50788E6B5F22D897F59B0C6F18FECC7E2EFC7CADE7256
4CA00346DBAE3D9D97B131AD82C6F9B862736D867D927772803D908D45BFBE3A
CC78A1AC8611948CDC7C93B5FBD2E9D8CD6AE1DE2167353761C3CC24276C4008
9B899D47030F6B2FBF9A1BCE4E4577C0757AF70EAEE6BB49E9294875DD4502DD
74C33F08F563F95D5C1FED40BE32D14CBA9F9CC2051C2FDB9A455E8040D2A098
AFA8CD7987F2379C22947D8C4B57F2471D36ED29631BF2BB54874F6206780CCD
F8104D61BBE0D526D61ED37D34F703E622B86657764C09F1054318137DEEEA57
9DE0654DF8546665FBFAB1531E74AAB7B6FA9ADA4A6925F89E1C9236D5568A43
3A1C7186F5BA2575CC1DC4A25ACF919C26F5237044496B32404F8A5DB747E46F
FEB88204F80A9FDC497C89A0054F2A2860EE7EA14ADAC9367197221B76425598
3C3006219F47465231691B683C759365BBD978CEF6F04939C3418A67779A1C56
761D99504182F03FBB1B774C3244D0438A26BA7FE0A686155C8F5A8934880B5B
C1DD1425A15C887DDC3F530456D6A230E92EF6FE77D10C3F474983F82EC2C245
4D75DE471D4290737DA53BED792DA48B7CAD3D5041E7CAC1F144DF9486B3CFFA
939DD3F2D4DFE40C3E3614F99773F7588F29608429599C53C3768B4C296BADF9
0E8319EE39E38F34C9BF4A27C680A3E8112B67C5D6DE793F7C6E9CEF59C241A0
DF069387E4FB06D6CE23E2B3213C4EA98A2857A5340570A96F6E6FA7336DC52F
4DFFE465D094B64F24CD44018D6F607603C23FCE4DDA344F575534F1F6014DD8
0EE004BEFB4BFA8E2E4FBFDAA0A4A86A01BC87B61C4449084A11F9FDD5DE65E3
08F66953F23100CDDD6F5597B352CAE1AC5FE4DC1DE28F0BA6976F13C8256040
D83E3C1EDD7925C6A36622D2316F7B3E2F73E562B6B669750F5DD71BD6F618FE
884CDD999092814E40951248D7C626AEBA966338F795A2F0E294F324C9D1D083
F6BC70CB02A5A8CB75C7CA81B09536AE22A4ED02ADCC2E577DA417FCF104B566
609E7D190354D113A2C5E6831D58E04673F0EF8CBB7FA9CAFA807DB3C40115C7
E339BA3F4033E8542D6769201FF76FD6AA9E6E9B3F1E17479BF86FDBC9BC4015
422C6DA9D1EB53E1A8AC81CE8800858F208F653DBA3BA2DBF2009B6AEA02326B
0A52DA0793A0ECE5F10B483AB76E42EF2D9429AA590198C595770F5BFBD6E37A
5651889291D3F692A5DC407E581101CB06C70A52BA2AA0A045D56CDA4CDD7FA9
30BFE08EC57CE103EB4698A8F5B0316EAA4C14832705F37B72557A6FB3D15F96
81BBB1023EE030171FC17E0756D67F12DD1B52BB5403C48362EAD0D4D06D60DD
E5D7405D5E61D09346DD19DB4920F0B8EBC54F18793CD34AF58FE4D14258D761
7C6A1A46477C48996BC28B9240C3DDA8287F52E3666A94CA1013269AE4DD6520
9606EDBC47E2ECBCD645F92207F8517C68A5AFCE83246AA742A70418E9DA56E6
EE19FD0C6CB8A2D39A1AEB141375D9E71C5553A14C5956A4857BE0F6A23A0A00
B7DF4F412C71012AC9E5A883550F4D05F76832AAEC0F6DFE2AA6FC626745ECA6
14E7E59A00B3975941C4804193AFE8384FDF9CEE30FA83953E0F95D6022D2CD4
4876F8C99F891E6606EC841AC2E0A52204E1B4A7F6150C47C28A090617E9A5B4
4D40B1CB8CB60C0DB64F4CCBE0962D1B26872CF11DF36A65F8751FD1E0EFF2DD
CE94A0FC38F09139ECD44EDC4C4D95FD6E9E78E12BEA4EED04B3999B814D5065
887942365D45E70C5E51FE4EDC6CDFB7D0D068457E32BE84816DD5386B091724
D0FDEF225963AEE91D1DB83CDEBC0D0847C53F2BB571FBD3A901A347D010985F
56B11CC718EE99AF6E52912808E8C5535260D4EA5FFD78A8246A11AF1E5A29C0
6FA471576D4897EDE16F62F2D460CF9424834C48C199E97C6018033CFD859749
B62FB278BB5FF7B2792719A75293DA28C58459F9573612FB2913291B99492B28
CCB42F7908F6F33903DC9467880822DFFCD57DB107E0D5E728CA781891217893
637369C7729F5A4CBAD8D78B03F957026D8213718025B24FD0B8D2C5B93D3FF4
ADB1F7CE616D9F3BE20CFFA9A4A24160E5B4DBB880EA882070F2F90F450E7B24
F216257EEBC0BB67D6CBC18BF6072271347564E470D434EC8ADFDC1B5F336851
8790E3B7162AF37BC5271992C57001EA90FE5654776B2190F30E2EEDECE8D09B
9A6A9837FAB9283D77F502CBEEB908BCF1D8FD899F8C8F4BE0118302A825A9DC
4398695F327240CD4DF02E9317C36A806D005EA0771D96C2375020C2B9301346
0498FD8FC803E7AD2D277DF686E524EEF670B93B4B89397E969D4551CAF1379D
3E78A7B2974C9781F3C7017BA9784185BEE7B61303C2DE3216EC2770ED6A482B
294D000EEB53972E2941C9924057C594E901374DC11480BDE1C823F1E8CB5449
B737B9277F022E48F07B9C73FA6E302F6AD375DC1F42D013F82FEB4CAAC79ECD
A1E9E5B24EABC3245BE5CF6C2522C969913F3D986458BCA02A30BD76B5E4C68B
7019D0F455A2DBB8815B964CE45895632103AB4EB5BE4E3F4C41BB69DCD67EB8
29004CDA399869364B0B67A3D43924F1AC2C3EBB04341909E34176F3E042860C
6AFF44BB52786CABED6E1E460CBC2ECA045018B639B065A4ABA414BF33F49B14
F42A0C4A86F0371B96E125B9014610AAF821D09533D7AD4D09493F9F98CB9FB3
3C6E30C092741BA7FC408F6D22457B46B3851443856541DAF493D708E4083407
DC05A31F6DE2AF19079CD7350274DD43406687EC5A69E450C3BDAECC071712EF
7EFEE399E838013770FC07531B5F94019F97E74BC130CCEB740F766D91918C93
CA0C1514431FFD29E5428076E6C53F9C9455F710CAA72289940D9A295EA233C5
268A6B0004FC21FFBCD613E05F4F6B1A6E15A66C71DCBCF6E93E3103CF2B562A
20037703E71A08BD11B4D2661E017884DF605E2464BA826EFD3C36463EF17060
7C4FFA2E542C97A76EE71BD821B9EDE604CDAAE140EC464CE247406B5A01B394
B4C641F60226655E26E1B29FC95F9A1C82E3E930BEFF447B9E36EF78CC0E9FC8
16F9F8C72AD8DED036D7AAA7CDAF8BFD4BB46D55451033CEEE8C29E2CD71103C
C55D0707DF97F5BB6982E5BFD2CCC10D0707274AECB448AA29595FDE1AF667B6
6958B87062492E3A1D12E614309A56A18260ED02752519751C717DAFF83B2520
2B676BEF8AD91EDEBCCCB2990207824C11D89FD2EC8256A1AD11EE5C79A76F47
83A1C3C830062D20036805A64A1AFA4C22F1CB3E757FEA15B6216BA7870E7F61
915DAC06E9E15A5D5BF99DB07EFAA0A98BCF9EE7D2270E55FD357B319388E0E1
6B8E332D4CEC5BE7C67A45E2B9597252062EA4498538710B70F0361CE951AFFD
F4C04A1EF8C782E54B1AE1AE6FB899DF42F4087D9BC114A38CC82AECC8517E9D
8DC76ABE9A1B857B01873319150C6CFA0C4EE73CAE558AC0515110254578FD8D
13A390A174B5CC902E7D650563D1FEADC1107CCC5D0A0B2E0FCDE3E4CF47C1B5
E915B55F5D224CC19B6D45B38F0B82A22191BBE5C1638CFA5B1303F3D0252107
ED318919C1537DDCCEC032C7FF67A9EE39FEEAAE7258986431E059A7CA7B8CB8
ADF7195718B0B5D21EF2E6897F39A96CDA72ACCD1DBB20192400C26EF0ECDD29
F4AB92AB2D13A001779B67D3C039A064EC4ED43A94ABD8C5C4B8CA4323981338
3279132CBB3EAD64425E2101A2AAD9B6DCAD1E5CEB578F6F67F5B37DD15068CB
9F4DBFB404B347647F445D3FF7B9BBC5928BB2B1D88219BDC1987C832F8E6EB7
F51726A76F64112CEAF2970FE16B3D48337861B12877C664B7808BD6560B71AF
EBC3450F84B5A7C65A2AB1328DCC4A3DA4372ED22C944CF6685AE609D0BA15EF
2147B5F6CDCE2CA7DDEB4FFAEC03227B64467501908072ADC6E6D157EF02B7DC
8144F2E9812E57F4F2D842D041F1052E144B535EC56A0A2F82A1057547D0DA64
D37980A0CD86090A283E54F1D2370ADBD1836513E761307DB3A9A3A1CEADB7CF
D26016C513041E92416876F3534D7B931C1EBC15746C93C0BCD52F34F7043B31
D257E8376723F5C50CD5900EA4E259A6A161A2EE7F73AD75D2B585C5C46456B9
93FF4A3A3BEBE7E8F9CF026A2DA76DDBFD43EE0F50D737351B967E2BCC2A707C
32C2724176250F807E8B596F0E61E8D325E4F0660D6BCB1DF5D7688D559C025F
8CFC49728867E8F172B12426216ED4A10BCF93012334DB103F26C75A6D6066D0
E23D2D1460913E0D2A460A265EE0A14518C7C55AA647C19F9C6DB70EC5A84422
457C0B6DA6B33E24E8134342CBBB96C89A3D0A0426C5357F7F712BEEF42EE27F
C119CE0AF2276F6A38D5E1CDB3538E4EF2656620CEFB1B7A7018E8150705573E
A24E2ABAC82F662179ABEEC43401BCB045AC7C3BBCF30D931B3824F2805232AB
534123EFDFEFBC6A6A9FFAEBB5C4DC13B65DD47BD08AA696684B43A61A245FDA
07AA6202AA6A99A472F4DCFB74C7011010B1FA8815A7811F4E23B6EA46C0854E
C912ABBD47C47C9913FD469D8BDF85C364A37169F4D75A18DB53718C621751A7
82DA56A8780463BB30B64E49CAA45A5DB350BA70DAE1528B57948F9D4B7EB4E1
570F53EEE2BE859E62D1EA863C5113E097087C5E7953B691D6C08C4FBF1D5AEB
238AC7EE14141E02C6447078B0979D70FBFB56ADCB0934CEF2CE73C0ED97ED90
E3ADC4B74DD3B682C3C75A9F3827DFE03558D34A16744457EC281AB2A2CF6D29
2696E006D7639D81AC1E98CF9104FD28BC4972E2A2F9968F971DD948462954ED
6689DF8C404F55E01F008CA009ED9A2600E944FF6D43B436FF7B4C70BBA2BA84
77D4FA13B87A7E6E2FBA6FEEE4CE7FF33F6D6E22E5C0BACD2283BE1C19345F75
79F6AAB415D9DA17845068139130E6936AF27B38970596B2D0E493473D4F22D3
6BE45455A9E907F36F2F2B195E8509090CE2D75BFFA111D94261086E6FEFF7F0
DF0E29D2F08BB2E7CB73F11A18DA71DDA5C4F4D6E5435B0DA5C49D44EB7F6CF8
9A910B180E6F9B009AF0D2B648029ECAB91C3F4E48A987EE7099076F54A2862B
E921407516A079E9B24F0B056F093CF9C1D82055521E15A33E829F9A9C01947E
235AF0F3C861440E1BB64E75876BD9D58ED522119C2D2757CF5808E562AE2AC3
EF061B50D96F94542EF68652A4BAEC7842F048C0005D427BFAB2693D04ABE2A7
E4621CACB672261524625EDC04141878513E4FC01C47CFAFE2F8843674313C4E
0BBF6848F6F8751B19B07B1AB806F715882AF44D8B5CEC51E5EA8F51CFDDDB8C
73B21F88A470D9AF11B2D56DA04C40A41C168548C7F729DB267AFA967F80C826
0340BB7B6ABD88A9F22560A56BA1D8874F38BA2148B76C31066C12A74FD1FA8C
AA01B352AAC8D92BB00C93A0FC4E93B51158441BA9970D09F79FA79979D4EA55
F3A9126FC8C20FA440262010E8DA06B2829DC81792C1C42F403BEE5A63AFD991
B8C6FDF9FE1DDB1815D29E4C982ABDA4AE171095332F840366BDF9D404B2FB10
D2EC175BAC2DD6D9703EE34ED500FA5A63C0E2C52FB4D9148F74BBF2CE56AC8A
13F995800CF2B4658372D6FE28B419FE7CE7CDDFE807F4544CDDCAB9048F3940
08216237E30472A11FDF0ECD6A5EEC8E9AB7F0284EA6940C9B6C404D4932479E
48E7ED41A569C2D614AD21D1B278619CFD825A515ED7629F4CBC2ADDACEF05D0
9C214FD2D49C77FD59CAE2BC8798BDCF693663C3C1631148E58EB639D8447503
58E9C9F9A5A88321B7A5AD10FFBC85E5AD9285889670AB5FCAEFBAE84D229A03
874B60B377C8FA44841AF6BA1AE7539D1F6F70E6740EEFB890F47F76010A9E87
C5ECC37A1581CC10BA07650D8D2B5E4FE8B2789DE5115F6383D5AEA27A6E029F
49DF080B51383D4723F4B3A4A9EDEF90FF45C1568260E212CAAB246290EB56C9
6000E63C900F2A6A93878A6EFD56BD2854BB4BF87D4ABB7E00AA5702779FF2EF
E32A20F9CC5B7F2B9272A0735C681B612DAF7B7AD44673B6D157388E57448B55
7E0BA7B2D29F774A1EE15168BC2A430D06DEE133C4373C5F69677FB7B7ABAF82
D8258EF47D74BBF3F9FEB415A602AC8551147686B4017D09502AF2CFA1B8E952
3CF98B3DEBD9B939888646612AC1F9FCA1107E4E94E722441A593A3CA2D35173
344033886AA71F22C3B443DA734B4FE6143154DBDA49C6C7CFE2648CBFD99764
19943DFDE42BA1351FA2B314B85C9C1BF8F6DEFC58CDBC73175C2EBD1E2986F6
F8F25BB5C819CC4CE79578B81AB958552F985D1680F26F5BB294023285AB4A74
661D9582E5FDB1DD55C759AB85329481B402E2795BB389C7ED08E6DC49562451
32BADC6AFFBBAD35443D6E1C3FDB669C48503D10D08A83F354FC8B5AD01DA8E2
D7E6FCDB9B68CEE73A252A57C9AFCF90C514666933F372CAECB94E45BD4B4430
71E9652FA191E1EE35D085BD4D7CB4CE8CD9DA1D3C8AC0A9C95AAEAA21ECCDFB
B1207A970933B13EC1B01FA6924E4D458BDF3DE15888C26F7AA1C9E4F23D9A3A
F81755E9BDA7AA262055C5E2CBF3D19422B44DB16C7147B64F3AEE15375EE132
08DE14BA569F6512020E61E3445A13D50A273A674063ED52CCDDC234BE974721
48DAB4601462D5E4C2CF88178DCDD7711E90B75801F6418BB909362B0D71532F
5EA941F3A511DF7E5F7B8FBF2420C7757DFD38424FAFA277F3BE382D95FA44C4
7C9913FD469D8BDF85C364A37169F585DF1E3684D37626B6CEDA3CAC91E253D0
29B17E3E3FBF8B186BB9E3F6C85E86E42B448350C9EEE4FB88FBF201D9E55B2E
3AE6C5D8965C53AFB1F238200AB5250B8DC673CA8FF7AEDA5044E0D7B7F1AFA9
B3A1AA0C1CC6581F6F3BBD0B7AB93FA00F62F7A57D3018D9A89D9F64ABA4B585
A674CA2D5F3B02BD34C3497682808EA27BBB4ECA6774D42B4022F0D296940229
4B31E69271977AF2E21FD3993603E6EA87D6BFF3DBC93516356EB2460A07FDF3
C8B4C736E2EE6C98ED647F7EC4E8F3C79819648E59DAC0EA3CACAB742E15E288
871EFE935178BC732186078458132A1501FE9F1A8755B76E99FED552EF562890
BA99B69BE468C6C3024C8BA292902CDFFCB937BEB4E988547EFBF80C009DAA28
BABE4F643EE587CAC33FC9B0AC672EB5E624D07D9CE00A8F8EFE3682EE830C39
5ACF9200BED3EBD63A816E0733C37AE910E3F0CAB556EAF74D9DF9554F288B1C
652C7A6F29CE404D1201CFAA4CEC65535AB32B2BEDD01AA8FCEEA48E815FB47A
57EC73E5A262EC29C39D589022F67FE4A9DEE1596B6A0C503BDACCF00A77B30E
D0A53B7D44E35846C012FF1DC94992D35FA7EF605075EE107C99324176BDFC22
0482AC62E6BDC00ADCDDEF7F0F487587E28F976CF20A782776BF214450A35893
F485242DB74C0F823586C7033299F536CB2986502E38C4D39682CE272C62425E
12DB8069DE7988D35B006CE68E4105FA5FFF62F8FE26A02632ECDFD0BF957091
95A6EE8A365B5EAC92855EDE27C68E17DBE20E28D96938299F655803061FE190
FD1F94604DA5047690477A859103CB5CE96AF992CAD0D92646C1A6509EC4EFA5
119BC9B5BB1DEC79AF1F03F937ADC8C60DE9FEB8B5A29ABC83301AA2351045C2
8B8A3FB0CAE31F24ADD54882C163617B77D65D423D081957B49B0E6552BA026B
A54998D814DB2984391DD5F0AAD2DD34D2267EE0682D2EFB420B781D76E12A54
BDD90FD11EAB33AAAF8228E164F720509CBABF8C4F0D045A0821306F81124F49
FA708DCD302D6A3AC10FE7D306C09D5BD8A605DA24D49AA47248A32BF0DA0342
9794035506719D2B65F3EE772917470547BDA603EACA295C846272F1F184790C
613A59A3EEDA53854FFFE3D9F9F3D5CB6F32AF0F4548B3F56CA5E42BB2215660
8298A231D3A44BC29751CB1B2D860516A5A68E4E4B49CBCD2CB7200C540287D8
5693AD6EF922ABE42757022F5841767258B2091CF8EBC0B020227032CAB4F567
54BB331C453D19C9D40FC304CAC934D15F54843B796B3C665E6F7651C783FC51
5522C449D68121F03B33D0AC09237FCD7A4D9F18FE0FE929B2FDFB9AEA7410AB
69F0D1798271E586471A2C270E9F700292BE7E9636ADC6B6450E50E3B9ED1659
6CAABB2CB8CA3E59868F5CCC348545C2E5620B3B2CD2FFCE079F9E8BA773D155
B8592307AEC932F59D55E793202EB314ABD409CFD87B215EF929948BA625A782
D59C627972AA618682D0AE03D7813651E82A2601FFB05D90A5A82312990F41C0
A7607AB9B9BB8106A4DAE94854900F4A7E6765FDEEF6F90F1166E1F634F3FF61
93C72D80B33AD5E627D93D9F77230D85AC275CEC8E64AD4BE97BD8F0A189C242
57B972ED6E04FE0571B7E28904507F648221B8CACDAF46D0339DEEDBD48EFF2E
A4BD68AFA2101B4199B995F923B7275759BD37EBCAC68EAC5882C5E1ADD7A797
B90B79A821FE6B917CBF1169799EF198DFF1307DF865E3BADFD210AE926C86F9
3F025E9C0AC0313C0115F38464FEEB562DCC8A4949A7BD67443B85F463097029
0060CB8A9B5B7B8D3A964AFA13B776CA3C006A2F6EF8428E27DB47A3DF9C6C6E
21504A2EE22E18604DA767103A8F6D24C9C0B0181530714A79B827C933709FBC
CDCB31D08249027D050C909E92588507B8F8BA5135DE6E425897FA4DC7720476
4E126471D2BF79EDC5512B75228E701815FEE03361675005F432F00BC77CBFAC
4BF62F60B65F422B9179CD0F8C738370C486B823CD9BCB7BBDC577DD7245E5D0
CD32F1595007045AFC5DCF2588057C403B5E2708D5623ED3D485899E599AE171
1EAC252F6187D9DF5CACB2605BFEDAE595738B082B3DAB96364F9DD46D5FEEEB
05D6D205F19A6FAA781BE52F1EFCFD388B23F459222FC65E8C297F6D7DCD8C38
D77AC2632092CF95D6FCC94045FA0BE520F48B2C8FE43CD00F5FD9256B31AF08
005EEE39EB9899EB338C0AC54933FFA6AD936D3F3CEB9AD664A57F7B7BB14ACB
77531FC60DF9E5E30AC4FB02F8FA34BF21556A5992769A83D5C16287F5E1B0C2
107BD3703BA3421066335357F58D80EF57ED4D3F7252478F6545177D6B1C7CEB
7B360FB87CF551E3DB68463C2C7343890FFEDC06DCEF17A409FD928374ED5B7B
4E0305B2967DDFA2D5D27EB6DCF9A11121F93156F322B9EA6F5EF64C3EA2E5F4
7D870C05C979D505CAED4D969C95534CEFD31FEF670C174F3A9D5000616EA065
EEC0DFD78D55588A379276B22093520062D2E3DFD19A35510A0685ABB3E2B005
86F0EF584652EDFBC1E13E8846D0EBACAFA882B9AC7E77DDD61973B487AF262F
6876CBE655CC716EECCFFCA629E45E3151C078EB84940814630754074A2AA6B3
3D2295D7CB77C33ED9222E78D0F6554E40605AEA3A2893DF0AD31AD80023F44D
345E513FD288F74192AB98F347603B2522CF62984C1CF1C084A314499D796087
3A05BDCDF899DC050680505B3B4568504F2AD125D77501D616F8F86FD5E647C8
02C6DDAFFA52A723DB3645215479A701BBED776BF41DAA838EAD58552A4E9644
F4CD1F575044333CB8F58B2A52D533DDDC891E977F583F63D45950A8318C563F
6F1AEA9D8AEB23CA39C37DE8DFB217422F43524E56FA2E9FCDBF4552F0A0399B
7E019EE8FC1296B5567529F45E4DCC5DF593CED5C386692EA02215B53EDCDF27
B191A6D35CF856DCB2F4A253A58D39D20C3855DC34CEA604CDF54EB44E85858C
669666ACD1366E775F2BD3D4600CCF85417AAB7F663FEE630DB0A4D5A3969381
7387E1008E89241DEF32245342DD6C6CB6FDFF86A4454A39A3E3ED38026D00B3
460B7B8AB281842F0E1546611A5863302A625AE0F62D929A6C475AB50B0F606F
4CE445D8EE0D136D506B1C3CC927663E4AE517FB4CDAE4E7320FD08162876443
74D2D1C6D82D3D2875B9D691F21F29C1EF902BF03DC6C2A77D5E12C4DFBD2BF4
BFE16F0F6F4A808F92638E4A6C0E9494750A1AB420C666E647111177FEDF2B60
434123A76CC70C096855DD4D93B75AF627C0356DDB161903FF23631CB2291ECE
EF4D18652CEA45127F9A3494FC43369DF0178B7D0353AF45AC914A16F1A3A945
F7D24379C97C347BE7FF8EA7126FA10690C9260DBD8815D319AF7A7AF0E84994
47E2EE4E535031B8BF2B867F486E3C6B9B234C91AB121EB8A905FABBE5BA2FF5
EFBE6E43CB9CE348EA8B89AC8F8AFC209ABCBD3FF373EFCB1335D1033E400540
DB12E30B96DB62E90026C231610AB972FD69755B6E4703A8EB1EC9BD7932F7B7
49AF98972B0D208AD9C39B9534A0173199BBD3558978454EB80264780C08A94D
675FC895C33E8ABC7A0466873F1F7F8F93BB3B80C468017577BAB6DD29979307
753E280C955A75F63CE67048E12CA29E5D1A18AFED9C043E4BDA21FF1D072E78
2BA21CC042E6297DF85E201E9581896D3C22191A7607BE4BB5BCAF99632083D3
5FA687DF7DC3B76EE52E2B6B307BC5FEDCB41FCDB0429A0F9DC0C11881238B28
F0768DC7F3FB4445692A419DC6CA631321596201F40E68AFE2F77E67109E394E
1BBAB96CBDD8DBF4332FBA5C00B6B17D7533402E6F664EC44831F8AF16093F76
694CE76949F58F31816635D24120266ADCD6BDFA03562E95AAAC55D15945B2EA
71BC01C7A2041B4AE823CB74464DFF46A3E14EEF3C37447B89CEBD06EF5406DF
4669ABAED236AB49C7C80BF10F75456EED6A84F01221A0D3E8D94989A5D54FB7
236008EF9CD7B7A4B2DB63FE06D0D625B4D9BC59A19631CBFAC5E6B4A812BD40
B5E72F5BE5C0ACF14F0AA747F7A0381A7551DC366F76F08E6A6CB6FDFF86A445
4A39A3E3ED38026C58D4FA943E8A6FD0E60768B57B5EB04D3E4448A93D107C57
FE605E89A232B2533A2A24417797DF2E3C076475AC946C9E0ED10CEDF9128C0C
E109C182E20F29A103DA1F8CB5A1B72C0CDDFDAEFAB79879360490EC05B8906D
3FD8E8DD4E70FF2C999ACC476DB5EE5BF4B6907AACBD66A44985312399855895
3D3D6A19D4464E56E0AB0255E4A960F2DA088FE72F1C35C614E8EF883AF97D36
7448969021F0278F3C22A105CE53D3DB4CAD16F45B4106587613E9E462B80738
94F45DC6E72E2818087A03485AF5AE654BD6E43EDF0E3960AD99B695828E511E
A649164E96BF369E7850037241F1B3A9B702500421613E6317F661A123DADFE4
70069F7013E0177732C48DB71FF44F644FAFF37FD4D440C68BDAB1915C098DBE
87B454FF6E93F270CEB2A246A81D0E8DCCC2FC0175AA093A73E154D58F53B8F4
154501A861D0E151DCDC664AFAB93EAE4897DE4AE830FEC7280100BB8124A5E1
4C6A04CB5DF676A80C637A6956830AA9913DA34CAA44B7711F43B9F5C86917B5
E88AF827DC4FCEFF5C3A5EFD2EAD66CBF159D97AE939EFE603DAFD54B8C16383
2586CAA9B56AA7065F69514B8B6AA528EFCDEBB707DD2DF0792DC67F835A3076
807AD9FDA47892FE18726D87607CD598BCC5F24008C683C76A925341734F671F
3FDAFDBEB16904D5077472E3A7F9AB5702C05640E1884B2F5E4D6D0578D958AC
590D680C5E9140B118C3EF1BA0E042BE11FAF9E0D2ECB802DCAF28309596881A
E238BFC6A1289244112F20FAD0CEA4924DCCD155655633F0203C964CA0E25519
DBC708B4A77FFC56DFE4E3AB2E68790A8E264C5D5AD12936EEE9470439DE389B
D7B71A88D227DBE4146ED2D9F8E34FD756618264F76C76DAFA8F7470F6365E57
C12674254BA9350DB9216E7426886FBF6BFDE0D3BF7A096CC1FA00C5108845CE
B736F9633DEAE9CB386A900C1CFD1FC53022B7C4D6152EADA8B53144B77142FC
CBF9704F25F37733E85613210BF6EC0333F43B72DC0CAEE8F954BD7CED3A6048
EE3B6075F042DBA8939FC29A7D3A108E22E96B11E2D57EB3DCD1349BAE395715
DE7E2D6A682630BDBFBD3F3E9A863A421570F08B308A0B6B0405DD2FBF77A575
F65011FEA13A759BC4C8FC3E26F5F8E241A37F77D5075DE4CA0DFA584B201F49
C226335B21329BA15B9CB76D6730594F037D53AFFC4360E8E49322475838C68F
F0151A67428A2B7DFBC6431873363CA0D6A6D1BC7020E1996602023FA5C06288
ECF5D7AFB7D57FEEFE7F587C8F7455255669CFB27E63FC7174823D830A31E65D
86656E723C6CCBD0A3FD8A9F88AF4E5BA8AC8284AB5AA8609B0BB440C0CAEDCA
CA6A82BF6CCB694EF38602D175989FE8E5AF47A4E740EF4CB80DE3167D80600B
94512CFDEC02A1E755F160F4E8DCB8DF16CC6C636697667E605BC641F05F7E06
B6F6773A5B285EB5CAA52F51EDCEBCA1984881D91078D998910E662EB9FCDCB3
3E4AAA7AA9E490F24CA94D8E9CA844C5363CC7BC9469305815BCE4900C957D7F
C66A801D6CFEB35ABADBF8FF5B36958EEF8C6777057D96CFB8D2A6FBC7385650
16E126795B4815AA6C89CC8DF9E70470253B261DCCAACDAD46C96F5A26B0A901
2CC32F33A3DE147CC1E00ADE39D67A27DFAF2E79627EC89466DEE887EBF5173B
01B4766E2AD2E167824F02383FA71AF76D200D80B4A329AD819EE9F5DC024F21
FEB8C65A3817799AAA5A32A3737C532B8602FBB57CF64D9CDCF2087E4D927532
DD78E9E37FB3DAE116DFA181E014DD113622959B2E9C5C4FEBFB8B285058F0A0
8276F6ACF47144D02E0683AEB792A8E045D37C587DE370867B0D5D4E865ED3E2
3C944F252664C67F78679DFAA7225B725B9371BDE3B60EC51911486B4FD263C1
C973433A17CB87862910C4D04DF593B2611963063E5E4796EB958166DA9B79D6
C03FE62CBC99C0E02D1CC26702E68F7BFD3E67197F2E6FF032704D3F43EE49D7
0EC8D24295F3B8C931D2FA8D2B7542D40779816DF99CD7C90ADE3440C82D48D6
A33EDCF9D0466F068D8A140F10A40688B92FC1DBDCD8EAC8F150DA75AF7721F0
2506758066FB3667FE4176E40BF97C12D90452DF1DF9AA2CA014EAED3889BCA5
C9F9B9E36C5B1F99101E1C975A8BA168049B6EA62FEA4DBF9073AB52A3B20DA6
784156C347164DD26312138F759E13390EB9EE3737B6B117F602C9A6294A8BD9
79D0E18917EE065AE55D2C4D4F12B5B8758C87D68C62C7EE187B919D4C7EB781
5565335CC40D38613F727D5F357A5368A23599557D1C23EE03044C5D5BCF958A
E2DDEDF0B2C6D55FA9C1CC2E453B6249FD58506FFBC9507DDD77014C2920F48F
F996852DD5275F405DAAC5369650A0642A0F81E12341C54D3A6BC195FA1CBA72
97A13EA6683627C2BCFEA672BDD0706C4DF71BA081D97B2B930CE8CD62854D2E
45FB4B4704B18A43FC9DF5E66E8CA74ABCFB9F4A745A14F57068805A98973625
90E3120022F84C48B07CFBE74273D85387DC6CE9ECEA5593E97FD67108C25F12
78CB1E65ED7F447D701B48B81F5DF934E929C119F0F209D795362FB642EBECE2
BA13EAE784C6F00680A54FF14B765D10F4EA9FA98D935827C0F89C97586C37F0
6CE4252636C111D784D82EEE04E9483CF38C1F6ECCDC21BF05C6378F3B986DDD
A740BEBDBD569AA64EFB8443CC7F8A03D617796C8D750304E9FF5D79F20C1CA0
9F202C7CC91AEB7FED0BABD10C081F57E5ECBC053FB4D4E4DEB8DE95405D019A
D56EBFA71D8A8D98B98BEC882C325566C312138AC3B95B42B22848D182C8DA6C
A3C9EA222D0270398288706F7D9513F1BBF8A7B1180F45555634A74681A192E2
E22BAD05261EAF0BDBA792018061602E7FCFA28F83EF3C42357DA0880FA2BC23
D64EF7FEABD61EAD6A46E3D51E3B1B4E12B61BB4DAA4B1C2B92F34A1B1E1BE85
0CEBBE8163C96145150065FDEA0E851A35D82BB9F6E394003C96C3C084F337D2
F49DEF0091DF799F3350AE5DDB7450C0CAD866153CADAC8B11FFFDCE7F3FE6F3
845521A1174FDA78A1CA1FE7C27C18409596D179901EEAE3DA1542E0A4C0637E
8B01B6B1E19224F49D399B8341AAE6DE18E3262F9391A0ED0E7C9A759ADB7708
BA175E814DDECD64A2F09D9BEACA10F2D9EE43919C470B3DAC800159B49D9E2A
FAFB841E69D37986D8863CBF50D220ACEA60975E6BFD5CDB09CE5772704EC7A9
D64EB5B16883692C47680AA5D521982474F4FBADC490DC7BEF54369232C06001
ABD2C65921BC35365B3E0D58649AC22991D32CB08E341A3D57269F29D1456B37
551FD0DE95A0F1C4E9B98EBBFC7D6FC3EB33C3702DA3BACF1E5FFBE99744BD24
30D369351F88815331E8858BFE5858965DF283AE12FC1B8D0EE32743A15F8A93
39219D4EF81870CD52997E1DA1EFB315AA5C6FBD69F2693EBDBD75923DF93D1F
FF71113FC2A8EB8587CAB53EAF8BCDFAFE770FD2E543F3F5438B1646E70C1196
52606D4FB4310932ED237870D61E78B3D6C8D6FFCB26ED9010DE307BF1FD0CF7
EBD86D100A22B78964AF7A26FBF153842E2E1DB7DBB662927CFAA66508B79B2D
5C673D32BFE6CA8A0C169E3FCCD9AE74930032A79A6BAE9443A79677022409B7
B1AC6BD6B24B277AF553DBD5723A65B624B3E061A936C9CA33831ECE0B1E76BD
EF2E00B8DE7E2DD7A004C02B5168A351AD7A4B59B724BD65916C981586CB9ED5
85EFDFB098DABA1A7B37EDF11C58DFBBD0D87A416BC082632679BD0DAFDE5585
BCB265139170DC8FB4294B006D7B9AB8D75E1570AB1D7C6F28C8D0D17C59E652
2F898C8DFB8BB0E0798A8BA38411ECCB0F5CDCA43ED2B411C9AB9C1EF7C643D2
84AD3FFE52479E79DB080E9B6A3F3EB3E3186E61A7363A6ABD15CEF1E74276D6
661C8C6F43FE6CA806D859A2C3C8FD5D1DB151C504570286AF49C6116AEC55F4
A683ED47A5946B07F3BAAF552859C494A4B8C413AE937D89AF8F821BFBA4CC1A
AE7D610BCE9FB544638888E512ED42B9DD876218D063E6462EF26FD06E23FF83
68CC9599AEBC95C46645ECA91797E6B0FF051C6501D5EC188B06A3EC050B61DB
12A5A5B77506219C62DCAFC235CBF69C99E171AC8A5ED11120B9133745E18996
70DC72EB5AF530BBACF2CCB8A7D344F990D88127B4C4AD48A2E4BA5C8A2100DD
325CD55B00736D33617426738914004B3130511624269F66191D4FDD21F48290
94FCC8B31EF4E7926ACA9DC3AFB9C0229B500C5B7758C6E4E3A0827F708E16F2
EED84DCF21DF4EE16527CFCC0C3A57591AC2366302A4276ECDEB48C3E3EF115A
9737F881DDFE353B4D11DFA2FF25A526C6722D518FA881C188C4AF030D3D8ABD
5F8FCC90B8400517DBAFCB55BA91590E0EF755C12535B1C0FBE462E147844714
E15FB74E4849AB6CC49600EC3F76BC5EC168342E16F431DF3C6A7F5ED1F9FFC6
8F7FB9A4DDC81246376F4CA934290DF99984F2B95AECFFD6122F646AD86956AD
65C7A0F972EDA1F1725B7825D2848D2EC0B840F5E20C8804637C27A6DDE099F0
AFB31AA2FF958AE17E8C70C93215189E7D53064D95ADD723779B378501455DA4
4A20C66E1E7122697E62E4081D5F30F3C9C2BAE90845475BD98D83551CBD5751
65D4860210CD2A532D6B17FC846017DDF49592E8554607CD3CE27994012842AC
48910515EA49F3ABCD64C38473DF19B57A5608992A57F662C9C6C6630EDC5800
4134D63CF46DACBBB728563F941A03315D61B0C4A367B561339AE1E38AF2F878
A4E38196D0094D74D5092240488C7043D1F9A6800D4EC4FE4125774CAC70D9AA
A1868410F72D92D497FCBE91A9397B32DC59C18E6160DA59C9538E1902D03B12
2C2707EAAD64FBFB95A7D0257911DE1E389CB89D6F9E5E6CD32735177752DAC5
EB849CE52FF469F234B169914C2A19E7E23A301E19C025E1A22B1F647C21D91B
883142710DE7B71FA9805E7AC3D9E6865D67E1F9055F3380DDFF1172C80817C8
1EB91E7AA056392610918E369E67BCFB91D2855C1D366F07CFF3950EE828851F
814F66A4102E021741461624918B940AAA49C8C9B1D57FD1FB32F6A3569044D4
1BD71F8729C450DE1A15F2B4B33A68215357E57CD8F73644FC739E65121B53C8
3E7B9A1A5E9370286731E4F07D263496EBD6E1643F070730D8E7EA9D8252B2F4
6C6ADD5125CDF74583DD98051F00350A5029E94CB8D2D658C429EC7A00811010
BCCB911EC038376DC9736A3A5009F8AF4A34F64087ED6F63D6803874807993AB
1C425F3CB9FEAACD1CE8DBF69138A2087B61FD69F81D4E09F37D9FD41D647ECC
5F14021486C463A1EE8ED948BEA12041F7030D2A06C44FD1B538123FA9834E4D
B1A12A2834847BA94962EB3F77F103DFAA1A5270B0739412659725A1141C337F
950824CCB2B4503191F52BBF703C0CDD409E5B4B2198CEA897BB8D9375EE8C94
8F55704ECB75D43DB5CAA9AEEEED8AB079C63C4FE8CB57E24E49F94BB7189CCE
3D47F08D0FEFB20581F0CA160B8537E1E7436FBE5D62D48C70396ED8A1393001
E4FFBB3732E514A38A2C26D60E37548AE7743053B02ADC5A9E7E81068DD7D6E9
BA3BD3B736A12C82A64066B00AD4D954282A55B106FCA0EA4DA15F0FE86F806F
1671DC10B456FC5E8E14E22689D398B95287CDD6D76B126910E6B3539B9ACF4C
51DD59738EA7A1DC74D0311D3A273FAAC4DDBC9CEBF93ADA7CC86EDA8D75A982
B8C958779284EACDE200905E767530464F17C7E38B333C7F64623609A43319BF
4709D642B23BC007F5312561A21D429BE452A34ABFA791A352BE082F5664EA9F
907BE8BFBB87B700F1C779E913160A58282A299B8ED5DD6686814543FF4C33F1
FFF5A792A9F6FC3AB687C7420541ECD617BCF4B6AECABE128184C7AB1FCD67C6
CFB9A22752DE695550F4F7A1482EE312B5F73CDC4331A9A9B7F6F53AC268DFCB
F94CA8AA45EFF92E2DB46C589E8BC97D736A3E996ED314ADCB543B73CA774D85
B9A23B087DBB19297616419C5B265A12C7FC18FDD73E045941ABA3802CA8F8AC
D324F255519FE4D8E47122B4C4DCA0E905D22059CF4EF37B0349DBFE5F743FFD
A8A8C3C798B265D5A302F2406254E8263B96774244853EB242128B907F82CA9C
A946E84E83936A387A010819684DACF8B6075996F8CD29074B8FD2738806F114
6863A5DEDAA952BA4B4DCC83B9BBEC08EA9700B70A915837A3B800C67E16E44E
489E4835D4DCB1964EB2F17EA48682307C565E1EF1C37C82CD4F44A84198F450
747516341063AB782E3223B91075DD808C5D791CA86FD06C73BE8E8B83CAFBB6
5DD5BEB59117288E33144DCC274E12DD36CF48AB206A058B28F2BF8BCC44C1C6
CDE0641D676CD122C0865AA806F322C4F1ABC8CE1843BBCC7A52636721765DF2
999A90603F1C2834506D470893B4E23E8846D0EBACAFA882B9AC7E77DDDF4018
EE6E0286CE703040916E8A5F1EC101661FA2C6B1CC9E11F2BAA4D1DD88DE5EEF
09452A7999DC2046ED2685C45B0AE2887F9FA0754B2D0AB5E36C2FA5A4EEE7C0
F4CADB3E3F7C7F5F9298B68B1E1C0E89E8C4621D16846C899D5A09B0CAA834BE
6582C3F81AADEF9B66291AC8AB317A9A64E31424634288FE9C5D5EEEC5E659C5
7BACC6348E7E59BBC6F426AC06727F838C46CA06D7E62802B8BCE2D39F9B2E10
A5DEFF049EC603F4511FD25A5CE49F5B66B49BF7C74E00F97E97D2CB5C49EB6E
F863A8103D6614DFEDEA2AB4D75AD98C64950DC5A7D03AD5174BC006B6C90878
C66ADD79881E0A4EA4B03D8E9D969D99B78EF5CB60A0B62AAFD71DDD7E7E929E
57450B9765F71037620E73A800031032A8E5E8EE4806567155154AD30303483A
20ECCA641663DB68862CDFBA97A8CCE03863D681937CCD8C45F5DF610DBA35BE
10A4F3ED9979DFC44E97DF76A4A6CC320AA4307FCAD7A6FE78063DA2B21422DE
F36EE30695E48A7E55B42AD72AA79979C8E7C3B88AF70F6E30843A1F1739DB88
9854F6CB60131E50759D7339C019EB71AA518F603FD1B6FDFEF441264B84B7DA
462B7F01DAD238663AEF3ABB186A721750FBA919458CCDED36387162F866FBE1
027AE0B8658438FCF8572FD0F22989718F28F55E8000AD7FA9FA045C41D5986E
B0A40B5CDD90199C5DD0924D2495B1A38D641E848C586A2D703D5A7B9AC19F85
68FA6D9E2897EFBA427EABCC275FDC6F28894384C48FDD4D13338FB6683F9BDC
4D8C1F05B2016D2A9117340CAA1B797AD74C7D14E36616BDE8148E53097AF1F3
0946E551364122199525D77F9DF706FA9062ADBFC4D14CBFE8D3A82A97CB2FFC
E88AEAF1261390F8981D4EE46C1FDF53752834D0BD8669A02151A650632A8171
CBAC1D41B43C68C5306E79063C21B95EB1B9971F2E3ABDC4C0C81C994DE768C8
69B0BBEF2876075B3BEDE2CC49E24160D119F21D7FDD45D01D566944AFF213A3
C53E9071E7DEA09C2B22244FD507138338D188244FA98D9BF0A92113C51CFC81
8418D0A185DF4DDD6F895D9FC9D4EEDFE9BAF3033DF3CAD255BFF140633F3930
60892D538EBCDDCCEE543713BF89B36FEE919899A88E1A770A9E9BAC23ADBF1A
35FBCB962C4EA67DDFDE682DB00F9D6C6A22C1A0F1767915D3550B3DA5FEC96E
C0E3E11D2405E3DC0D87D7623D9773DA8844EB5425521407389C627A6862168F
9159B2A280439AF75932BBF6A5C4C1378000EC78D0D952C1204D23A4632FC3A7
4FA41CDA99BE024EC02974846598A7B75209AA484A5E91DEDB475AD036C6DC5E
B0C03DF892BF958EC3550FE056156172131FC7BDA5A03B58EA9F808591F54E3E
A13D098053748FF1ADF4B2576FE288857D5BB6FE207BD328A97C303CE3198F3B
51C1A30F351FED70B3DC135B4F6BB3829404CB1B2376424D044A8256F3C8A4C3
D5CDA74D632BB23F86EAE1B0295DB72601D24225DAD22F855D6049A58F873200
6D7503651BD4B7B02474C876DE136AA6B0EECCCBC6E8B64DE2FDDA5D757A13EF
A20BF5CAD8E57393A10C91D04EF7C91F971BBF6F85FB8223624B510DCE91DEF8
E61760E4CC4A71CE34FB84E5EDA98DDAB4FF27E007E9399B9476EF2221C1EAB4
6C8A87C7D5D4860AC5489C2FBC1FA4E8519EE6548CB861C8D7F359E2202A5DBF
629285DCB8CF9F86EDBB14B9A134988C3E857FC8C126E40FE410BD667BEB0A2B
421DD8A51DD114BFDFD463FF65FA474D01EA2FF8FD0FCC210D641D946353575D
59461F97934077F4ADF5860D153C7943F254E06ACBEB75E343C61835C3F4E264
E8D652C3178E92971FDBB75BC2AAD81D26CC73311ABB8E249A9061C5D58A8D05
B17FC7427C983CECDC427B22C4DA4B4BFF0E3F7BF6B34211A60D0DCB1A3E6101
36D6E1579FB0B99D6577DF1B895ECC2E225DCA03E64D433AC9D55D8FC586FB0C
8CAC688BA09F5113894B291390F8981D4EE46C1FDF53752834D0BD816631A1A2
7AC24AADF1CDE71BCC60DCB16451647F586144609B48899126B167FF2072DA5E
63E1C13E92EE9A7F78CA2CE534576ECF687C17FD83CD1620B34865B11C8E2CE1
F2560B3B524F29AE3F9AF5652F13F9D164A307CE156B7A27D77987E5F7F0AC05
7A795976B7A9FD890CCBE995DBA855CCF9A28F677979A15640D0E745DA25A3A6
05322D08EF50C9B12A33950EA03DD01C0CC75D5CA84DFDD17B076A69A5BB5EB0
6FD2B75AC1987B727E6E7B9E427E0FF737B77BE4B9E849F1D42A1465C24DAFD1
082D93A895F9E3481F20137FAA0B7567E0272C969642064EB09CFABCD973B102
52DC8E088F71D70B24149461BEAB0653CE7ACACA59BACB88FA98D8B3FB555CB1
0B2B4D6FBCC56FACC20ECA67BD81AC5BD40ADB6AEB372D926893DABBA2DC6768
463303761896C5CF5771345A9C205BE834D2F522D521BA86CF4F9348EA4A5AA0
16E4ED2CA3F4B4CB2AD7AAC870EA8045A77EDA68900F4BFCBF21F6D15E33681F
DC9535CCD895604C40BA73A8F873B229FAC5B0450B5262F936F15572594AD377
CE0D9202E197FC75D39872A0240E51B650320EB2BFDCA861BF0151A1ED8249B9
1D2C8DDE8808DC922FBED4F94FE49434D575CF2EB8BA6D03BF5EC2AB2CFDC3F5
E858F4CFF207E67AF587343AB6AB3570FF584FFF875DAB05D7CB2A1E10C8A191
13B89923AB0236098AA5EE70B30F061D1C964540667B6A874E53A0AA80B7CC9E
F5096B43AA0F84484E22408BA5D2BDB31A8646DEB0484688E8578F6F67F5B37D
D15068CB9F4DBFB35A7C81F3B712D270EA0209E3747D35FB85DE49392602A5B8
1A326622C31D8B7BCB9D118484E38A6BEEC50E0704F27927A854234631EBAD13
E5EDCD8F47DDDB8C1FD5D6A3AA4917F1B08B0F8CB4E904FE48D9F3EF243AB2A1
A92E667EEBB4A542F69C67CE5BB5D65461B684A0B34823148B083F689451BE6D
0131B866B55FF14FCB6BACD22A504DCD40BEA70F6073CE5AC93E95972854F54A
50CF406D5AD8AAFD99A8308E35342DF7E95C561060A015960B4579F105F36526
48CEC896295143A2525888557F699217E7CE3B38F9072EB86D70EAEFF2DCF007
883830AA7AC5DFE1197F5F7B0AD6FAA5A61E4B12AF7FE31ED04F892C0D6FCFE4
C05C80C49034C4AFF94FC1AA6E2C27A177C26407681061673B3D986458BCA02A
30BD76B5E4C68B7468310055C8DD6808D193EB2246872CE5AE0B8C45A1D4BF40
85BFC3FDB6040A19FB38556204452B9D1D14EE325C459CA68F6299B5F77C003B
B248F3EA2D00384AF0BF4CD93AFE8103924422E99D9CDD7E39590DC25FA98B2F
04D5E9DE09FFC37A5CFEF09D1E9910A33BCC14C6695AFA048376D604F360F305
808CEB9BD6E81E649690206F3D3E9BA2CE2E2D1935DC9681626B49491E52865C
4E88203D4EFE0E85508443B1E4E200BDC0C8F32CAF4ECA0423E5B040CF17CC75
77BCF19EEB04C15EB94BA1AD3A9B7E5E104D14E1A3C12E158D43B0CD95E2E3A2
5C96BEE46169F5A89E970A4B58083F708A739538A385DA5108B894995C63BEB7
A098438D8C7E4A6144D032235A2F7136BDF8CE3C652ED9FC5B5946C642094F6F
34949DF8708276845A674FB087FE60311463595C540619D87B42415212E7FF4E
52908EE84C87C4F995455BDCA0B0676FFB1955A35FFF59DC31336087F5177A19
0740B25AB7870E6A99EF2D8DEC992FBAEE5881832B010A4F79DAD8D22F960F9C
8C5FFEA20B74ACBFDFFDACB119BEF16FC59B70F6CFAFAC9441C4113D206195F8
F769B5CD39E925B9409390DEC7E8FFA87B63BB57279B0CEED22E1E882CF45D52
E24C33BAD4AED1D6B5C1391E550C396F9C39E4FE33352421E79A5C0C5B98C416
0932D9BEB212690C53E8DD69A2EC5EF29F3136B0164AB17269EF51EFC4332560
07C9CFE5D9526FD1038ABE50972818BF8C87AB103411F1F3CC94F47A0305AA8E
5986E33134AB00846DE65F2A66FC16A1D6ED27DF905F4E24DACAC857EF9039F0
8B2F2F1B0D494615745D29F8B04E98EE2D8B349142CD1675A9D08FB7C4BD00CA
3DA85D543970D8FEC4EF92A62E22B9F56B73CBB8D9D3BA53873F7E4A94CDC707
080D21D8E9A9EE0E24A9317CCF8666F2D223D4C3AB3ED6C5B3DE51C3D14A1FF7
6CDB4D8B24B7C65A4EB217EAD51092859961557760BCC97985BB6DF74BDA7294
58327663958266F244637C222264DE7FE218F25718B7158FD086632F3CA5FE78
F713C6DF5182E14D08DBF9FEF6FDDC952D0E56C971A6BCD0F27FBE6560D1743C
CBAD13C99762F0A69A7997E2E16AF5B972F2AEDEC124A1665DF088074933F8A0
7134AB03B5E47F691C2A8699E0D111D9EAC9712A801B9767E717AECCC1C6FF59
82413685036A26B22C5C6050F61800C9F578302026F8540991F5239AA639312E
6DF18600E51B9CB417AF245EE894F413C4914BBE06F15177732EA7B131241AC4
0D05825F52CAEB87491AFC80B110A58FAB7C1F64920BE37418F9ED222319D183
549395CED7A72EDD3BC0CEC5B24B93A227163BF69045F425B1060680505B3B45
6859897B5003F6C8964057FBE2F2280688A88612C8289C20CA270D52DAA835C2
F5AD4A686AD6A38A55416E7F381F36DFEB6612EF33A54D23AEE7AA880BE6932C
FE350B52AFCDFDAC149C393965C96C412DD0BCB57024A856F807519839247F08
76288C473432926137956FB033A7F238F8C49C628C86531E9DFD740656164606
5F5C444B880F42F3E62EC84725604B266B8FDEAD8C8BA29378369568AB99EEF1
B534EA17AD9E9E98B453A722C03C39D4568FAB51CCDAEA29F79A42B6D0D4759B
7A8881494CC9A9F80C2E2EF697F9E39BA6925BCE4FE4A96A8CFF54DB2D879666
83F4B774DEA6FA789C22EAB3F99BE21A73FA3B39C4C18EE58D80CB40CEFD7D94
344FC86EC15CFA7AF146B60F049863F6ADB336AA7AC5DFE1197F5F7B0AD6FAA5
A61E4B1530E7FB92D4190038370FE36D559E4FAEEEF45762E6E084CDAA2C5668
DE61906A2CCD590BCBAE6FD4FC37D986A7F024D41FDD14AA81D206694FA054BA
90DE0A89E9FF521C76D11DE8AB7FB492BD8EF5326433B4A44AC83C4DDBCD7D4C
41EA1754A222802E54162EED9741D125DFADA5479EAF437FC309E1619AB8551D
2933679DA65C070D9E7087C2755D41C6192EBE61EFAE64E46D92E591477BA09F
962CEA1EA7D8BBEE9CCB2A4C2368742BA0A7F2C8164F47445FBFD52385E21CAC
1DA7735C1F44C5D8942CB35E644950CBD5B5325C879B537E40FEFD471705DC3D
88A01FDE8D59DBA439F9EB9B0554E3BF9FB0EBF59B3B0D75F7809F3C7774D003
20A7643561F33155EC75D01D95F1A65B6C1BE4A61E58B3394A90526295892F8A
B22461C191F00D8FFB4C847A314798EED75750490C6B5F51CFE107F02AEFF2F4
F4C41F743CA20211FAA834A508614C4541CE81A539F8903896F4B89CDDA14C39
DC5B57A0261EB63108D6E9D475DA3AD50A63CF97A7022E1CABD518987FC8D48E
7731183FAAA37E13B1B3B900A38CC0ED508E2D24AEB1F11C0CE49E096B415A10
5141180444CA017D4E940C1052A4555178CE0C400A19C629D91ED739C76FA313
A28A9AB35B4D79A5A1DEBD761A1AD6989DFAFC8C084FFE34910ECD3FAB2C3F50
192D2E01AEBF584B17DF10E57A821D802704BFB6A13FB6FA40C68FC2110BB014
AA5B8383F6AD98DFD7488D907B0F6F8A87C7D5D4860AC5489C2FBC1FA4E857B1
F48014F04FBA8729D40CEBA3FA90A30AEB2FAED954943CEFBCE832F6E57CD482
A248FE377BF8A062C506DE9DBE039CD4FDFA8388DACF0F61684872862891F2C5
3A0CEFB9EC02B5DBBC40C64D393DBC37E2D9B21906B6E84807F570876D57CED1
DFAAE72FD4653F41FCC2EF5E6CA4FD5E904CCAD9D8D10353655C34FC4B8630E3
6F949D9A92E4960AACC2011E842D6C93775F34F80EAD8A2BD4C29C79E4F150DC
DC706EFAE0900E12C339FCEBDCBE9300AA28279A2B964A7DBA053BE81A8B7C9A
7468FBFECC6C3C93B3548560082FF8490D834DA175A719D2F721FD88D1FF50F0
4EF8E9AB73CAB5CDC476C2DB3D8C5F32233104A9F80E163B9466543B781BE633
B28D3530DC45094D687FEFDEA40A6420B76739F372C3103DA920D1A1F5456163
87F7C38C478CCC9629A41DD509E1A6239065040686AF267A3C899BB19AA4AAFB
1402AB305900B5E6FB4570C6991D14C9895464AEFC07466739292F125A94F743
17ACAE809C3C38CCB5E306B060F9DB899852D635506D3978D7EEE8628075CD3F
E42F4A9F6190D2CE0DAB0C6388F7C490FA1DF609553A2900B5F1EF5A70550C79
F11655524F10C01D890EE2689F23577393A7B97207724374CF283D0FEE36BBF1
964D948B0960C2BB667FFD626714F5D76BB4926455615B62AEF4154AA985454E
2578A3AE0266DFDF2EA2A03654F2008690CBDC3D262809EF16D453936827B714
DFAF70088E031576512167F1EFCE9A8C95E447FD020938E02C18395D64F939A9
F2F0D06E980982897685656AA91CD3C9BE13E5A76B8F1EF3BF09F285EEFDACC8
A1E9B032209296003CE197AD689B3DC579B331735C720E35A950282D194447ED
73AF6C4EE9A520CCBDCC387BE1304D3B4D3A16CEB6704146D565635940C3FA85
1C9AE4BA1B9E09386C43064DAC1AE364131128C98CD7E3DBC3E18B3CF8515D71
91E0DB70C69E5A25A667FB83540C6B36493C692BA5F4EDED8B840CBDAF1B2210
9EB1CC015C6B23A35BA37BF4193E58554B21629C02D84BD2C3E9476FB0F676D6
D9C25DE7DA06C1C044DFB30D87A3BF218A6635F4152B0BC731808E558B09D460
5C45B517E9BB53B8B6D57D9200B21AA2A22941B1A3B21AC79AEC4D3F80627C11
9AA2C480AD837EEEC59FE47A5AE94213438A77D29CA666C46C7A1EDEFDA47892
FE18726D87607CD598BCC5FADD92F6F77C1370C8BFE081832EFAB5813E8FEE71
36A3C1900ACAE921193825D5A6527C369CEF3C61C99C251F4C61166C1564EF88
E75FB23E360A82A30ADE8C4E9ECEBA2EC06F3F0B743B56F980A469B6175A46AE
3A1595A412F97E0A9BDBA6C9E83ACA017EED251FA8EDFCF13A59086E9D65A26E
EB2A08F0000765FEC6495FE0306536BFEC998452E49EC8F17F0895E2B54F8C67
107305F5FEF70CA241D0CDEF4032A95BAF3222D5F968D86FC7A693AE4E6C759E
C32E5962B2E2367860FB22F3F2F1BECFDC5A631FFE60137D0EDB40AB4B09780F
2D9BFB5FEBD71023F61246397B4819830D4357078351824E55553C848088BF73
0669D197098DBA0F12246717F858E6348AB11EE503BA4B81D9EA570439B5261B
EA38923F1CF13B14B69236DA089BD054F7112E2D44B3F8CC8AAFE98B38494864
B3BEFEA90D79785E058B61290D59655B742855BA6D3AFF1597B4F6A6861E46E0
24CE46DBF9E8470F29992F951C2098256868B4635B5B0E8ACEDE7108DA070AC5
F9A9A99551478DD4DB5D3936B35F448E3348A349847AB61C7A9F986BB0CAFA62
9EE9683652DAB14D19C567513C339EF9578FBA89B6C81ABFB5DDD864A7C0C3DD
A491E2336382C5C7045535E44A62B8CF66A11A2C7BB9C05E8C9FDC96111549E9
1FBD381B8D7B52EE6ED6B96C4AA9861BFED94E359EB04854D6538F62021AAAF5
787B9868A181DC21E0347711F423BA87244A45B281707484FABEDAE378D9CBBD
F56D12BA387D89E0ABAB79565C26E2BA5409749BA37106D82ACB00A971C8A77F
F81E60499396A13B7E9A88304BFEB46D953B78679A23C0BD615BDCBF3B5BA488
75ACDE05AC83013B6D49888921E45608CAC270F103DFAA1A5270B07394126597
25A11185E6741499517D15D174B178494432E4D68E44BD8CAC41419555F92E08
EE7C8370B7ADBF5181A8316BD7314EBC0C090F324FA5E2D3B5EC5B54AEFA167E
123318FDA392ECE3E3A3C44EE1D7DD1DC5B6E4A0B8E70B28F80FBB4E26584756
E130B30845DE7F9B0D7A5E03B4F41A67245576F263D44A4542676EA145D5DF35
0642F386F8D76D82B93956C032CD7D3C7C2D0ACF9BEDA4BF69AD7F8906566AD7
6F219F2CE9DBCD4C982DB75204C9F8B90F0FFE55C2DC50BB26C5EF669753D6EC
627B4EB802422BD86DC23ED90343F81C9BA5086C7C62A81FAFC0B9C19AEDA9AF
796B9F4485A035E61015488CD8F5402A0B15A517033EA6384CF28896B009B329
03EC60552DCBEDEF4366F1E5E72A5E71386B9E2B22D9F3F7695CE74A1FBCBA02
2552B8DD8FB3F54324112DC66E4F7A66EC82A85DD7C673D147B2124CE24D677F
A60B2B187AAF612914E7E076D2BC989667BE5253ADC946CC68B0C0BABE3DACE2
F7F3E24776985E7B9D0117B9F575D74FDC16F7C12380AC1F7C1C7138018CE750
6F1C674C000D6A4AE76C74B5C24D429B41F280A931F7977848C2CFDFC77C8DBC
0A3CD23813D91746FA73C30FD30332D05E6A69172D453035AA0C34F15C412F4C
C3005866C436EA0518362AEFD03F8A8A2F687C9C0E2406E4D5FC1A12A17F3471
BF9F21B73A951B872ED787F3B7C582985C5AF067EE324383EF075AA95DCF958A
E2DDEDF0B2C6D55FA9C1CC2E403047F280F6F4AB30566ECD1C873E88DFF88CBC
A526A2FAF0601684615541A927BC72A59F525E0E71D8FB80654CCA0877B280AC
94BA5CEFB3513693FCA3D395A3085527E79C94D7A66F674B30E4561B10DFF20A
A1870924A2AA4F23CBB558223BD6C2D96A0C5214005D2344003BD4194F04C509
BAAC8E98773094EA1957ECD7CC94A17D8FC53F00CC9311EBF8EC8BBA89DB9ACF
F0C6AA22C18B932B1104BEC1B29F017A0C5238178351349B828EE8E5A2289125
0B25C05EE3D6A9CA1A93C51C6E4B796D7EBF1AD94EA96F647073AF9B3960F98A
4F749DB315F9E1AC111DD510698A702E9C34D543F6CFD5C18D61D0830296F567
E4D9600FDF993CEB7ED4945B892B93C6600F22E2F4CD3FCB480254C3AA322643
3159BD59249552FF9A88ACE76E397A04E860E640F2B8B0677DAABAB61AD24C15
0F56F40AD8EBFE52A293460051DA59D2D38B42398C0478B42E778F947D6F5248
1694A489862A994DD3361E6D6E687A2E3D641BF81CEFFD7A8E3536B6F4B2020B
D7B74DB62ACE5B6A217EA3F002802820530D2E7F7625522120C705CF74E52DB1
8DC8FCB26B3F8299146975A0A58FA9F717F9D0612D479F012D4C70BFB3A459F4
0A86BC6FC5280D1E09E891522403F770EF3E57F30CE1B9E4400F08AF01513D84
6852B6DDF89A5C8FCDBC73818015D417881B909928DDC8F131D90DC422ECAA97
CA287AA1DC2859FA492DA4FA01BC4248B4DD0A8501455828752D4AF4B9938637
02E1412C2BC6BC6BA15FB815CEF1E74276D6661C8C6F43FE6CA80341E1427461
984D77904696E8B740656A07D34A9AC7DA0A77B9FE47B32F16617538D36F210B
27B3065EA1B15EA74FF2A0E641F24768FB5D4A67842DDA6AC4D3AF190E84241D
F4099670F3E8FB440DDC599F5D46F2B5CE2BDD85121265E1DC8EDFA151D3333F
282E4770738E2C698F33D6A3C41958B7BF321CA77D242648DB55323E27AF51E1
2DF5AA8FFF98D118E253969DBE30B54AD5032BA85036B11511FC5462B02F610A
47BE5FD984C7922FD97A6EEFEE6584DD6BD5BEB1F3C77F936ACF5A2EE7EA03B5
F1F847C34CD5DC430436E9C815EA54E08AF58FA06A37B17D6A6026A1F3994106
1598C8404449960F24C43B8E7D0AEB4E770E9DED1AB12440C31DA97B354C30D9
7EB2302BEAF96443A85CB0A939E1FB405D3B523314368C4447A17316E9B34804
C604E50B3D261DED65833D93B3ADD6F48360371D61A02E73CC011F38E34B0987
7D9543483425DECB077CA8D8D0B82FB912F3A42AC118EF03DD0198C81841E2DE
908DBDADAC9696CF3EA85BD19DB89CA91F15452DDE13F44740B9B386E28E166B
B0216326BA827B7B74CA2A9B790591D15DDE7AE487F8CE703C576FB45C2B8B46
88D271061170A1A5CF42917068921F2D5D46BAE105507835239CD821DFCCAA2B
8BE5561A3490DC202F488BA00D70F187B0D2CE4567EF7B00886ED9D52A21096F
E1BD08F8D3AAB829FFE2307DBE7FF107E4C46356C54A472B7E804EC49CCEF57A
08E04B407CD7905B58685A8AE8C38AA279C7F00D978BCA5AC8DE31E4E520360D
CB5829CB45EB3ECA8BDC5A66759C0D690C59A7647D79F8509C5DC5D8312D21D5
0960715A4D51FFDE2F4865255A08CF75C62FCA59AEA7EA2DAF74678F6F32BA39
8BEB8DAF97354C69D3BD7D3DBFF4EE7F0A6B8AE3744302539F005B4FDB78466E
FF0BB3F314366B9FE79815DFA2659CF5DBE572B6B9EDA26B1BA02C9E123EC291
E0064860F39BD14D89E6A505203436103DD7A69D28458373C24477C5773EAEA9
353D7BE0E46D69A9E54E419D7912A758917F06EE76CFF1063E50BE9FA45F362B
0453EEC61DC3050B87A7F448D78E93DA8A64E12082909FE635AABB7D3A3EDBE3
28C4E1B8974BE5945F8A7EC1F7A81906803F8BC116B6D67AE8B863082FDC6648
6CB43C1787B70749F67156972835AE1547CF3FCB3A72974BB653BD23C83FE188
E64EC7ACB01966717BBB20505DF922C8A8E5A787DE997CE19D34A6587AEF9A45
A87DC222E362B91AAA50A2E88484D70391DEC66F7910A80856B8F504547AEE5A
A583238AB16221F9B2711285B001D05E800E9E1B793A54DBF753756CDC37D853
3389D85362B065D684C3BA99E260252AA2E7CD05C6938E0E332E065FC835F845
4580C4757234F3EE47CC80B05529FA390F439933FE6AB88EB539210D6E71730E
C8ECC634BB80A6425EBE53F96D654D6B5C5A5D0E1D30B784435B7EDA60795899
D272B05B8D5CC705E91644DB1EA96C82A28E4CC7140A5DC56BEE34291027EBAA
A5F4A3F70D7DF08890CCB66011C6813D4C5EE9733982FA5E9002C4FDB5205E26
6D3F7772680706305A907C2D0CE542D6F0FD8C3F73B9728D389539F5AC4A8CCE
6E44A4AC7A720440192913D90BAD865B291D4C286AAC333473EDB9FF53217D38
DFD17B38A71E20F6891A4FF98E1B7EB6A637C39924D85E739B239F1D9519FD8E
A68BEFA9519370DFA82577AB9233338AC7A2FA840FF28C07DFBAD35C824CA294
86FC365FA4678F1DA4E426F82E0F36283EB997E3826A2B82E0D180777B8E3825
F5CE6D50AFEA70FCA89D376C3F075D96AAACA6C816C747568E8A443E7280D326
32B2B0B608259CC88561A56C0888FBDBD7F91548F44CF99EE1E646A70C09C9E0
6EA26B2C4509D80A1BED14BB65777743AD2DDF5FA0E5F1E246CB946401926ED3
3318CAEEF87A23BD5E0AA169447091D9D01C2681CFD76179541D92C77CE22E18
AC24D4147E2ACD6644BFA37B7BFFE4BE8A42473C9F117B4D1879F4519224018E
884060FF89BA2A9E1A5E09CF7566A0F166BD693295286B0C5DBD99C948D1BA05
4D289504F8A1604E2276DA7E29BD1CC979729060A04C88FD7EE21BE265B61860
4FE6164C275CB26047D7CF06FE08AEB33B4CC3179532594E2736306D82A887EF
4B2B233F63BC0B495B5175112CDD809A78FBB5D8E95EF27EFFBECA26290D60FB
28D7D835AD3B9FA2F91DD50FFDF5483993F6C6B0F3E4A596E8D593DA1DD02B1D
1613775433850E618ADBD9BDF0B3130321B658D01D4F691D128061C173C62D17
385A5DC658392E9D79C538EE56D45ADBA2ABA64B40BB4E05D1B9CAF659F0A1D1
A64A289584AC94EE9E3B0CDC2F2C8CF8BC76B5E984832D7946D67A12AA866086
8049AFD2C6EF8F0185FCE7E09A0B9F18F01A8F3E17FA8650F44A528D29C32EA4
9B9DA7471032F2AEC81B0B21D88DF40F5A972DE89ED911D3F64DFA5237819CF7
69EC2C322580AFFD41A9EE233D8234369276C0308838BE235E25DA3D226C5CFE
9A23AD79BC8009820A9D7383C10F6D9765870B2C80B41E2AF91D2D707E6F5C40
9DD2663C56DEEA32AC8E59510EFBC3E7739FF065553A7E54DA411B6C3FC50721
A92E2D981B85D53BDEDDD78C926929B70042113C9B602A298D6CFD4A20138D63
3A78A92E5E877362B82070BB92BA284EC86D5315ECE0B2B447A5343B485B00E0
2D7E6F28DD1E6218DB1F1FEFB74814DF61EBAD6C6E057691C8833553A532812A
94637BFA4525390D93BB7D813CE8818625DDAD807D93DF2B52B6D5A1585EE99F
D49D0BF36D048E68BD811E7D3BDC636D920A9FA279AEE4F35071696551AEA781
ED41E6FF549C1799F8F10DDFB6E6AAD4FB183DCC97477F8C211C2BEA543340F4
C5D18E9E2A3A5F30BFA407CF9EFC4D4E3716B8EC002392BB80D58C2839885F6D
5D967323E0EDDBF48E8C5FB99890D4C6A99FF1B95463DDF61A3CAD2E0FC6E867
725197EB621CACB672261524625EDC04141878563940C663147E11172BBC78A8
9DF5158A61AD22F1B2C58143D09A5C5B71DB79F22BBC904201F6BD129EB055DE
5359CF88B77A6480E975D61FA5C589FB7338C2B819BA4E14685ACD85FA4406ED
F888660011F1A2B7CB39ABEED7EF65F72158D703B1359443E2C528A02E13A44A
7BC5F5F49CC767C4ADC987F38F8927A0D302D0219F515B7487E0244766EA80C4
9B5AFA3CF44552E01E15F16DE64139CBDFCA3E9A354C30DA48EDB45E7977B964
F18D2F398B914A5B93E6F043392F6FF0E45616CCAFE56EB0324AB5DB13EC975A
634F9DFA89132B185D5F50174ED7308888CB9C0E8DB60C589A53E22583C9E899
10FB1B21A18EF7B52D3575DA03DEDBC420B07F002EA5001C5F10CD81BDE0D75B
0C7D1B5F0C305CC7017EF7A7C42886C1EBBD183C039BAD15986D2598D11D44EC
C8AB77CF9CCD94A61E6C46F356BFA27C35DA908E4528065DF6A0C378DFB873F1
C78F4B1240A9D57EAAC6E6C9BCAD451B1492EA79D5966ED0B538A69AAF73A919
54000E454840543F4EFD67A22B4929CA5A66C05375DB009435761AFBA562AA96
BBFA15F1FC347103FE5AD10585DB99D9BD29D8BEA92B3D758C2E7D2FB99E6B03
BB06E192A71EEBD3008E70A27C86889647B411DF2A995B7186D6FA63EC0E2818
10D8178CA4DBEE8226B003B8F93CFA53DB00177484BC321B83323115E81B69CE
CFD4BBF953D3B24E6AE36B4BF537CCA2E78EC53B2848E0AFB5D74BFF42EF4677
9CD5372BA57551C602FB1475D388051FBF761B922B5D47A2265703123A34BAEE
BB04C33F489DC8441FBAB5BD7E68C13693EC4D9120FAC119E8B87F7DF228F406
F9770E51EC98062654F04D3D05B4DAFBC6425753A079544C1F44A7675BD1F1DB
D790D61561AE5C0616226B99B1FD1227FCD8D8EE63589387577D67D8FE0847DB
07F0908B6DC9CD42010D766FC97D389016F2D636B626D286F95D97C51628150E
E5155108ACAB6A001374FE99A300E041D441A9B7465300F5C91F25A275F18D5D
97E9EFF0186E817E40CC9ED578C838BBA02506798071F533BBC8CCA2FA32F587
81A04B435841F6312408B853D80A84FD53977F5509AA26E8123D8D5134AAC9F6
D979D7B4B0045B92A32531A1F86620FE5FFC83C48EF8B883201544DC7A395598
9E4E2777A82B9B0ACF4DC2C0874B3575CEF37A8459FF7EE65D583AB5B329346A
5FDEFF59A10DB4CF732C4EBE0E871939D0287304BA460DF4176ABCDC64607118
71D83495B1933696337595E900B6C1467DEE92F791A053937EBC2AEBBFDD58DA
9D4689E5D207751DE0BCAE4963BE8D5BEC4D9570DA13904FF1F6CAB70BC809E0
4A9CCD6FDB0FC6323BD29DC4CAA823A9C0D072AC11022C06231B0EBA3775F42B
D26C88EF4CBD9A5558F4F7D3D2DED749E872EC2B76326140172594A8DAF57749
A925E0B595736C05310A9E6BC3B74D807F7DE678CDCE5E9A6D8CDBCE4FB72BD1
1F17B6187D9C0F005BB0DD7D222D4427DDAF25B2CF72E1EC79A05F9BFCC16F99
AA81B81C00CE15EB4853B5FDEE93FBA2F4F5E5CBE0BD533CAFD211D88EB9335B
0F66D0BF717F234430A8772203F3CE7570D8545004B3C243067F074F06041A2F
CFC8435E609D76198C318CC58AA6206E80EDC589EC743EE446DEA5D0038ACB31
1863ACA97BB5B44E126B9EB8DD33D956647ED5311EC85D79B2381B338259F086
0FC065DD42F6C1CBCA79324F49F170718BDFCF0D19ECA73FB423A2AD043EE638
F42505C3E1A7F959EE2B52D2DF34C8A832AFE23CAF2B2A28C1517A36B5AA4F77
93E20A0A5F8790E85F0231A8779D8BB07974A3830F40005C752827F9AE2CC600
88FAF1ACF00FA9E5F31C303C0EC066C1FE4458F3F470788276652C93F6DBD8BD
A0A0D353C40E14B86E6A370F057BD50D8D7B602E3125D2A68A1C90710FDB471F
8B365C7B0FD1C07C9AA589236F9A5F5E7DD371B5F750F19F31A6EA21B51DE7FA
2080DC663B6844213A610437CFC4AA04ADFB13658CA60BA8F44D80246030A0B1
324B33398E0F106ACFB231A0DDAAA2FB8ABA276DDF1FD3F37663C65374F787EA
F3CFA44B7F53B5A365783E039E1520C550222F4E4FB03607EF918336BAF9EBDF
85E3F4C0518A7E1C6FE01DC6E642C5963A22432C31A5EA1F66EADC34377EC648
ACD8D7FB99F12852FB997A60E059D2135BF68C998647536A02C42031F198BC5B
8163965F143B00A26A6DD9CD5BD012DC48E611472D5D2B4F2D75BD27B64126F9
27CBE82A31AF3F544A85B820741B5EB0B39A6BC253AC94F2E186439FAB51DD48
344E9DD19EC876C6399FEEA61A9CE619E1E0761E13A5BA19D2774C1AA5896BD2
B0CB7E7460D287E65B2DDEFF1A88743AF8E0D2F3DACE44B0B82B6DDD4DCAE4B3
C1923DB3A69C5F2A31A123BE2AC55FFEB2D5FED00396ABFC831632EE8A70D205
D419B26378728CC231836FAD378F7242F1A6635CC0740CD8E687A14CF9484044
02377EFC920F193E641BB0AF6789B96FE48BF1A81BDE6D899C70884398408273
75492BE3CC821786A49FBDEF832CEA4F6843BC35E05C73313978F2D193872E16
DC0A74717A3038F694FB2648B846AA818552B3283C241524AFA38D290BD895D5
6CFC84DC3C58C4C5A7891C25B844B73E58645A82B05135901E2121541D767E3E
92666F3C09FD2F1C016ADDFAD1F91780BFE3367E3991660E11E5AB466B3679D0
A6ACA5A13D4D305D5E42867725EAEABAE6594791CB763A23259D1C3CC226688C
11490826BA8487FFC56F020E4E011141722A0513DB930A456E19DACC83F87176
97E0AB968E857678663886FC65ECA3E18C154449B207C7D7BCE7B51B3DA0C6F6
DC9DFB72F722BAA00E20AADBAA9C8A4EDB0707BDDC64791F73F75BD74E03CA7B
C423D376E2C2165397DBC5B7131DD5F064EFA694BFC4C5F3C5087AE93AC43001
1A66439226B08264533C932A7EFBBEF712E604BBFB2A1C147FB5FC15F6468624
52FBCA6AA9271EB162B5F3E69CD7BA592C27E45FA87477C089BD5495A5A98EA8
93AEA94A33EA97791801084A3246BAFCD57CDCA15A4B38A8EFEFF39A946BE850
7EF8D68902287ED4F47150D3375E4BDA5453F244CAF15D3E1D210EE337F83DCE
399D15C5FCDD1867316EAC9667C0EB2D87AC2BC3B697B345E1D8778A8BB938BB
29CE3937CC35C3715CFF2AC38AEDCC04259AA7BA2AE40C962F06DBF4356F4B8E
49872A700BBA1844F1472F1290E8451D88E691B38C6F6674B9D510E96F6FBBC6
3A77D793FCDD1ED132230D6C539D9956444E02C7B6C54247CF42873A11311635
9FA58D44489D7A0C66979449BF6C65794DE92A76B51D730EBD340EBFE0D23B32
B04DA4ADC6580DBECF492EA9C7115453F992D7BE21CA6934AB31C297B3C79193
9FC9E3F3C8E78C6A13CD716D9167069F360B1A69081CF120457BF26AAA2482EC
149D152624EFB033A07C37A12F60E741D6C45F1FBF4B40B7341777E7598BE81A
846E535DB2BFA009FA739DB818B510A36F4034C6B656F230D58833A559D26FF4
540915B038118443357D23DE860AB45205F5B3FA8A0D0886AB8D1B77EE39A15D
C99272E75D19F2562444FD3C4C8AF340569D8ED4C1B320375342B8752BB89062
CF1AC26DF9F614FCFD89C1FF6B34CFC20CA1B3869A22ACEB907E0B92673AF469
F086F225D847FBAF4E5AF4CB5722D9ADA8C3024017F8445B3640FEE2BE932510
FE68DE8799588EE332ECC321AD65C4DD975C13315C3951A65C5A479D7D8DD713
BA1357618AFDBAC7A28A853C39A0CC441D3D83BB946720129777C73D998407EE
08E0E61EB405766B7B739EAAF078F11C6A5C88A93B0287D13E26C314870AC4D8
9F714582A655314EB2CF355AB4746F0788B420926320B76739F372C3103DA920
D1A1F5456DCF3FE5A3CEC0073601E0BB3EE4F7F6CB934D65C8D6B8BD4F787AD0
A6FFFC0462AC496335A6A869759AB6480F82F90CD02F460E2C2C9005380CD5F4
9C670D1747A32E8C0A77E7F8C20A151424C15B2428B54CEDD266C3CD4D3802C6
13D8E095D7601BD81EDD908928FA612F563ABAB4FEFDC1DECE537EDFDF32AE56
3384C6DB2E8822F8AD14F5BFA0573729137F16704947596FB5F8D06F9451CB4F
458C94BCA7DA81822B93EADAC1D4DA3156166A4489D046C4DDE7B5E58DC0B5EA
705425D2DA4E030C606851DCBF8D864386B8A96F494FCF8D02FF016540C4E099
816FC32BAB374882F75C34B1C0A49363EE67E7D187078CEA50C4F9AA8DE19087
ADEBEA8D1EFD3D0BA370CAFC7CB68B2B95FC64A9C8DD7582AF50C4C93D9086B1
40640EF67FE923EFDF315F5EC708BBCDEAAED128814337B6B3104B29E1BD3261
E213D1D17DDA9FA0BFBBDA1B533C2876951D87E280295A6BAE3E08BD055F9B3F
92EDBE30A2447AD54A7FA4870CE64A8F72F4F8A14CBF9157447AE6C7E5FB8B92
A3AC8306CD4D4C72C30EB44CEDA8F3DB6AEB48AAFA5507BEBFBE1E9568204D34
D67FC873A0E249253CDB2624101C7719C216B78AFF6D74C1B62E2D9BB663BBFF
44F7B975795023A4A8CD03982615563EDE73605E33B1B0E2F6BE6EFBDA5FA2AC
7CE8865561391247A78BD643C2D074E4C8F4771ADBC7127E48D8697C8812E9D5
2406629198BAAB391B1CF06B726D38BA801B95E2FC47F8F8DBC9937241C4221C
529CCC0E40FB693CB356058E0D18544670EEADDA7341683FD5C85EAFFE33959A
117F176C4090116AA1609FDE11866633B7F566D32F1374B927894C17077B1C9C
AB41C46C8813407770B69B3C2EA79C2DBC9CDA08D29972E8478103AEAB9695CB
8A7E20DB983C046C1F5388F1C78597F92D3803E4B2E89304B35D869CF78306D8
AA5E6CB37EFFC6014135FD6F75875EE3CE249106B555EF475C1E3DD3FFF69BF0
E7C5EEE55B8CA54B43B15AA81C73D39DCBF8FF388FFE2740B0D690D6005BFEAF
CECEDDA1F3DEB5338B7FBFC2902DDB9843E1BD0567637ED358F253842E2E1DB7
DBB662927CFAA66508B793910B417AA2C31AB16048BAA97EB497CFB1C13507EB
D4C3B6EB4A1F64951B61206C2FAAC6D48C927FA68A4CB2CD32AE61FE9546C44F
9548C8B2F69452284C05D25293EBC04B795EBDAAF15143DEF447A654E6B4D2A6
0B5321A0CB67F9A22253ED79C715DB64F995741E08CA53859E9118B9A93FBF65
21795EA98AAEB832649F600BA076684B2CAF8F33877635AD1524D8823C9F376A
F72407CEE5FE4D089EEF4FE76D1601B5157934CCCD277E3A136C63EADBAD93C9
98D3FE21E1686B48FEA397E6FC8724E1AC41A641414CFBB9265FB2539884A1B7
26C74312B384199E7CD2BA6E629E9471B2C7A7A238794A85D267ABC8223641DD
44FCD673511F995D3616A6D5868B60996E0E87A2DBD42A7B7894636D7292084C
9B448800A881953F6B21885D9DDEA6C8711685934690F9B8DA5DE01174BA0491
9FCB2BCDDC15727CBD529514561966A4017E79A1F9E43D35B94FDCDED18D6B78
CB00217B0E174241E8E8545919DBB19F459398F28E668665C04306AA59A268FC
8EA33DAFA003A3490902D796340FCF9DB6CDE7CEF52B099AB136F6AB848D546F
313B660EFB9F77E228E4D04A2AC26D8F09F7658763641336AE15C04DFE775DF1
B546DE01497108CF0AE8B33EE7BBD76D4829E03C39AB702BA6E6908560B544FC
C9DD70459BE1EA811882E64A02890FEDE4EC7404ECDC5DEE84CB467AD76C2C39
A3696DC0BE1ED48EDAD95A5448CE33023A69E0245D9794E076C9D35A94BFEB18
AF0D450F577B3681FB8470D1543FD4D0470FBB9D78AC9D2FAF17A32D7266A33A
0B2C721F8EDA5099B4C37A5CC6160AE93D10723F398BB50251D861E4B267B0FE
0F620EDDB3A7E7CD4BA10E2702CFC036BF129E639189365E4CBE015BF312EAEC
BFA68AD7A51635011D06421ECE4982A6E06CC64D1A8FF88359196B01A1BE1F38
FDB6F2441B15D7D0DC2E32184A5AE3B770DBE028D8EEE9D7A49FD9E37BD74A47
4513BD66C1490324BF66683C9A5DB33E1DB68E44DB7D7018B78B70CF9A579D89
4F1EE4F1949ABA3D4E22B14116CBD65A8BB16DA3E011FA2B757F02EF62753590
171B4199B995F923B7275759BD37EBC376CE0E0A5FD565EC29CD1F6A46AD7CF2
24934426D1B1932195F2E3F904C66A83D9A5AB62B720791A5DECEC84D260AA0B
A737E27EFD966A8B1A380DE970989674955A90A759E2AD1104B24E803DA611B3
CE40694AE73296A0548F693E1F36646B92DAF66172FC9E00FE0677990FFBF29A
41B2BD4799C81A3D08DF54D34CD74046D6763BC96FA5D1B37B0F599384399210
18506D7C460EB61FBE02E843CBBC224F848C932825B0A63B86215A2E3D71E07C
87C7C94DE1F5FFF5F5EE9648134F344D719E1D3195F7A499AB5D712DE7D1D722
3B45B1ADA04C0BBADA825D54DFBDAF4CFF8F503A7EADCF5EA73CC4440EA8E485
24A513FA04C776B1AFBF0CE8D77B0EE0FAA239302D33A5A672B4B3BE25B942BB
14103667172D0370E7960ED1CC6D6B31B6FB9FCF25D9BD7147C562CE8D89714B
02C93F1DB318C57402A81456227362582DFB8EB27A011C0EB3CBDF30787ADABE
840BD2987024DEC668CBBF45E0CE7980191AA35995B50C4B3553439B2804E5FC
E11969BE5CC8992064857A76EE3AC8F7234B6C380BFF89B5F824FBBA2397C33E
8ABC7A0466873F1F7F8F93BB3B885EC040CDFD6EF5ADB1529868F84195CC4726
11F5FEF0DF307B0947E7F4C640816B2D83972E3A2BAA972E2952609438D69916
1C492A4A1A3E1475661CB12D65D5989587963E2451C4A8884CD718228461B05E
C4A6E3BE873992E2E9C6AF1315179B42DE0C400031C01B3AD728D8817F197EFA
5E9C57A2F1D3D612BE78D9032F3C29734898085052B64F4E52D1446648C55C19
DF70F6DC344171ED17296476FC098BE6A9B66AACC4B8267CBC68A3113D17671E
157B9B6990781345D2676392312ED6600DB29CCAA50BB648F3377DD8F3C7E469
B37CE1EB1D10CD4303C1EA7A3714968F2D3E002F30135A00BAE8721960649E62
7855C754649A26D94F04AD511970B380466E377DE82A00329C607B752D055CBE
49719EB45FC02DD63F80DF647C6C12D1DB32EF7B19A1FD8D9CE53BA9ED147C14
5E47EA86135CD0DC32DFEDE301EF9FF989CBFDC1DFAECF5985640C24C288550D
B20C261AACB16131A06E36F445CBD959E396C85116AA8989DFC81246376F4CA9
34290DF99984F2B9525D9F473D5BA7706F7A6DDDFC73B49906DFBE1853328797
E849DAB5E11EED406DE854CE042D6B99E50A7466CBC5BA84A60FB9A7EDE842E3
3747FF2670274642F760A7ED5CB9CC8C0DEBC2AF82E04CA9A511C2162CF897D8
69E6DA5F65429B5EEB0FECCB9E8AD008B02ACA0098DF39A44FCFF3637AA4CA13
6CA5163ACF03C18CCA0A19C3E0B7AA57741C60A2DFD883DC4BC30ABE7DC22E29
715C8527B89F7EB598DBC250579A49290DADBB9DB55053704158BED589469C23
8B29EDCD1E4A41D558F0D8A43E34700DB1202EF97E2197C5DB83960317CFD8C7
00401FA8238F441FEED34EDA8916C459871EACF06DA1E500EC477F0ADCBA3144
7601141C1C8FA825D5390666A385C61D2F5ACB6A3BFF888A33CAB5B6138E3B6C
3B404CA07E22FA9525F5279D01976C2D627E5989E87EBB5D3F92FEDB648855E3
98DD012653CF3AD0CC34EC07CA511F7BC917B91B2BE35F3EC2054BA3F09EE268
64C282F78FD32353586C5C40608203A5C3DFF440875DA8DB0F53835004D0F815
4D3904F0F4006A26957C21CEF63281B060CF574E5FDD6A8B52ADE1A686D41824
0C1996F88D8E9C7CB0AF8C69E7A5E06D00C1A972912D4AC9B23B457F52C2E24B
39598EE7E6DA45B0DC2963D031385A15888EF62FABEBB8A668A6680A54167E0A
FDA16552910BBBF991E70C8AA82E44339A06D63710C2C99056E8925A356758C3
5F72EB36075BA754462960E86487F0856D14695AE40D6AB5E189B8BED61BD238
430143A131FFDAD747649A17DE4A808A46594841E420DD481637C38ACF924569
F40270F02F5AB7DD5D66E860756243FCFCD1DED51529E9FF6FB3F76ACC4B55A7
1DC478799949D6CC65D5EEC7C9D372C6D4B06D5AB0C586DBAE90F1A4E58D3365
FF8F4994861AC8A6E3EFBBFBCA657C4E5D082FC51CCA8EB12D3BE559F74FA1E3
EB83948EC83CC3BA0C71B08041A935214314BBFA5C9BA369E1477773E3A2C13A
D516ABE0AC35659853668712DD18408C6B0EA765BF0CDF6427A0D8FA651FF21A
D7EE73B594B2F88909D3E745DD450A537EBD668A7AEF20A62D8DB920EDA0469B
30B0F427B73FFF9E91D74AFCCBA127BC6EF42088488AE7F8E2B02D2C02D00710
B64D2AD3414F1A067CD5C7ACEE9D2B4866A0B82DC0100066E1490898CF68DCDD
CDD5D87DE1979E12A8520DB338A6AD8F2099E14BCF76530FD861E3A8381E49D8
1513D2ECCB482131257DA777C22B572657F3F9D27C7DABADE3D426F89EC4F0EF
5A35DB876136E44815DBD178CB6EF5493B4E713CD24D139238879324FE9289BF
3BAB92EBE58A45CD01AD1346A7B69CD1CFC7B56B601C7449FE9F428BE0B57C9A
8371E7CDB16D3D5FFD1B83E2308B29734085F13B7C2ECF15B669C5781271E03F
B67BCBF9AB662F5C5A473949A68E9FC35E30EC9D4347B4E03E870F4FD5F0906D
1D6D64EDED3238F43F375170454499BE2051BA7803BFD08516D40716B00496AA
81E4C74F7533C94C922C730360AF27985A795E5A3348C30828F9E74236E83761
32B750A2A7FB8D2856BB45E2990DF2FDCBF109AE7CBDB3DC66DFD0CB77C33ED9
222E7178A73C7877BB5E0F7C9AA892D52EB2086B422E70B38A247B6CE16FFA09
A3BC00863EA9CAB4A2A6EADDFCFB3E6A51EFD081A1E1A51559595BA592DDF472
BB3233A245D338BE71BE9BEFB13F49529E32C8057B1D4480952D5CA1A1466879
A8F4BEF459BCDAE0D80CAB2834784F0D4B6E164584E5FF41BA223CD2B72FEFDF
4D869E059B0545DDA9E1011586934ADEFB17E94F9EEB03482F09A020D63950CF
8B9CAA624D7E5D59C07030D1CEAC9DEF5861ED76D1AEC37214A7377935418823
0A116296B88175EAF006BD5AAFD996456361E99122892A29F31954F5A6C8C25A
FE8A07DC46A75EA6BD31FB0CF34EEC5A74969F3645977A0AB7CF1448C6C55D3B
974DE31CA5239A449B6DE94BB4C866DAB3AB65B3696D42C6F1597E5041185028
E59E75B63564F33BA4FE8A0243B4606D7182D358F52856CED2DAE78834E8D3DF
20BAC62C835A1A9698B4381299DAFC14076E79FD9BA91339042EA9AC9FC5E77B
EE9CDA5BD569FA9724A1D53BF27DABAFB1A6CF0C6927B8D0771B68BD6FA8F9F8
8791AE4F207B80641808924134D7D2337558819A0361FD5A4AE78443F7EE24CD
EC68006AFC624DF133452622C684151DEC3EE3E3AD502821CEFE46A0A184A547
0FF4F1B2E0162B6D0A505F8C4D30011A6CF99983C8613E156FF8D975159A662B
47CB1BEA54B5D5353C9367BACB8997BDBC4AD63498673F40472B1C8DD44F0918
C7AE3DCA6C20ABC486F2D686EC09EB13E3336B8380135700B017BC05DE8C8F54
FB3BC8417E4FB8AEBE56F5D0DC0A8F86999E61271AABDA2B3C64D1161E1E6738
7165159C5CAE3AECC8359C71E3E52009A53986675D10963D8E9A3E09961D78F4
BA664104F8F051326DFF5F368019C9BE97AD708682ED935B0E15BE2901A5DEF6
D30B27CD76A99127CF39388F0972D13AACB974654145E590E70B3B5F87D4AE97
D6ED241AA9A920DCBCB6988AA3097A82A1A1037412DA681863E2D3C514F50FC9
8FB3F63E9839843B1462F0554ADDBC42C6FAF4865D0574F286C92F0EF7786843
8C93A808DCCA1188AB0501B83375BE8E013306129247157419148419554AE863
BE632942DC2B3CCF890BD6B2DA9370C8E68DD4792E0238B939837437B575C48B
D626BC3CD61D4CB5BC2722718656C057D3BBB1BC22481143BCFAD47B2F766A10
D4C9130C63E383E1AD84DF58B80B7A7360801E9AAA881122955A0DEA1EF6DC4A
920ABF10AE2F530F664B73103147CBC0E3647E67A467FDCD9430F2F081F9B5EC
2E52DB6DC874140B1DD83800D3D0C4C65074A99F95A13E09F0591667DDF495C9
411AC0CF33C8AEA994449B38831D4E04AF19E1F0FEEBA273A127DFDA737AF3D6
7D349FBD703E4C3EBFCBAC8144E590359ADC1DF5F5FE5B2F2AFBCC175FD15EC1
760E66C8361A823DC8D6DD30F7BCDA72F63DC770BD8E7230DF581276026D7D10
50F42CA728A447CD1ABBDECBE83D9BEAC7FA215D0C42103FAA1BA188FDE27344
D07FE114F93440A5FC14A076E4545E07401C36C3D580B3FEE8185668F8DDCF78
A18D522C3B695520615E0EA58D50B106D4591D004CB355E09A0D2FE30709EC00
1FD5FF39792013AF4FB901DA95FAC7AC9B51AA0CE0939227A426BB986A965942
CA7AD745E15FF62CDB9B88CA94745A972C19105D7893254FD3F89A6146049524
62AD8E7DC0788B749B3C43B286A2BB12DE2AFD34810B812CF9D670F1FB6704C8
CDC752C1A8E924544299C18A0A61F5A54029A4845B3E2522A0740D2A040FCA30
A5B5C124F752436989B1633D5FB068B876E239FCEE179F2E6018051E1A0658D4
5CF53FF334DBD3C96B4DDB2E5EDBF6DD8C77F2940D2614CE542A926B1A8C2D9D
86F64B463EE4B7C73113B8E417FEE114B40E7EE0E7C5C6A4D9A30EB592146CD4
D0DB28EE0D577EDB2F437919D21E59874EB1DED68A7D936100D5CB299187103D
4D64A673A2CE698E1CDBD7E890CC5C16C3C5B5FEA4A4F41C2086B20AED390360
6BBAB1838E92A37C1C0D8B620948A1E4B18FE3C5F69C96E2F22A9B7D3BD0D6F2
857844A332ED1395816FD93EC2A62FFA365EB9C8702C98CF283088603345B333
E806929F06AAF989AC7CE8601E772E35ECC27ACDD07BC577BABB02B1A5A94285
28B945FEB9E08C3D1D4FE382DB1CB3ACAE32ED04BC01F9CD5B052CA3D8A07751
9556B1D5F55AEB2A2538D607B9865A21FF0BAA556B7A026FAB8104573B7023EB
A4C6AC71EE0C0AAFBA80213F81AD60016D95B25C9E7C21BF3A4D5B8995925E42
B0C17377CA2232F5D1B04F89AE280B27D7FE95B8DC67B9417C2C5E2754B20C36
DE642C2D5CAFA6D4B452280F1593BA5791A29F2CF6CA5F918695424917444422
FC3DF440FCF0E5341BF34B8334EF2221417353852EBCADDE34D1671227AEEBA6
32FFAE50EE70C6F4F0F2CE19AF496D1E168CA1D8279F77638F093F85A610C34F
9B52F812398B3A9E7DEA9D7F147E84F356D8141927907DF1D8409A64CA8C4168
85338A0F9186CEA217851AFA3824570751358AFFE593845380C9FA79BECBF997
3679D931CB28E27E0A6D40079C0D47E1C7E79519E96A85C7852DF384942A4AFD
C83B9725F19C0112BCF4C28472336451C3F790520B0CD561A7A416A08BD59D72
8159281BB50BBA9E7B87CF7E5984359F2B57322EF68F2A15C895DBA83DCEE429
7EC8E77D6C25A6C8F6ACF288F9BEE6E22926BAE6228C5E2693CD25E3B9C3C6EE
90683F984FEE7969A96D43568CAF9D2CE291E7B8C70D62BC58AD41B4F5D7A31A
7BCBAB5B35460A361A2634E37651B6B1FA00F790226829866106758BE1D47F06
0E382F6C61286746AE876BC1002192C1D86F1483A758CD8EDCF4E5CF28903D6E
629E7BD44A381316B7EDCBD6322138DBACDBE04858415B3E2BF0D9644A59C38A
F96D40729A8F8714E82EDE8D734D67CE38EBBEE5570ADBE86A2163C7FE673435
EA8662F3389E9EB36F8B4F78E58027F53662C25B9A9B724D4C39C29395E5D3EC
8473B1CDEF057A18D89E9A79F6742DB7583E4465887DBB827AE86114E6551B15
F86DF87FA144B88600B5575BA57C5EB323145200888546EE070F552E2CBDE663
E7CE1D41F9DB056A03B11599CB59C9465CE834ADC9790E4B6DF250A4FEF69CF9
534ABA16D6B6DF63C6991FCAA328142540B1FE585B3C7B04C5B3F397952CA6A8
830199757EDFCBD8AFEECA22C3E97A406128531BAAE3BD2D7DBC932A100A6EEA
A37954441AEB3ABD74028A6CBD0526D134302F81F492FD8FFE233F12E7B35F09
C8ACD242919FD4CA6239D3D46986FE5D2246FBBBE83AE577A7FBA5965C994563
3C032745606E7CD1AEAE5EFCA1FC56210DFB5FE19211BE5838FF15D2762DACD3
5A3E634283DAADC1A7036ACBA5088DAFF5C009D692B6C635CF9B30E607D2CB20
6AAB0584B8C0C7FE056BFFCAAD6B0A8EA1A5AC4F0404A52704F8039B1C3AC951
D09D60950016C9E85463112E7AAD430014AD7DB31DBC903E8A6FD066D395C848
221634761BB3E90E2C362213FC5283189BBBA96C86807556CB080292D26A2347
4168A8D9F1A5A4DCD180618DE1F7CAB94D921BA40BF10F88740EB3F378B9CF71
672717B3028A1965C4734E0A0A9381C7918033655694AD7F1946D9D51B065E73
429D04BCAADC3C5822113C72B8BD6B9F66F7ABE669E3A95B7445F6CBFE3FEC7C
29C6D1F69E35CFD90C16B06C823A4047EA20C036AD3D0C479F51F34DC38FDF30
8E3DD88E91F27C1CA545E1F9C014FE149703030AA024FF1DB41569D5FFF2DCE1
AFD6CE911460CCB5E56475E1747556
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
%%BeginFont: DejaVuSansMono
%!PS-AdobeFont-1.0: DejaVuSansMono 2.34
%%Title: DejaVuSansMono
%Version: 2.34
%%CreationDate: Sun Sep 22 16:29:44 2013
%%Creator: Pavel Farar,,,
%Copyright: Copyright (c) 2003 by Bitstream, Inc. All Rights Reserved.
%Copyright: DejaVu changes are in public domain
% Generated by FontForge 20110222 (http://fontforge.sf.net/)
%%EndComments
10 dict begin
/FontType 1 def
/FontMatrix [0.001 0 0 0.001 0 0 ]readonly def
/FontName /DejaVuSansMono def
/FontBBox {-558 -375 718 1042 }readonly def
/PaintType 0 def
/FontInfo 11 dict dup begin
/version (2.34) readonly def
/Notice (Copyright \050c\051 2003 by Bitstream, Inc. All Rights Reserved.\012DejaVu changes are in public domain\012) readonly def
% Copyright (c) 2003 by Bitstream, Inc. All Rights Reserved.
% DejaVu changes are in public domain
/FullName (DejaVu Sans Mono) readonly def
/FamilyName (DejaVu Sans Mono) readonly def
/Weight (Book) readonly def
/FSType 0 def
/ItalicAngle 0 def
/isFixedPitch false def
/UnderlinePosition -41.5039 def
/UnderlineThickness 43.9453 def
/ascent 760 def
end readonly def
/Encoding 256 array
0 1 255 {1 index exch /.notdef put} for
dup 0 /.notdef put
readonly def
currentdict end
currentfile eexec
D9D66F633B846AB284BCF8B0411B772DE5CE3491FF0D04EF446AD8769DE20E54
1720D75F2AB6757C7C228E5EE51BF64BAADDFEF9C0FA3301C525103D2280F773
8054F4509B3D63122FFAB5125CE8FC73ACAD3B1E153EF78ABBEA64B3FD2705F0
2BFE68AD5670233C9DDF7A6CE741D2B7A0784D86FAC2D73CDCEB858F21BCC366
D652A738C3854826F97E3364293843EEE50CFF386594860051FBA702E2CDE29F
5179930151E7B1CD87E1FEEB31CE2B1AA4A07D4EDE7695FBEC4E22181A9B5380
DF93E4926154A2AB32BEC0C2A071AF63071F895A4F714E6CE31293BF4647BC0B
DCC0934D4C1CAFE035ABF6E73CD2ED60A4C6416F04EBBA6343EC39911CA2F25A
843EC16EA40A688C64AC31B4CAAC75D92EB7B73C2F7F0055D23F297C2A582606
642CF5382E260B9495139D3F40217BE6FF7A594F01C8B0438AC58AF9B82D9B32
2F6546A015D07A6E66CE71B43103D1B1C2EB9D1E2941CD1558234D6AEEB13CD8
5AB1D608421DB33F26F0ECE68BB808CE15EC5F2A2B7E125B46F622AE0EC3A7A6
EAEE618246BCCDFEBB4C84B9AA023E4C2E1D0F278AC3BA7A4888DC6E90ECCB04
BD972EF8A717D2A57905BCD23614AF3A7C94025CE06E6C68570E50A33E3A8707
00FB4FFBFB1EC7F4F50C03D122AD4B63E9E65F0A0AF43EFCC9FC546FD13DA42A
1C391CD5A39D75F1A4968FCF34270917DD0B7DC8AC08BAE392C6082E3A035A03
4CCC595BA01DEF0482A83E02EE1F0367F4A80E193F4610960393427B7A117FB7
D49657AE7D2B294E3534EEEAE97DA3239259BD2B5F063F81FB03F68D22853258
3F8387F0BC65DF02E020E4DA80F0CE2DAD5F5A4E8D1246C83DE4788F5CE3875E
4C412F8B4F1AF941EBF9C39BB17B310D911D21F05FB674AE8409213346B08413
FC160E9D7D5C5AA2F9E12963F9F03B33330E14914C09A5983F0DF27193BFBC25
32C24DC6432B4BCADF6CF9304554841290962D4C077BC1D5C7DDBBE50EB6A0A3
1BB786F87431AC95740C7E138AD3FD3761A27F6A8D89F3EE3D32D0AD34C3EF1C
144DDFD1350FB0135F96EC20FDFF8A181BF1B21CE49B7ABC4746155A560F417F
E3A60697CDAD47578430FE93F3ACB45B1698577870AC0E23CC8F65A5FE9ABD00
4BD9EECF04868480C689D1F4C59CC5BFA61A362B2250FA41EC78F302F14A6935
B8FCBC6E5AE0AC63AB55EBE80AA594F1C27E2610D9D94E1A283040E40D34A48F
F1C91A449B9D325DA9CD5407CDECFF1403FCF5D9F07E12FB96D6CA50DB5024A0
25A937A4538869768A32E17F36E9FB3494FFAAD76DFC3A0C9D91CB040B39F12D
BC1AD883FB04E174C2644CD820C75C576A4DF008C77250754831F18F80C0AF10
61A36E88E633D54094CFDB643D8B069E28FE49A6C0851167D085437E0BF759A1
C65AD058FAE6BBF34DFD0E3057645517D525EFCC1E560043A423B7991035F80D
E5D867CE3DFD17CF04FECF64B5121874A33863199B08FB5AB83759A0D6ECCE6F
F1D1B6ADF2CF0E2E0E886B546C5F02FBDEB13097E00732C3853253C322C17D0B
51359FB565BBD5278357D7C02DD8E6DDC6D2B50677B05E07BA4D9FA1D2FE87F4
697D41DC422DBBF6C424AFD2E59F946E4482EC9909331CDEC781082E29CDE9E3
E5F6DE759736748872CCE46B9FD23FEDB3C172507E4FCE859DA567B65952C989
27540E57CE2E202348A293CA5C0DAD34ED900ED29D79063A88F8E2E793CEBEB5
29D60D1D746A9E502A4389E2822C594AB050B8F483C8E056328E6C98235B490E
41026091FA933A917E5A149A2B1635545ED0D3622E814D2E9082BC0CCD31BC29
2DDC7310CF328508BC4C925ADF507F168CEE0F4BD0DEA9A841EEFF06E7D3C90C
ABD9E113DCB2A86999A55CAA164A742FD031A65C15E93FE9982B3E788FA7B44D
CF7DA72999BD022DE5C2F3A2F7F7312A451728393B9D4623F68CB0A1DC33DF44
56055C250095B58DEC55C0A7B4988219F96AAD547189BB7028E32AC1902F0C8A
902E77143D190387235991874BE44FBAC7AED2240680D8C27E2EC2E938F262A9
3B105022AB69BA15DAFBC55E8A2863C69EFB65C9806DFDD60F8C1A8F40CD205B
C537BAF664D258C37075CB5695725956E9A16FC60D9129F882FCD021BF33CEEA
429F69820C5E004705D06D23B43DD0D9A8BB3CDA7C65164CE424273D435645D1
53DC2CF66C68C921A358521925BF1A4B3CC7F495F94C8C0031B24A8ED1D3849C
2FBD979890415923BBCEB51E6110166D3F91C17C38207E7C79FEE9B30A9D8F22
6F8D1F0A76C1D48A7B83C3E22C2AACCD5597A4669D9BB2F7D5087F3BF41175DB
11B211771A5F2B664F0AC483AA933B9976A1884111930AD5C08EF49BB60447EA
52FEF05799368B9CCDDFD4EAD1187DEDA7CA6B5A3EFD4A6DCDBE982153C5C7C7
7EB9805C5446CB532816806CCEFA571F2F7E74518A2CC6EBF5E7A65736C4142D
8652C1D7DAB43FF111CF51A064E1F58BA6A661A632271713AC176EE47B6310AC
5A4015272B802D6878DDA99AF85E946E565E9B2FB5771E2B069B4C5F9153F221
DBABA9E16BE2D5A3B927D0C83A8905332531D80C85F6B665825D669CA4C45245
C44A672D62A4008620F3B8EC735B400966844B1BA21E850C777E257370E2D27D
299827C4FF12D85D3A3C9333835032F10C7F0357470D43E3F45BBE84B16402EE
8AEEA198C5B19D143B96535C17B44C190333A8DEDA8EA1DEE63749A93E147907
3A0F0380B4C0BB0CBBBDEB38123007BA2991309A88F5BEE68EC4310726C16AE0
0EB4B81B20B3BC6D5CD913DC9839AE7E96CAB92B286D1807E3197FDC78936F24
49C69B85859CDC1B57E6092198DFA93998522E2E0CBE1D200A34FD4654282F52
DBB81C0BADED6F2889AC1F16E7C858C28B675DE63B3C4B2DE886080146DB4064
C38E0A2B56388F003A44C45C966DB1793F67FA31B9B8342F3A019A7D047FF801
F776AC884A9C729771F1CA1C271B0BA9663E88DC153D74F37A4EE8DACDBC577D
5DAED49CFB7A03C9B7C4615E33F8B45C69F24123ACB99F2C72AD8F3769036C4F
163503E155581E1C5B28026378393E5FDDC3E1B8AE667001A443CE1E32DBF4CC
DDD0C3DB8C3954632B94E72166037E8D888FC24DED012E5E72E3AC2BA7EF1E0E
F2F862919EF17811F3692E144EAB031342FA4EE2856B8D514AEBB83F6F2AD9B5
98BDB5BB859F3A512A65FA3ADBABD25E3282ADA8CDA9210C77928617446677A7
3DEBE6F91D704A74A301061E38E57953724D460BBDB54D7947BBF11CA27EA6DD
E0D083B19BFB4E9231075E868156AA4C8C2D4E72651234ADF6EB0FED816262D8
34E7633D278A65AA50C371C2C28B348B3426E2FC6F8ECEC7FF88823E417007A1
822AC7FA0DE4FF5597C8133832876E131630152745BDB3D29C242BCA6A560961
01DE58D42ABEFC3096B946CB14044B3C2E535BC03B3FE103DDE9DAB8F8A6B322
18795458FF7C6634813B4B4AD421D71D8EB69C9D8BBAE6CAF0E17E1701E547C9
4C4DA341ED39954D446F45B108597056326BAD581A486470FD93E1F0EB429363
5563B71BC179DDFE80D8D2FDF6DAB97F3BB2266C20F3EA5572831B1087C654AB
242C29CBC648C3109C51DEC8AF5C45D91A988D1F3C2AE319D938031067A18DAC
E942F1E08A035CAAA4C7765C842C2F1264332F3A54250075514A01F69AA52BC4
ABAC6C2E8FCEFC87ACA7616C121AE1AB73A4F16AB67EE1564D71BC20257B66AF
FE62C8148C4AB925D81F6DF2EF9EAA6D268B1E43B3156CCAC87BE30CEF59859D
02F779FBE8C7206C92F8E55C830CB5521D60F8533FCC3262A7A2D7716D14AAF2
C1061D9C72FD61F6F0578F46132FB6A9656010B6C353F90C4CFFA5FD928EE3D1
215DEF64BD2A28239E2AB147C3470FD69B5428E39088F9A0C33C2C35E1376C05
A10F44E6576EC7399D156088389E70429F646F57F74820FBC651B24E80FC72A8
27F19D07752575DB47F866DBF0D6DF3BCF3921E9BDC7A2F4EB7D367138B86265
EC1D7C3FE2F845A067A1B0A794C9F55AF7C375CB186D7F93ADDD0F6FBCCB84BC
A26FC4F6CD12E0BC35B7F269CE0E766C762F81AF137DF9CC16ABD4CD0D30FD17
46739E44B7B8C280AF33ACC841BFB85F09672B49E88D7A7EF01DE52B6270973E
38C739C9BD317EE8FA5574F1734A66338C56F96F5D601C0661853C491830615E
195CC00CAA96F4CFD105A1ED7F442E22D9E0ED6D0A06CEB26778ADED62ACD882
7859A339F8BD67B22B83B1805220B5A8988F25E87A1B5E782F16EEF97E5933EC
C49FBF643EBAE76DD4B1E4C31108473C7168C10241B0FAE83890B4746F64BFF6
A20854FAA0A98BC9F9FD42D29C2E34E4F941458D9561FA42A3C6A9C7A8CB09DC
DD1A24E4B6CF2F98431410CA470ECFD2C2A17993F3ED0B3BEB475890F2E170C4
004B1CF57522E284AC2CA5573215BE5C6910F523459602EC6A180AA2C7E1BC54
7C16967C6797094B9EA55E7317AD4A70F81DB59580C1A565D77B5A97D261E430
8126B647BC83CFF08746FE7515F6A96527D59C2154254C1FE3904364B021F150
D553B9A75564A3924D8B0E557FB32A4A280A1E262B8E9EB19EBF27DD02940868
2A7F06ECD8BEE9487AFFC8BBADA3BDF47DE8FC623CF8511755DE6E323ABE0B9E
DD1ABD92D2A7EBD109E7F61C0690CDA203A011E2D4721D3ACFB4EB373C12A5B6
2BA341363C7E82D9666FD695466ECACADA25FC5396D2F7CEEA4F6B03609DB7B3
046EDDBE9A4FDB1D31A447D3C063D976FD42FE49DED69453ADF12072F08EB432
BFFC4B5DB530603FF445F5B3E278846094774B6E343182C5B6AF73E5C0CB90B8
EBD9F6A1979D8DDFF57BA056F5AE58D8472C2CDC859189300667B2B9151F5F19
6A32652B92425976F729BDA158DC72F33E3F9A8AAEFF90713153014E340456A0
BE9A812AC053112CA9D00AD0C953AE63BF6D11D3C187C2106C77559288E7D9D4
364A5B461A7821296BC8EDB9D5E54078C71455A3C17A03048779C863A60B1926
CD8C91F3AFC2B4BD48437C1FB9A50C46B170B76B25EB949FC9BDAB780289611A
0F21E1B61FBF03B21911E3663BB1C0D1A076B5F1DBFAF8CD841D8F40DCF23DF3
82C501E3ED2F791E49BFE0D6CAD21A4EBB7796A679D44FB2CB1DCA4FFC5A9898
26102CB37094F2494AA75C4FC4D9A25B45A9208FEE3A783915A8627D57EEC7D4
181C2CB0FAB9475DAA6920A7A01E00E2FE442B373D42A1C5234A148563688D8E
93011D0A54E436C4C3D2A8473F1C1AD2F0B9D485BF0A2D3B18AAA136718DF94F
53FE07C9F39155082DA1770A37AE06B34FB9DBD6A34C68B3AD6DA0DFCFE49DE9
66FBD607F6005CF7EED9DFC1CFAE79817C9B20A2DC6A1C07BB21CB0FBD0D141F
E150A2E9949666AA65952830564FFD40C88F85B512F9B16E5F9A1376FD893927
561F57F631DB84C599022C0D6F443098737E100271867EE8DC54EEE6F9D35BDA
459761233B6B87DBD5E95824DAC0BC9AA912320FEF1CD6CEAE764FC664029C17
D565C440512A2B2803EA4B0DE48A2C5F5F42BD0134C040ACE2264FC63227BDB5
22EF0B1BF3987874BFF7AD2A5CD7B12BC5DEE2BF2067910F770C8A9C9CF91614
299A84F46CC6DD0F3A16E04282E4B77FD328D453DCB8C87EC68E69881A0FB99A
E11A38CBCA99E9F9540B94997774F2B1924B43276241BB099259974A7D82A553
3631521A20553981E819BBF030B95438EA76084B6663EA1D4FC6C862C87D80A4
57A5302A798C4D97D60D6380EB3A4EFFFB3A14A35B57E5D0B5D6FD014CC62BF4
CEFE81B15D1D5C6DF6386DFE17956F9A8A89F52A982C0CFCA7E4D4D5933FEA77
51BA9B4490F7215276C26CF53A95652858DDE917E1F263CDB1D71907BBA17F2C
C3E0F5D61914FF16B6464513632A5539EF383273F0477A9FF401A6B34F8E079C
5FF03BC855E58267C8E8822812E31EBF9A857F191B2A8262B8CCF459B4DC3677
22450CA073CBAD7FE9751D6FEA25AE759C82A608C4BF891B59AD64452C43940D
10AD9A15D74EABF9B6959A432386246860ED61B98FBB76FFB97FA1B530965471
D606DED9E0F31E885EB8633AB42C34A7932A77E6C4F539B8BCC60B1853E7020D
38D3F819DD2A9C794710115EED4C787D87797DF0788FE5290E011A949189F391
F6276E2CABE08743C6B8F6B26D5CE350021394716612115829AAF36F9FB97D8B
9B93059BF9C25E63653FBC52C3073BC2B5DD0502A05776E52BFB239647B76893
DC14B03DCCEC89B5C3103B05418635BBBE93042BE39F7F4BB351AD774360CFF5
B5D3ABC190B186BB7DC7F8AA3302052E433EF0216C0DBCD9523AC233DE427517
10CEAC3E2785D93570358B730530D1CFF8B244CE8BA2139572504940C75F5BFF
2E458263E9DD186275361993455959D0B0BFE5A4BB1DEA5A877CCC6254511BE7
56693591AC7A768187B315CD6EA548BE7D2720EAA92DCCE264D55418065B7ACA
FCA0CB7AC6DF64D10AC5CC5BB32CBA67C75E0326F87228B470C41CF6524A1E13
593F751AA6FCF270FFE0BB2F0684373ECB135061361930D6253771986DE521F6
2BF9DEE488D3544C5746704676DE2516FD681B7A9EA2DBD59B519522C3092561
2F862AB6508651E9CCEF824B5FADEC3DAFE5C14F92E8097A99296C4B74951437
DE19324D1B542DD22A06754D9F9AE066A7801464BFBC770B346D97D799644421
3972D169E59D19B3B7A618ED0BF6D0BFF6B96583DC430D6AF65E904A3D59DF13
D29D8BE394F8CC4B50A2418C44357DF43810BAA50B05BF92A46152A52798A7CA
34CEBC7D4C2E1F85618EC5B78FD6C64C8FD5A5B6F6D666DA60E80BC4BAE50EC8
ED8EAB95F83FA51DF621C6693677DE32BB23BB6ECB72E1246A0F6F09C8F38A1C
8BB180F8001650513790815A6085C6BD91B9C8B4ECE3CAD238C231BFC3B4433D
A17840E676ED2EA92C61FDA5FD4BC9C8E6E1531A94D44ED16B916F3FAF3D3C9F
FEAF66629E9B931DC380AF180427178E74D3AA5FFD70265235C289534AD65E20
9ACEE4D4B772F49558BFE675D7198AA28EDE0D9C92E39DA2299E12C69431AC2C
42A737EE0F4784B14FD544C70F4520E5CE6BBECECB5CB3CC4F85C8A7F259198C
40F8686E98953A2AF1A7E6B48A40513F9A9583B5504518448053F35CAF8BFAA9
EA20DDD8A0E49FA5B084AF43B318FAF385F34D685151939FD2784DCF97994476
D85DE98CBBA0D7F6FAAED2A6ABE14AAA2AB954E2A223DC22F3D268DB1B85D7F1
69575F3513CA99951A18614BCD54A8AA1AF324D723870087B92E05EAEE2081C6
97F00B590361056DE780C33D0290CF66F257E223C416138FE974C66A267A6C85
49E0584019749B81C5DFB8E0B6947F1A81B02AFAEFEEBD02273E6072C22F581E
1D9A10B55628ED03736FAA03854784C252A50085F1C008D56527B4C2E2FAA0A4
2C9E9871368E653A0B16356CE0FBFED150EEBDC2CC0E26953789F92F15AE9C19
B29AF6EC0A4593782A599B1207F7EFA824D8E5C2C5DDA6C0E18DD3A2A6A0ED9E
F3EE7FAA86EF319435FFC8189C5C3E15A6D3F668B023E631D146CC8D5C9E6041
AD6B07C7533F6AB848E296D83A2B530C44B73A5D2B48A554C5351714C28B6615
915C568F3A5CCA67ADF530C8EFAEA9E2209449D2B2747D0AC3B46F44C36B0FF2
73FF3E2BD4C9161EC444D8FD38DCFA35DF7D956CE18CED82532C40EFA25C2EC1
F658A0DEDDC8EA3AE9CF3B12889AB6CD0BDE7D23097A973B643F3DE8E9725842
0F9BA2C650759CE027D8E3E07134EE02FF87238476CBCB7BB8E568B093E9E0C4
5B84EE3BF7D64BD77EB18C29DB3630B72D10290111534A63B8AFCD34DD1A2AB3
080707BE82827500CCB8A9966F74030983EBB9B32FF25394230536A434FAC6E7
7F6A0925915ACFCE1366893F7019AEC49715FEBDC8CF59332849ECE66F810238
3F02F7401C3481B529E3E18927B24CA1AA56B0847081BBCDAC4DF36D640994DF
66D6F8D2701298CC9FDA7928F99CA135B6980B2924DDC9E79640EEFC4B9852F5
0C93C6BA15171A759EE22D9F51DAEDF5873816653E5215E436CFC8508A1E1B82
FD879C7FACDA5A32D850AC4211F0B50F608CE934B42EB8D32B5C20AEBCF9039D
FAA268D83B462FC0BD10BBBB8DB7B12BB1011EEA4E5FF4820F0D260B7DEBA72F
E89B64C4CCBA115B7FF44056889486E4F54158490141BDE1A648F04D9BC61CD7
2431D070C2157450F5CFCC099FF92E8FF1268F8B3FF1B1590A5A199DB0F61AEC
1F051B1A6604FBEC4BE86812CF347E09F1BC98641688D99E6A269CDCE787DEF4
2A610E752FF292CE5721CBA24721E4DF7EF63891D98E4EA24E4DCA5D507108EC
02D50C0D87C31A11E0231DDCFD8B1EEA2B11BAF18374DEE98D644FAEBEF32264
8F56EA1012FC7012142611205589FA4C2263FAF831B150E96700F41CA70C6034
C319BEB9D85084AA21B81AF837A1565F8CE28E3035136C15642D6C4CBE8F3AFF
39B375392937C26AC08DA98886993EEC7A8FFEEC357A8C41592305E5A491A4E8
663AFD3492B955E7936A451695C9566C24C2C363E315283EE2BFA57379A4447D
65822558342FEE36885AE5C65CAAA12E17F93A61073B3ED9B48A6791CD665EE5
666DD13387024C115A1FCB6AA657FB15CE9CC2FBB0410C00F087312EBDCCCAF8
52379E44761E3CA3C8E8F807C07B53A33F802318A0029489CA3F0451710B82F2
BE6092C82BDCAA953A110A4AC41EE5CC2E332CB7C7AE96B5559757BC28F616C3
D6E42054D0E82E5F05D1F960312EE8B82C2A96108382D4DE8073A483A2C65E3A
ACD9ACC707FAE3F280965C33822FF499932C70394953B1CCD1DCD74E9D83EBB9
8A63AFA1B452EAFAFB80F67A66013C4EB983F7B3F8D5965ADA15942D91F1395E
7D57BA9BDEA7D74E42FF64820921A8301CD46EFC0F8119FB457D6E845F55D72E
CBF75513185AB1B6B27A0F5A1ADAB1D7A90F8D7D321FB7E7ACA8B09634657AA4
20E6E3B2E854705346AA980DD6FE13A9DF9DB2801B89427176743620D37A1357
83DB2AA4FCA13B9957F5FAD27174532BDDF2C126A506F9F5B885ADD020EA0190
6365162F1AF4AB783121AD502EF0A88FFDDF5CD68DF5A2AA09420233C5DB38E6
39321304FA1B2066E255AF3111495D18DE0B91E73A2AFD5F8DC4CDF14C1A9D0B
93E9A9F56656FD43E7DE0B8962E273E6D375F1381E39E5D9357496A50BD4EA8D
DEC2EA771A3852807DBB5B18B8A9D20D1F534C56C075C97D92490662D189D92C
3919755C48B4F711372AE3B7BB1090E9EE6B3F01FAC19113D9FC8D5DED13D92F
191DE6602946AB52604307DF734CCB8BAD937E58B84E6FDCCBD70DE79711625D
0623AC1577B91B8B119B9FAC27082A37F56B2FDDE9B24DB962E5F9BB623801E5
5133244C40E1F16F6C0D00EAF65227B25F116BB5B0FBC131C73B7CBDF9BAFF9C
DC5BAD7F605D55C4B2DCF5D73AEC2A319A641347D4B066735127920FA8185615
F3B5B419A5E9CE65C1BF3A71B9B304F156053EA5B4F7D7E58D9C61F7C0F8E240
A540D6A8F6527DD6BCCB7321C05CC9FE8D9AD16D04DE108727FD7C001FC45090
64A09A37D37080540F5CBBD8C7F0F76070C61F3A7CE98A4CFF9E8E60FB88E944
51176B4614CF3CCCDDE6DA88919148EFB0AB87001E209C8DFDF3B5A7EF83EB60
1F101D3D91A04869E3259CB1D71DE95427E61B9B2869F1BEC10CD9A60A7597C8
23D849660B9A62C57C9A112FF3CA2708AA19CE844625606DDDE632D7AD1F43C2
36DBEBC18195D4BA3F2D9C1BA99FCFC7C1AA0355ABB27E42E2314850D21041D6
849F5A34F0C817D3F86A28091D0C6088D01C99BB01C54605A556A601887FDD6D
99D921E72B5A7E65FDEFDE16282C8ECF2E8BA7591300074D76A380C7CF45F4E3
DD39FA618AFBEF95291C4616ADA12BF7149728B478BBDD23FCCA5609F80E5727
4FFE5F3D883462E77A877B381ADD4976C0C85197AD49598230971DAF473A5C55
36CCD95377E0D3F235FA696DA3480C857B7E2F12318F34862A3CE07B5E8D9668
46D8C0539B41792ED8CF731016C85A4E041ABB7F4946DC7B0B2BB97622C5C5D8
B3E64238578C1E98742577C5A29688C84D018415C8C42F6759B1B24D0D5BB072
C7F6A48C3CCD7DEED00F1796CC58520EDA39A7800595364552F1690662220DAE
E50FE2B0A820ABDC3FAA5A8B697456300C1D96793D63F9746329112392B893C0
918599BCA42C90886104E7F2149767B47003F6780D5E686A10511009BC12588E
434FDCC6C8B883D03F393FB091F125FB314CFB957757B3A72A31E36FE1C9A23B
EAF54546098CF70B0443DDBB23A26EE87A5876EB92B1B53D543E61DFBABB693A
6EB047F732E24D19BF27055B6E9BEA59D7296A0D530CB26306A8C84EBB76C7C1
CF767FB3E937D80A341E14E073DB7DA9A4FD196F4D851D397745D9E3576916C2
DE5A9BF884110FBEDC45A308A82EC40513546DDEAA401C6312DBA21D3B96B66E
7980665A358233C153A32589D03360B92ABD1BF4762108CC1B72CF4BE428DE20
740FF3BF23C0C17C5178D6476EF1A9585C01A8A4F5A9A398C689D827FEF40961
C9054B75CC81DD13CDBC22A22A4F814325C6078000BA44C5A01A477E2B000C39
37C27905F16D18AA2442B646865451AF2B34678DD7C64A7BA1F625C3E7BA9EE2
8415AE0048E5FFA907CBBEC917FFD5B900D18B094B6F0870EFBE3A7436809C0D
0841EA432F5A3CC0C86FD39D6A7C002BD736B87307B976DBC0B056EC47F94924
6CE54BFA4DA642E0E40623CDD10C6EDBB0F7A3D3E05E2F78A8342709A950E1E6
441FDDA89C57957265C22CEC7184D4F2D067C279A618AD09BBE626BBB98F038E
0530B2AD398A9C3AFCD3DE6FFB6D56F2AC52C857C6FCA0AC5177CD0E04ADA405
7A20203DEE4CC1E96E17AD82C65D7FCF78DF264506038EE3C1CB08B5070FEAAC
75AB718B37E5E1E119E2FA06F2313C8E9DEE3529B899CCA2EAF259EF7D091EC1
711F3E3416A5C9ACB9006D991EAF05E56E422A2B7B442009E2838090954A5C8B
4814A27AAB355561A16BCBF528EF272CA9F14CE3A804CD4CEB1DD8F606E1E360
51D00E61EE5576B906F854741FB1F4063CEC6270DD2691784531253B554C0F1F
A1C46C99897011F0C4DE7EF815AB5A50C9253835744540AB6CD4B714C601D28B
C6A0E0239ADA7BDF6A132E491C596D72E71F94A9C0042D0397D5D7EC1623F8A0
ACC35C00C016A29E7F78D6337032030F66A40C5371D9526E3ED45EDECE8A9243
E3A6697AEAC8555DB97027E22CD1CD748EB0D2A4982B5069903FC8405C904E6B
5CE22AAAA9F43289ED10205349EA4CD2F1D890E8CD6EF325DCAA0B18BB3BE725
242B3A7AFB777A03FD1A0F201EE7456422AA967D32C3F37A931C565FAB6A8599
4BA52B3E141B2AF76AEAF89AA07143F01CF73CEC5B7877077E421392293506C3
91705E157E0C727AB4A2C6D6B5F7FBC424BACFE9D3C09A32DBC86B3F617294A1
05AE4D1F02545728FF58F62330CF5E48A2C28C49927AE04C0CA35E094C5C0694
D0F15976CFF33899E6EC7F3B3E52F6613458038F106BF35F87AF51C5C6C87548
3E622A53AAD0B7E369CA435AE889106A818F4098F3A6D4EC90227CBAC470B9FE
CB836C2394948585E01B17EE576B7ED658ABFBED741665E25A5F5C7AEC75F441
1877BB72CD98C0C7EF7EDF24697A666270F34B172B3942CB5DD3824CB1754278
E8D326701BAD7575CE99BA7F2DB7E0470B6F5232EF05EE8C16AF09E98BB7E503
3FF95850D3FEDF82EE699EC2E0CFC0D7512FD8E7AB105F0C7E21C67B7BADDD08
4CBD56E873024034AE2A2783A9B0F1116627B18993033B383330B1D2E211B781
2E89AFCBA6A5E9F7AAE4A989D812955D6395745B7F68966C38E265409650EA48
6950E3A7C5523CC51CC93E1AEF38DBA4BCF6F85FD05F8DFAE1FC90B98845BBE3
33A7D19E8C0462D2BE053128E0AA631D4E99EE0680E1FC18969D9E1DCACC6436
E50390D5C1962AE83BF77DA50F19DC9209E94984693DDA66431C9028737E78C6
8FCA141AC5109F84F7A3EF3195971598F8B612FFA3D0FEEF40B9A2CDAC62DC73
9B924E5CE7D4AE263825BA76C9717AC642E605643ABD1E4672273D26B9C617CE
FA2FD51DEC9A8CA2789F608C9184284E6E46457CDE7C9902BAE8207E41DA5701
31F0EA0DC83F1C97B9ABD4D862A4ABBEF2BCC78A54DAA70407FBE2E4ADE5A676
E4521EA7317013B78BB8BED7F96AA28750854A2D897C1AD93ADEC8D0E95CA056
868D9E94BCC997FF1C10979D46DE5DB072767511D81619AD4DBE29949F787687
76BA1D1FE3E127C2FD6E5AFD0E6C7042DD9419058B00B6167EED3717AB55FF94
2E2DF38260D5BE680E562FA10076998052EE639DD26DB60DA2C587BBD209D1B3
FC75FED1FECAEA9E0B3BA55F85688A817D617CD9D94D857B733685E68086378C
8A0D83196652CE4B0E2E2686D6B0BD635711234ED65967E2961C3FB7A9CAB454
0AA1A51DDDC3F1251527132BBF718DF5BEBB5DCC98281FBD6C25738A7ADE0472
969FAE851102D58D63D6360ED865C59C125D71AB8D7B18001E9BF13CE2626A99
6704C0BCF4F1797C5C32166A2AD1FFC270B886E7446DDB15D1E9673A018B4C89
87677346D131BED2A68ED16401CB781E20F13E1C966BB2F863D0255123CE359C
E26ADCDFD41BC9FE15FAC8477140E38EB69D9BC36881767F3361FB223ADB99BC
B9A50148887B41F3D04B0B0FB543DBF7A096E7D2277CA2D4B249CE0DEE09C988
8C796B5C8E39574B150FA430895C832F3BDAB3C4496CF03FAC620D852642D3F3
6EF56A8AB4851C1D5EE3D30CF5A6DA4CE9CFB6B1D2670085C9026B9A60328655
753C98BD5A65506A3905F08D194A01F30F1DD526F101448B40A05877A83E0834
C404FAA1B01A20979E2C9379F302299B4C3EBEAF2CE1A11C54711D7D6EB4814C
40B009A8FB015C020AE1060671977D14A2BAB17BD622565A4BF13338D6AC81E5
03A6B9AE7CA98B88D713A0430061488E11CFE7C4CF0318F2BD2A8FAAC6882EA1
13C9300971AB70C2D58C4D4A8F98189873D57A15608C0F142561FCDD519AE77F
7820AD2BFEC4E2DFB7A2262EEAE2D9A9E5F7E68E408372737B8BF4270AA1BBBC
F997093F0E556DC067E72177EA395BAF8BE4DA54BE75097C777460E3B1F1E2E2
E7C696552AABDA086C539BE98E2854B5D11E3920B0B4C677FFEC3531E7E8CA7A
69F89EFBF86032FC4F3988599A7FC1BB495C6B18D8909394E800D03C48B0B87D
166A844EEE6BCEFBF9E66DE48385C035417ABEECE833A85242A80581325215F3
12822B6922F63344197C85433BF73AABBF39E5CB77837519C38F5763D0371328
97134A756B52C1B0F9914FD431991FCE35886D3A0CA8AC5068946A6C37AA2196
BE9D7FC3D492FA636B08954F303E48EA151EA8F5247DFC18425E1FFC419A44F4
0DBFACEA9995745FED2EF56570FD447847C5ECD6482B9F30E2B42812F83A34A7
55DC0E57CF1CA47A8E23B7A63C6D427CBB9CC594F1E27C9F5FFFF40E82756781
BF1D370C553F3E2A4B3708E13C342D52450FA1E4B70FE4EA1B5E56311778D2DB
C878D1B3110B5DEA0ED30285E1867110E397FBE9A9162B3CF12C04D11CD60B5C
6C21DF6B76F81B57D023710E51CD68E1C126A5FF8AEA771A4D9AC306B1ECF013
2DB8F2E403EFBF1191EF3DB8C1FB6F40D794F8F70D15DD88DACD6564D755FC8B
BB6C3441CA1B28E1B20F343742BC07C31D1B94FB27B88F4E13EA422BF9F9E2FE
EFDFF3D1667F917B1564D91ECF0F7EBA981A6BD38448AB18B6176E4B34693BF3
5F2BDA5869569601B405F3A0CB199EE54ED2E834C4580D4EE99526B1A6497EE5
EBC6C2453C1722CDF1D5D196A7C9961DCE5F78BCB8D469933B4979D4779E78C2
C4219AA8E652E05B80D3610F20A7C867754D230EA24497695AF95693F5323C48
B99E2648822C83A2ADF88FA5135F53D6629C14157F4840B72898DA672A7D8887
90519EE600287E7C82031137A5D7E32131959085DAD8959DD57A42F4CCA05980
895C15456587473F96E9898513E4FD739C01684CD0AE7A56C12F0690A2ABCB05
BD56CC938FB879FE082420DD7FCB03D9A5885CD044C63C9D37FF52FA75BDCA11
AC00EC8BFF06B2A3648DC4079C9C66B8F11E7080422611136D713D3194EAC392
362496960887ADBA48CBF94E0526679D71EB283B25FBC481148D3538E4D608AB
6AD36DEFAB5C5B80184398EC2089A91AA7B7634EE10574F91B26C7
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
0000000000000000000000000000000000000000000000000000000000000000
cleartomark
%%EndFont 
TeXDict begin 40258437 52099154 1000 600 600 (anatomy-if.dvi)
@start /Fa 136[571 2[255 293 296 1[406 1[430 650 3[229
3[333 406 323 397 403 55[260 254 40[{
 AutoEnc_7grukw4ftfgbx23ssythacmksg ReEncodeFont }15
830.22 /LinLibertineTI rf /Fb 130[400 1[400 5[400 400
1[400 2[400 400 1[400 2[400 1[400 400 400 400 1[400 400
9[400 4[400 2[400 2[400 2[400 400 400 1[400 400 6[400
1[400 14[400 2[400 400 40[{
 AutoEnc_ai7sfw4ev2rw3jfdy46mgxdj6f ReEncodeFont }29
664.176 /DejaVuSansMono rf end
%%EndProlog
%%BeginSetup
%%Feature: *Resolution 600dpi
TeXDict begin
 end
%%EndSetup
TeXDict begin 1 0 bop 0 TeXcolorgray 0 9000 a
 /pssetRGBcolor /setrgbcolor load def /pssetCMYKcolor /setcmykcolor
load def /pssetGraycolor /setgray load def
 0 9000
a 0 9000 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 0 9000 a 0 9000 a
tx@Dict begin  gsave STV CP T /ps@refangle 0.  def grestore  end
 0 9000 a 0 9000 a
tx@Dict begin  gsave STV CP T /ps@rot 0 def grestore  end
 0 9000
a 0 9000 a
tx@Dict begin gsave CM STV CP newpath moveto 3.0 neg 0 rmoveto clip
setmatrix end
 0 9000 a 0 9000 19821 9000 v 19821 9000 a
currentpoint grestore moveto

19821 9000 a 0 9000 a
tx@Dict begin { 0.0 0.0 } PutCoor PutBegin  end
 0 9000 a 1 0 0 TeXcolorrgb -5868
x Fb(if)400 b(\()p 0 TeXcolorgray(digitalRead\(button\))e(==)h(LOW)p
1 0 0 TeXcolorrgb(\))h({)p 0 TeXcolorgray 0 TeXcolorgray
1181 4832 a(digitalWrite\(redLED,)e(HIGH\);)p 0 TeXcolorgray
0 TeXcolorgray 1181 6533 a(digitalWrite\(greenLED,)g(LOW\);)p
0 TeXcolorgray 1 0 0 TeXcolorrgb 0 8233 a(})p 0 TeXcolorgray
0 9000 a
tx@Dict begin  PutEnd  end
 0 9000 a 0 9000 a
tx@Dict begin {  /ifStar false def /radius1 60.0 def /radius2 60.0
def /Alpha 1452.62631 780.51566 195.12932 780.51566 3 -1 roll sub 3
1 roll exch sub atan def gsave STV CP T /ps@rot Alpha 0 add 90 sub
def grestore /Length 1452.62631 780.51566 195.12932 780.51566 Pyth2
def /Left { Length 0.5  mul } bind def /Right { Length Left sub } bind
def /Width 1.6 def /pop4 { pop pop pop pop } def gsave [ Alpha cos
Alpha sin Alpha sin neg Alpha cos 1452.62631 780.51566 ] concat 0 0
moveto 0 radius2 neg radius2 radius2 neg radius2 arcto pop4 Left radius2
sub radius1 sub 0 rlineto Left radius2 neg Left radius2 radius1 add
neg radius1 arcto pop4 currentpoint /y@Label ED /x@Label ED Left radius2
neg Left radius1 add radius2 neg radius1 arcto pop4 Right radius2 sub
radius1 sub 0 rlineto Length radius2 neg Length 0 radius2 arcto pop4
Length radius2 Width add neg Length radius2 sub radius2 Width add neg
radius2 arcto pop4 Right radius2 sub radius1 sub neg 0 rlineto Left
radius1 add Width radius1 add radius2 add neg radius1 90 180 arc Left
radius1 sub Width radius1 add radius2 add neg radius1 0 90 arc Left
radius2 sub radius1 sub neg 0 rlineto radius2 Width neg radius2 270
180 arcn 0 0 lineto gsave ifStar { 0 0 1  setrgbcolor }{ 0  setgray
} ifelse fill grestore 4.33546 setlinewidth 0 0 1  setrgbcolor stroke
0 0 moveto grestore /Dh radius1 radius2 add Width add def 1452.62631
780.51566 195.12932 780.51566 3 -1 roll sub 3 1 roll exch sub 0.5 
mul exch 0.5  mul 1452.62631 780.51566 3 -1 roll add Dh Alpha cos mul
sub 0.0 sub 3 1 roll add Dh Alpha sin mul add 0.0 add exch  108.405
div exch 108.405 div exch    108.405 mul exch 108.405 mul exch  } PutCoor
PutBegin  end
 0 9000 a 0 9000 a
tx@Dict begin ps@rot  RotBegin  end
 0 9000 a
0 9000 a
tx@Dict begin RotEnd  end
 0 9000 a 0 9000 a
tx@Dict begin  PutEnd  end
 0 9000 a @beginspecial @setspecial
  tx@Dict begin STP newpath 4.33546 SLW 0 0 1  setrgbcolor  end


@endspecial 0 9000 a
tx@Dict begin { 823.87865 921.44249 } PutCoor PutBegin  end
 0 9000 a 0 0 1 TeXcolorrgb -966
8831 a Fa(test\()-10 b(s\))p 0 TeXcolorgray 0 9000 a
tx@Dict begin  PutEnd  end

0 9000 a 0 9000 a
tx@Dict begin {  /ifStar false def /radius1 30.0 def /radius2 60.0
def /Alpha 1517.66998 260.17133 1517.66998 574.54681 3 -1 roll sub
3 1 roll exch sub atan def gsave STV CP T /ps@rot Alpha 0 add 90 sub
def grestore /Length 1517.66998 260.17133 1517.66998 574.54681 Pyth2
def /Left { Length 0.5  mul } bind def /Right { Length Left sub } bind
def /Width 1.6 def /pop4 { pop pop pop pop } def gsave [ Alpha cos
Alpha sin Alpha sin neg Alpha cos 1517.66998 260.17133 ] concat 0 0
moveto 0 radius2 neg radius2 radius2 neg radius2 arcto pop4 Left radius2
sub radius1 sub 0 rlineto Left radius2 neg Left radius2 radius1 add
neg radius1 arcto pop4 currentpoint /y@Label ED /x@Label ED Left radius2
neg Left radius1 add radius2 neg radius1 arcto pop4 Right radius2 sub
radius1 sub 0 rlineto Length radius2 neg Length 0 radius2 arcto pop4
Length radius2 Width add neg Length radius2 sub radius2 Width add neg
radius2 arcto pop4 Right radius2 sub radius1 sub neg 0 rlineto Left
radius1 add Width radius1 add radius2 add neg radius1 90 180 arc Left
radius1 sub Width radius1 add radius2 add neg radius1 0 90 arc Left
radius2 sub radius1 sub neg 0 rlineto radius2 Width neg radius2 270
180 arcn 0 0 lineto gsave ifStar { 0 0 1  setrgbcolor }{ 0  setgray
} ifelse fill grestore 4.33546 setlinewidth 0 0 1  setrgbcolor stroke
0 0 moveto grestore /Dh radius1 radius2 add Width add def 1517.66998
260.17133 1517.66998 574.54681 3 -1 roll sub 3 1 roll exch sub 0.5
 mul exch 0.5  mul 1517.66998 260.17133 3 -1 roll add Dh Alpha cos
mul sub 0.0 sub 3 1 roll add Dh Alpha sin mul add 0.0 add exch  108.405
div exch 108.405 div exch    108.405 mul exch 108.405 mul exch  } PutCoor
PutBegin  end
 0 9000 a 0 9000 a
tx@Dict begin ps@rot  RotBegin  end
 0 9000 a 0 9000 a
tx@Dict begin RotEnd  end

0 9000 a 0 9000 a
tx@Dict begin  PutEnd  end
 0 9000 a @beginspecial @setspecial
  tx@Dict begin STP newpath 4.33546 SLW 0 0 1  setrgbcolor  end


@endspecial 0 9000 a
tx@Dict begin { 1647.75565 428.1994 } PutCoor PutBegin  end
 0 9000 a 0 0 1 TeXcolorrgb -332
x Fa(statement\()g(s\))0 9714 y(wrapp)6 b(e)g(d)208 b(in)g(braces)p
0 TeXcolorgray 0 9000 a
tx@Dict begin  PutEnd  end
 0 9000 a eop end
%%Trailer

userdict /end-hook known{end-hook}if
%%EOF
